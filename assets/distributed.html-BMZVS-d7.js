import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as a,e as i}from"./app-7KT7HDzT.js";const r={},n=i('<h2 id="cap定理-为什么不可兼得-模型和应用√base理论" tabindex="-1"><a class="header-anchor" href="#cap定理-为什么不可兼得-模型和应用√base理论"><span>CAP定理？为什么不可兼得？模型和应用√BASE理论</span></a></h2><p>分布式系统中， CAP三者不可兼得<br> 一致性Consistency：所有节点在同一时间对同一份数据的访问结果是相同的<br> 可用性Availability：每个请求不管成功或者失败都有响应<br> 分区容忍性Partition tolerance：系统在出现网络分区（网络中某些节点间无法通信）情况下仍能继续运行</p><p>网络分区不可避免，如硬件故障、网络延迟或链路中断<br> 保证一致性。则可用性保证不了，因为要拒绝一些请求等到所有节点数据一致<br> 保证可用性。则一致性保证不了，因为所有节点数据达到一致要时间</p><p>CA(单机)：放弃分区容错性，集群数据库、xFS文件系统<br> AP：在网络分区发生时，可能会暂时牺牲一致性，允许数据延迟同步或最终一致性。=&gt;Web缓存、DNS、GOSSIP、MySQL主从异步复制、Redis<br> CP：在网络分区发生时，可能会牺牲部分可用性，拒绝某些请求。=&gt;分布式数据库、分布式锁、paxo、raft、zab.MySQL主从半同步复制</p><p>采用XA协议的强一致规范以及柔性事务的最终一致规范。</p><p>对AP的扩展，业务系统牺牲一致性来换取系统的可用性和分区容错性。BASE是下面三个短语的缩写<br> Basically Available基本可用：系统在发生故障时，允许降级服务以保持核心功能的可用性<br> Soft State软状态：允许系统中存在不影响系统可用性的中间状态<br> Eventually Consistent最终一致：指经过一段时间后，所有节点数据都将会达到一致。取决于网络延时、系统负载、数据复制方案设计等因素</p>',6),o=[n];function s(c,l){return e(),a("div",null,o)}const b=t(r,[["render",s],["__file","distributed.html.vue"]]),u=JSON.parse('{"path":"/interview/distributed/distributed.html","title":"分布式","lang":"zh-CN","frontmatter":{"title":"分布式","date":"2023-01-01T00:00:00.000Z","tags":"面试","categories":"面试","description":"CAP定理？为什么不可兼得？模型和应用√BASE理论 分布式系统中， CAP三者不可兼得 一致性Consistency：所有节点在同一时间对同一份数据的访问结果是相同的 可用性Availability：每个请求不管成功或者失败都有响应 分区容忍性Partition tolerance：系统在出现网络分区（网络中某些节点间无法通信）情况下仍能继续运行 网...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/distributed/distributed.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"分布式"}],["meta",{"property":"og:description","content":"CAP定理？为什么不可兼得？模型和应用√BASE理论 分布式系统中， CAP三者不可兼得 一致性Consistency：所有节点在同一时间对同一份数据的访问结果是相同的 可用性Availability：每个请求不管成功或者失败都有响应 分区容忍性Partition tolerance：系统在出现网络分区（网络中某些节点间无法通信）情况下仍能继续运行 网..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"CAP定理？为什么不可兼得？模型和应用√BASE理论","slug":"cap定理-为什么不可兼得-模型和应用√base理论","link":"#cap定理-为什么不可兼得-模型和应用√base理论","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.65,"words":496},"filePathRelative":"interview/distributed/distributed.md","localizedDate":"2023年1月1日","excerpt":"<!-- more -->\\n<h2>CAP定理？为什么不可兼得？模型和应用√BASE理论</h2>\\n<p>分布式系统中， CAP三者不可兼得<br>\\n一致性Consistency：所有节点在同一时间对同一份数据的访问结果是相同的<br>\\n可用性Availability：每个请求不管成功或者失败都有响应<br>\\n分区容忍性Partition tolerance：系统在出现网络分区（网络中某些节点间无法通信）情况下仍能继续运行</p>\\n<p>网络分区不可避免，如硬件故障、网络延迟或链路中断<br>\\n保证一致性。则可用性保证不了，因为要拒绝一些请求等到所有节点数据一致<br>\\n保证可用性。则一致性保证不了，因为所有节点数据达到一致要时间</p>","autoDesc":true}');export{b as comp,u as data};
