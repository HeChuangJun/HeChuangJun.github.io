import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as t,b as p,e as n}from"./app-7KT7HDzT.js";const e={},o=n(`<h2 id="_1-集合继承结构-阻塞-队列实现-并发修改异常、快速-安全失败原理、解决方法-如何删除元素-线程不安全的集合-方案-√" tabindex="-1"><a class="header-anchor" href="#_1-集合继承结构-阻塞-队列实现-并发修改异常、快速-安全失败原理、解决方法-如何删除元素-线程不安全的集合-方案-√"><span>.1. 集合继承结构？（阻塞）队列实现？并发修改异常、快速/安全失败原理、解决方法？如何删除元素？线程不安全的集合？方案？√</span></a></h2><details><summary>图</summary><p><img src="https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMw7adf710566fa6ec2fc6ecdbfb009806e.png" alt="collection.png"><br><img src="https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMwaab7fa9daee6cf5b237e7521a0eed579.png" alt="map.png"></p></details><p>Map，键值对集合。键不重复。HashMap、LinkedHashMap、TreeMap<br> Collection<br> List：元素有序，可重复。ArrayList、LinkedList<br> Set：元素无序，不重复。HashSet、TreeSet<br> Queue：队列<br> PriorityQueue：基于优先级堆的无界队列，元素按照自然顺序排序或者Comparator排序<br> ArrayDeque：基于数组的双端队列，能在两端插入和删除元素</p><p>BlockingQueue接口<br> 线程安全。阻塞队列，支持等待通知机制，在队列为空时，获取元素的线程会等待队列（阻塞）变为非空。当队列满时，存储元素的线程会等待队列可用（阻塞）<br> 用于生产者消费者问题、socket客户端数据的读取和解析<br> ArrayBlockingQueue：基于数组的FIFO有界队列<br> LinkedBlockingQueue：基于链表的<strong>可选</strong>FIFO有界队列，吞吐量高于ArrayBlockingQuene<br> DelayQueue：支持定时、周期执行任务的延迟队列。按执行时间、FIFO排序。元素要实现Delayed接口，指定多久才能从队列中获取当前元素。<br> 管理缓存系统有效期：循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。<br> 定时任务调度：DelayQueue保存执行的任务和执行时间，一旦从DelayQueue中获取到任务就执行<br> PriorityBlockingQueue具有优先级的无界队列，不保证同优先级元素的顺序<br> SynchronousQueue不存元素的队列，put操作阻塞直到其他线程调用take操作，吞吐量高于LinkedBlockingQuene</p><p>java.util包下的集合都是快速失败fail-fast：当多个线程对集合并发修改，或者遍历集合时修改结构（如添加、删除、修改元素），迭代器会抛出ConcurrentModificationException<br> List使用modCount记录结构修改次数，迭代器遍历时将modCount赋值给expectedmodCount。如果遍历期间集合结构被修改，modCount会改变。每次调用hasNext()或next()时，迭代器检查modCount是否等于expectedmodCount，若相等继续遍历，否则抛出异常并终止遍历<br> 使用synchronized或者CopyOnWriteArrayList</p><p>java.util.concurrent包下的集合都是安全失败fail-safe，遍历时在复制的集合上进行遍历。~不会被迭代器检测到，所以迭代器不会抛出ConcurrentModificationException，如CopyOnWriteArrayList<br> 迭代器不能访问到修改后的内容</p><p>使用Iterator顺序遍历调用remove方法；倒序遍历调用remove方法</p><p>Vector、HashTable、Properties线程安全<br> ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap 线程不安全<br> 用CopyOnWriteArrayList、ConcurrentHashMap<br> 用Collections.synchronizedList、synchronizedMap通过对象锁实现<br> 用同步机制synchronized关键字等</p><h2 id="_2-arraylist扩容机制-和linkedlist区别-√怎么序列化-为什么用transient修饰数组-copyonwritearraylist" tabindex="-1"><a class="header-anchor" href="#_2-arraylist扩容机制-和linkedlist区别-√怎么序列化-为什么用transient修饰数组-copyonwritearraylist"><span>.2. ArrayList扩容机制？和LinkedList区别？√怎么序列化？为什么用transient修饰数组？CopyOnWriteArrayList？</span></a></h2><p>初始容量10，插入前容量+1超过数组长度则扩容，创建1.5倍大小新数组并拷贝。指定初始容量能提升性能</p><p>ArrayList基于数组，LinkedList基于双向链表<br> ArrayList查找快(数组下标查找)，增删慢(扩容需要复制数组和移动元素)，适合末尾添加、随机访问场景<br> LinkedList查找慢(移动指针从头遍历)、增删快(改变前后驱节点指向)，适合中间插入删除，顺序访问场景<br> ArrayList支持随机访问，通过下标获取元素，实现了RandomAccess接口，LinkedList不支持，没有实现<br> ArrayList基于数组，内存空间连续，存在空的内存空间，存在一定空间浪费，LinkedList基于链表，内存空间不连续，每个节点存储前驱和后继指针，所以占用更多的空间</p><p>通过ObjectOutputStream和ObjectInputStream的readObject、writeObject方法或者json</p><p>使用transient修饰存储元素的elementData数组，避免序列化多余null值</p><p>线程安全。读写分离。读操作不加锁。写操作在复制数组上执行，再将原数组的引用指向新数组。<br> 读操作性能高，读写不竞争，写操作内存占用大，性能开销大<br> 适合读多写少</p><h2 id="_3-hashmap实现原理-put-get方法执行过程-怎么判断key相等-怎么计算hash、数组位置-设计原因-为什么是亦或而不是与-不用hashcode方法计算-容量为什么是2的幂次方-其他计算hash的方法-初始容量计算-扩容触发条件-扩容机制-扩容后的位置计算-为什么负载因子是0-75-hashmap-解决哈希冲突的方法-hash冲突后-将元素放到链表头还是尾√-hashmap为什么不是线程安全的-为什么不用二叉树或者平衡树呢-为什么链表要转红黑树-不直接用红黑树-链表转换为红黑树阈值是8-红黑树转链表阈值是6-jdk1-8优化-为什么" tabindex="-1"><a class="header-anchor" href="#_3-hashmap实现原理-put-get方法执行过程-怎么判断key相等-怎么计算hash、数组位置-设计原因-为什么是亦或而不是与-不用hashcode方法计算-容量为什么是2的幂次方-其他计算hash的方法-初始容量计算-扩容触发条件-扩容机制-扩容后的位置计算-为什么负载因子是0-75-hashmap-解决哈希冲突的方法-hash冲突后-将元素放到链表头还是尾√-hashmap为什么不是线程安全的-为什么不用二叉树或者平衡树呢-为什么链表要转红黑树-不直接用红黑树-链表转换为红黑树阈值是8-红黑树转链表阈值是6-jdk1-8优化-为什么"><span>.3. HashMap实现原理？/put/get方法执行过程？怎么判断key相等？怎么计算hash、数组位置？设计原因/为什么是亦或而不是与/不用hashCode方法计算/容量为什么是2的幂次方？其他计算hash的方法？初始容量计算？扩容触发条件？扩容机制？扩容后的位置计算？为什么负载因子是0.75？(hashMap)解决哈希冲突的方法？hash冲突后，将元素放到链表头还是尾√/HashMap为什么不是线程安全的？为什么不用二叉树或者平衡树呢？为什么链表要转红黑树/不直接用红黑树？链表转换为红黑树阈值是8？红黑树转链表阈值是6？jdk1.8优化？为什么？</span></a></h2><details><summary>图</summary><p><img src="https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMwf86a09c4b0c2bf70b392c6ed81037673.png" alt="hashmapstructure.png"><br><img src="https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMwe7f707bf6afd00a12f14c1bcc16f2c42.jpg" alt="put.jpg"><br><img src="https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMw504014340d6d7027e8ff284e3caf6240.png" alt="get.png"></p></details><p>jdk1.8HashMap的底层数据结构是Node数组+链表+红黑树</p><details><summary>1. 向HashMap中添加键值对时，通过哈希函数计算key的哈希值</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>2. 判断tab是否为空或者长度为0，如果是则进行扩容</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
  n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>3. 根据哈希值确定数组下标，如果数组对应下标没有数据，则直接插入</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>4. 如果对应下标有数据（哈希冲突）就要判断key是否相同，是则覆盖value，否则需要判断是否为树节点，是则向树中插入节点，否则向链表中插入数据。在链表中插入节点时，如果链表长度大于等于8且数组长度&gt;=64，则把链表转换为红黑树。提升查询性能，红黑树的查询效率O(logN)，比链表O(n)快。当红黑树节点个数小于6时转为链表</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
    <span class="token comment">//</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        e <span class="token operator">=</span> p<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
        e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st 转链表</span>
                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>5. 最后判断是否超过阈值threshold，超过则扩容。然后rehash原数组</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>
    <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><p>获取元素时使用哈希函数计算哈希值，计算数组下标，判断对应下标数据与key是否相等，是则直接返回，否则，判断节点是否为树节点，查找红黑树，否则，遍历链表查找</p><p>先判断key.hash==，再判断key==，最后判断equals</p><p>hash = (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16) key的hashCode低16位与高16位异或<br> (length - 1) &amp; hash hash和数组长度-1进行与操作</p><p>减少hash碰撞，hashCode的高位参与运算增加低位的随机性，使数据分布更均匀。因为数组长度为2的幂次方，数组长度-1相当于低位掩码。与操作的结果就是散列值的高位全部归零，只保留低位值</p><p>亦或得到1和0的概率为50%，与为25%和75%，保证随机性</p><p>当数组长度为2的幂次方时，h&amp;(length-1)等价于h%length取模，位运算效率比取模高<br> 取模操作解决了“哈希值与数组大小范围不匹配”的问题；key.hashCode()返回int类型范围-(2 ^ 31)~(2 ^ 31 - 1)，为负数时不能作为下标，太大则浪费内存</p><p>~<br> 充分利用数组空间，减少hash冲突，如果length不是2的次幂，比如15，length–1=14，二进制为1110，h与操作最后一位都为0，0001，0011，0101，1001，1011，0111，1101这几个位置不能存放元素了，此时数组可用位置变少<br> 扩容时无需重新计算哈希值，~</p><p>直接定址法：直接根据key映射数组位置<br> 数字分析法：取key的某些数字（如十、百位）<br> 除留取余法(HashMap)：根据key与哈希表长度取模<br> 平方取中法：取key平方的中间几位<br> 折叠法：将key分割成位数相同的几段和<br><code>质数除平折</code></p><p>初始容量默认16，可指定，过大会浪费内存，过小可能因扩容性能下降，因为扩容时需要重新分配2倍容量的数组并插入元素</p><p>取大于该值的最小的2次幂</p><details><summary>source</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//MAXIMUM_CAPACITY = 1 &lt;&lt; 30最⼤的Map集合</span>
<span class="token comment">//或运算把⼆进制的各个位置都填1，就是2的倍数减1了，最后加1即可</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
 n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
 n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
 n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
 n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
 n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>调用put方法且数组为null时<br> 元素个数大于扩容阈值threshold=负载因子loadFactor(0.75)*容量capacity时。先插入数据再扩容<br> 容量范围：16-2^30</p><p>创建原数组容量两倍的新数组。根据hash &amp; oldCap是否为0，得到扩容后的位置为原位置或者原位置加旧容量，将键值对放到新计算出的索引位置上。（原哈希值的高位中新增的那一位是否为1，因为位置计算实际上是保留低位值，去掉所有高位值，比如原容量16，16-1=15则保留4位低位，扩容后32。32-1=31保留5位低位，相差1位，刚好是旧容量16的二进制，0001000）</p><p>在减少冲突、节省空间和扩容性能之间的折中方案。过高，节省空间，但hash冲突增多，查找慢，过低，hash冲突减少，查找块，但频繁扩容，浪费空间</p><p>链地址法，哈希冲突时使用链表将冲突的元素串起来(HashMap)<br> 再哈希法：哈希冲突时使用另外一种哈希算法。还冲突则双重hash<br> 开放地址法：<br> 线性探测：从冲突的位置开始，依次+1往后找，直到找到空槽<br> 二次探测：从冲突的位置x开始，第一次增加1^2个位置，第二次增加2^2，直到找到空槽<br> 双重哈希：发生冲突时使用另外一个哈希函数*步长i<br><code>链再开线二双</code></p><p>JDK1.7使用头插法插入元素，多线程环境扩容时可能出现环形链表。造成死循环，假设链表元素顺序是C-&gt;B-&gt;A，此时线程1和2引用指向C，线程1和2.next指向B，当hashMap扩容并且线程2完成插入，此时链表的状态为A-&gt;B-&gt;C，此时线程1指向C，线程1.next指向B，此时线程1扩容就变成C-&gt;B-&gt;C了，因为此时B.next-&gt;C<br> JDK1.8改尾插法，扩容时会保持链表原来的顺序，减少线程安全的问题<br> 多线程put可能丢失元素。因为多线程哈希冲突时没加锁，计算出来的位置可能被其他线程的put覆盖，正常应该形成链表<br> put和get并发时，get可能为null。线程1执行put时，因为元素个数超出阈值而导致出现扩容，线程2执行get可能为null，因为线程1执行完table = newTab后，线程2中的table发生了变化，因为元素还没有迁移</p><p>如果插入的数据是有序的，那么二叉树会退化成链表，查询复杂度增至O(n)<br> 平衡二叉树插入和删除数据时，为了保持平衡需要旋转的次数更多，效率比红黑树低<br> 平衡二叉树需要记录平衡因子，红黑树只需一个位表示节点的颜色红黑，内存占用低</p><p>红黑树节点的大小大概是普通节点的两倍，用空间换时间，保证极端情况下的查找效率</p><p>因为当负载因子是0.75服从泊松分布，当单个桶内的元素达到8个的概率小于千万分之一，几乎不可能，转红黑树只是保证极端情况下的查找效率</p><p>如果设置成8，假如发生碰撞，节点增减刚好在8附近，链表和红黑树不断转换，浪费资源</p><p>低层结构：数组+链表改成了数组+链表或红黑树 红黑树保证极端情况下查询效率将时间复杂度由O(n)降为O(logn)<br> 扩容rehash：1.7要对原数组中的元素进行重新hash定位在新数组的位置，1.8新的位置不变或索引+新增容量大小。提高扩容的效率<br> 散列函数：1.7做了四次移位和四次异或，jdk1.8只做一次。改为一次提升效率<br> 链表插入方式：从头插法改成了尾插法 头插法扩容时，多线程环境下会产生环<br><code>低扩散链</code></p><h2 id="_4-jdk7、8中concurrenthashmap实现-怎么保证可见性-为什么比hashtable效率高-区别" tabindex="-1"><a class="header-anchor" href="#_4-jdk7、8中concurrenthashmap实现-怎么保证可见性-为什么比hashtable效率高-区别"><span>.4. jdk7、8中ConcurrentHashMap实现？怎么保证可见性？为什么比Hashtable效率高/区别？</span></a></h2><p>JDK7中ConcurrentHashMap<br> 数据结构是Segment数组+HashEntry数组<br> 使用分段锁机制Segment Locking，默认将Map分成16段Segment，每段包含HashEntry数组，Hash冲突时HashEntry会形成链表，HashEntry用于存储键值对数据。<br> 每个Segment使用ReentrantLock加锁。多线程访问不同数据段的数据不存在锁竞争，提高并发度，保证线程安全</p><p>put<br> 计算hash，定位到 segment，如果是空就先初始化<br> 使用ReentrantLock加锁，如果获取锁失败则尝试自旋，自旋超过次数就阻塞获取，保证一定能获取到锁<br> 计算HashEntry下标，遍历HashEntry，key相同就替换，不存在就头插法插入。超过容量则扩容<br> 释放锁<br> get<br> 通过hash定位到segment，再遍历链表找元素，因为value是volatile的，所以不需要加锁<br><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/798b56179a1383beb4c98.png" alt="jdk7concurrenthashmapput.png"></p><p>JDK8+ConcurrentHashMap<br> 使用CAS+synchronized保证线程安全，使用Node数组+链表+红黑树的数据结构<br> 对每个桶（Node数组的每个元素）独立加锁，锁粒度更小，并发度更高。JDK1.6优化了synchronized，CAS操作不阻塞线程</p><p>读操作不加锁，因为volatile修饰Segment数组和Node数组保证内存可见性<br> 写操作使用CAS实现尝试更新，乐观锁，如果失败使用synchronized同步块保证原子性</p><p>put</p><details><summary>1.计算hash= key.hashCode() &amp; 0x7fffffff 2^31-1，保证结果是正数，遍历node数组，如果node是空则通过CAS+自旋初始化</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span> <span class="token class-name">K</span> fk<span class="token punctuation">;</span> <span class="token class-name">V</span> fv<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token constant">HASH_BITS</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果正在初始化或者扩容</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">//等待</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lost initialization race; just spin</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>
                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>
                    sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tab<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>2. 如果当前数组位置是空，直接CAS自旋写数据</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>                   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>3. 如果 hash==MOVED 则扩容</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>
    tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">;</span> <span class="token comment">// 缓存扩容后的数组</span>
    <span class="token keyword">int</span> sc<span class="token punctuation">;</span> <span class="token comment">// 缓存sizeCtl</span>
    <span class="token comment">//表不为空，节点f是ForwardingNode类型，且f中的nextTable不为空时扩容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">ForwardingNode</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>nextTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ForwardingNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>nextTable<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据当前表长度计算resize stamp</span>
        <span class="token comment">// 检查循环条件：nextTab等于nextTable，table等于传入的tab，且sizeCtl为负数（表示正在进行或准备进行扩容）</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> nextTable <span class="token operator">&amp;&amp;</span> table <span class="token operator">==</span> tab <span class="token operator">&amp;&amp;</span>
               <span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 检查是否应该停止扩容（比如：resize stamp不匹配，或者已达到最大并发扩容线程数，或者transferIndex已经不大于0）</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">&gt;&gt;&gt;</span> <span class="token constant">RESIZE_STAMP_SHIFT</span><span class="token punctuation">)</span> <span class="token operator">!=</span> rs <span class="token operator">||</span> sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span>
                sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token constant">MAX_RESIZERS</span> <span class="token operator">||</span> transferIndex <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 尝试通过CAS增加sizeCtl的值，以表示有更多线程参与扩容</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> sc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用transfer方法，实际进行数据迁移</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> nextTab<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> table<span class="token punctuation">;</span> <span class="token comment">//不符合扩容条件时返回当前表引用</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,52),c=n('<p>get：通过key计算位置，该位置key相同就返回，如果是红黑树按照红黑树获取，否则就遍历链表获取</p><p>底层数据结构：ConcurrentHashMap和hashMap一样。Hashtable和JDK1.7的HashMap一样<br> 实现线程安全的方式<br> ConcurrentHashMap：JDK1.7~ JDK1.8~<br> Hashtable使用synchronized保证线程安全，每次同步执行时都锁住整个Map实现线程安全。效率低<br> ~。Hashtable对读操作加锁，效率低</p><h2 id="_5-hashmap有序吗-和linkedhashmap、treemap、hashtable√、concurrenthashmap区别-hashset、linkedhashset、treeset实现-和arraylist区别-comparable和comparator区别-集合如何排序" tabindex="-1"><a class="header-anchor" href="#_5-hashmap有序吗-和linkedhashmap、treemap、hashtable√、concurrenthashmap区别-hashset、linkedhashset、treeset实现-和arraylist区别-comparable和comparator区别-集合如何排序"><span>.5. HashMap有序吗？和LinkedHashMap、TreeMap、HashTable√、ConcurrentHashMap区别？HashSet、LinkedHashSet、TreeSet实现？和ArrayList区别？Comparable和Comparator区别？集合如何排序？</span></a></h2><p>无序，根据hash值随机插入</p><p>LinkedHashMap：按插入顺序或访问顺序排序。通过双向链表保证<br> TreeMap：按照key的自然顺序或Comprator顺序排序，通过红黑树保证。key类实现Comparable接口或者实现Comparator接口。查找效率O(logn)。适用于范围查找或者有序遍历的场景</p><p>HashMap键可以为空，hash=0，线程不安全，默认大小是16，每次扩容2倍</p><p>Hashtable键不为空，否则抛出空指针异常，线程安全，默认大小是11 ，每次扩容2倍+1</p><p>ConcurrentHashMap键不为空，线程安全，将桶数组分段(Segment)，每段都用锁保护</p><p>HashSet：元素无序、不重复、基于HashMap实现，除了clone()、writeObject()、readObject()⾃定义外都⽤HashMap的⽅法<br> LinkedHashSet：元素有序，不重复，基于LinkedHashMap<br> TreeSet：元素有序，不重复，红黑树(自平衡的排序二叉树)</p><p>ArrayList基于数组，元素有序，通过索引访问元素；允许重复元素和null值；</p><p>Comparable接口用于当前对象和其它对象的比较，compareTo(Object obj)在比较类上修改<br> Comparator接口用于传入的两个对象的比较，compare(Object obj1, Object obj2) 新增类用于比较<br> 实现Comparator接口compare(T o1,T o2)小于、等于或者大于o2分别返回负整数、0或者正整数</p>',11);function l(i,u){return s(),t("div",null,[o,p(" 1. 如果都不满足就用synchronized写入数据，和HashMap一样，key的hash一样就覆盖，反之使用拉链法解决哈希冲突，当链表长度超过8转换成红黑树 "),c])}const d=a(e,[["render",l],["__file","javacollections.html.vue"]]),m=JSON.parse('{"path":"/interview/java/javacollections.html","title":"java集合","lang":"zh-CN","frontmatter":{"title":"java集合","date":"2023-01-01T00:00:00.000Z","tags":"java","categories":"面试","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/java/javacollections.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"java集合"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMw7adf710566fa6ec2fc6ecdbfb009806e.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java集合\\",\\"image\\":[\\"https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMw7adf710566fa6ec2fc6ecdbfb009806e.png\\",\\"https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMwaab7fa9daee6cf5b237e7521a0eed579.png\\",\\"https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMwf86a09c4b0c2bf70b392c6ed81037673.png\\",\\"https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMwe7f707bf6afd00a12f14c1bcc16f2c42.jpg\\",\\"https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMw504014340d6d7027e8ff284e3caf6240.png\\",\\"https://290ff162.telegraph-image-eg9.pages.dev/file/798b56179a1383beb4c98.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":".1. 集合继承结构？（阻塞）队列实现？并发修改异常、快速/安全失败原理、解决方法？如何删除元素？线程不安全的集合？方案？√","slug":"_1-集合继承结构-阻塞-队列实现-并发修改异常、快速-安全失败原理、解决方法-如何删除元素-线程不安全的集合-方案-√","link":"#_1-集合继承结构-阻塞-队列实现-并发修改异常、快速-安全失败原理、解决方法-如何删除元素-线程不安全的集合-方案-√","children":[]},{"level":2,"title":".2. ArrayList扩容机制？和LinkedList区别？√怎么序列化？为什么用transient修饰数组？CopyOnWriteArrayList？","slug":"_2-arraylist扩容机制-和linkedlist区别-√怎么序列化-为什么用transient修饰数组-copyonwritearraylist","link":"#_2-arraylist扩容机制-和linkedlist区别-√怎么序列化-为什么用transient修饰数组-copyonwritearraylist","children":[]},{"level":2,"title":".3. HashMap实现原理？/put/get方法执行过程？怎么判断key相等？怎么计算hash、数组位置？设计原因/为什么是亦或而不是与/不用hashCode方法计算/容量为什么是2的幂次方？其他计算hash的方法？初始容量计算？扩容触发条件？扩容机制？扩容后的位置计算？为什么负载因子是0.75？(hashMap)解决哈希冲突的方法？hash冲突后，将元素放到链表头还是尾√/HashMap为什么不是线程安全的？为什么不用二叉树或者平衡树呢？为什么链表要转红黑树/不直接用红黑树？链表转换为红黑树阈值是8？红黑树转链表阈值是6？jdk1.8优化？为什么？","slug":"_3-hashmap实现原理-put-get方法执行过程-怎么判断key相等-怎么计算hash、数组位置-设计原因-为什么是亦或而不是与-不用hashcode方法计算-容量为什么是2的幂次方-其他计算hash的方法-初始容量计算-扩容触发条件-扩容机制-扩容后的位置计算-为什么负载因子是0-75-hashmap-解决哈希冲突的方法-hash冲突后-将元素放到链表头还是尾√-hashmap为什么不是线程安全的-为什么不用二叉树或者平衡树呢-为什么链表要转红黑树-不直接用红黑树-链表转换为红黑树阈值是8-红黑树转链表阈值是6-jdk1-8优化-为什么","link":"#_3-hashmap实现原理-put-get方法执行过程-怎么判断key相等-怎么计算hash、数组位置-设计原因-为什么是亦或而不是与-不用hashcode方法计算-容量为什么是2的幂次方-其他计算hash的方法-初始容量计算-扩容触发条件-扩容机制-扩容后的位置计算-为什么负载因子是0-75-hashmap-解决哈希冲突的方法-hash冲突后-将元素放到链表头还是尾√-hashmap为什么不是线程安全的-为什么不用二叉树或者平衡树呢-为什么链表要转红黑树-不直接用红黑树-链表转换为红黑树阈值是8-红黑树转链表阈值是6-jdk1-8优化-为什么","children":[]},{"level":2,"title":".4. jdk7、8中ConcurrentHashMap实现？怎么保证可见性？为什么比Hashtable效率高/区别？","slug":"_4-jdk7、8中concurrenthashmap实现-怎么保证可见性-为什么比hashtable效率高-区别","link":"#_4-jdk7、8中concurrenthashmap实现-怎么保证可见性-为什么比hashtable效率高-区别","children":[]},{"level":2,"title":".5. HashMap有序吗？和LinkedHashMap、TreeMap、HashTable√、ConcurrentHashMap区别？HashSet、LinkedHashSet、TreeSet实现？和ArrayList区别？Comparable和Comparator区别？集合如何排序？","slug":"_5-hashmap有序吗-和linkedhashmap、treemap、hashtable√、concurrenthashmap区别-hashset、linkedhashset、treeset实现-和arraylist区别-comparable和comparator区别-集合如何排序","link":"#_5-hashmap有序吗-和linkedhashmap、treemap、hashtable√、concurrenthashmap区别-hashset、linkedhashset、treeset实现-和arraylist区别-comparable和comparator区别-集合如何排序","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":15.76,"words":4727},"filePathRelative":"interview/java/javacollections.md","localizedDate":"2023年1月1日","excerpt":""}');export{d as comp,m as data};
