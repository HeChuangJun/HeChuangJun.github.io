import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-7KT7HDzT.js";const p={},e=t(`<h2 id="限流-为什么-和熔断、削峰区别" tabindex="-1"><a class="header-anchor" href="#限流-为什么-和熔断、削峰区别"><span>限流？为什么？和熔断、削峰区别？</span></a></h2><p>限制系统在某一时间段内接受到的请求，避免流量多到超出负载使系统宕机</p><p>限流发生在流量进来前，对超过的流量进行限制。<br> 熔断发生在流量进来后，系统发生故障时会自动切断请求，防止故障进一步扩展，导致服务雪崩<br> 削峰是对流量的平滑处理，缓慢增加请求的处理速率来避免系统瞬时过载</p><p>削峰是水库，把流量储存起来，慢慢流，限流是闸口，拒绝超出的流量</p><h2 id="限流实现步骤" tabindex="-1"><a class="header-anchor" href="#限流实现步骤"><span>限流实现步骤</span></a></h2><p><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ08ad43f1cdac714893b9c8182deba861.png" alt="限流设计.png"><br> 通过计数器、滑动窗口等方式<strong>统计请求流量（数量或速率）</strong>。单机版储存到本地。集群存储到Redis<br> 根据设定的限制条件，<strong>判断当前请求流量是否超过限制</strong><br> 如果请求流量超过限制，<strong>执行限流策略</strong>，如拒绝请求、延迟处理、返回错误信息等<br> 根据请求的处理结果，<strong>更新统计信息</strong>，如增加计数器的值、更新滑动窗口的数据等<br> 重复执行以上步骤：不断地~</p><h2 id="限流算法及实现" tabindex="-1"><a class="header-anchor" href="#限流算法及实现"><span>限流算法及实现</span></a></h2><details><summary>使用Redis作为分布式存储；Redission作为Redis客户端</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//单例模式获取RedissonClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonConfig</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">REDIS_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;redis://127.0.0.1:6379&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span>  <span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RedissonClient</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>redissonClient<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">RedissonConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redissonClient<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token constant">REDIS_ADDRESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          redissonClient <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> redissonClient<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> redissonClient<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>固定窗口限流算法/计数器</summary><p>将时间划分为固定长度的窗口（如每分钟），在每个时间窗口内，限制能够接受的最大请求数。<br> 每个窗口期通过incrementAndGet操作统计请求的数量。窗口期结束利用键过期自动重置计数<br> 实现简单，适用于流量比较稳定、请求数不太波动的场景。<br> 不平滑和突发性流量：窗口切换的瞬间可能出现请求过多，造成系统的瞬时压力。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FixedWindowRateLimiter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;fixedWindowRateLimiter:&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//请求限制数量</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> limit<span class="token punctuation">;</span>
    <span class="token comment">//窗口大小（单位：S）</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> windowSize<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FixedWindowRateLimiter</span><span class="token punctuation">(</span><span class="token class-name">Long</span> limit<span class="token punctuation">,</span> <span class="token class-name">Long</span> windowSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>windowSize <span class="token operator">=</span> windowSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//固定窗口限流</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">triggerLimit</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedissonClient</span> redissonClient <span class="token operator">=</span> <span class="token class-name">RedissonConfig</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//加分布式锁，防止并发情况下窗口初始化时间不一致问题</span>
        <span class="token class-name">RLock</span> rLock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">KEY</span> <span class="token operator">+</span> <span class="token string">&quot;LOCK:&quot;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            rLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token constant">KEY</span> <span class="token operator">+</span> path<span class="token punctuation">;</span>
            <span class="token class-name">RAtomicLong</span> counter <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getAtomicLong</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//计数</span>
            <span class="token keyword">long</span> count <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//如果为1的话，就说明窗口刚初始化</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//直接设置过期时间，作为窗口</span>
                counter<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//触发限流</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//触发限流的不记在请求数量中</span>
                counter<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">FixedWindowRateLimiterTest</span> <span class="token punctuation">{</span>
    <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> 
    <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;1min限制10次请求固定窗口测试&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">triggerLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">FixedWindowRateLimiter</span> fixedWindowRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedWindowRateLimiter</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">,</span><span class="token number">60L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//模拟不同窗口内的调用</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//20个线程并发调用</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">boolean</span> isLimit <span class="token operator">=</span> fixedWindowRateLimiter<span class="token punctuation">.</span><span class="token function">triggerLimit</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>滑动窗口算法</summary><p>将一个大时间窗口划分为多个小时间窗口，每个小窗口都有独立的计数。判断请求的次数是否超过整个窗口的限制。窗口的移动是每次向前滑动一个小的单元窗口<br> 例如将大时间窗口1min分成5个小窗口，每个小窗口的时间是12s。每个单元格有自己独立的计数器，每过12s就会向前移动一格。假如有请求在00:01的时候过来，这时窗口的计数3+12+9+15=39<br> 解决了固定窗口的突发流量问题，适合于要求流量更加平滑、避免请求高峰集中在某个时间段的系统。<br> 实现相对复杂<br><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ0a50faee79c72b3d628c04303f64e279.png" alt="滑动窗口限流算法.png"></p><p>使用Redis的zset结构。有请求过来时，把当前时间戳添加到zset。那么窗口之外的请求，根据窗口大小计算出起始时间戳，删除窗口外的请求。zset的大小就是窗口的请求数<br> zset在高并发情况下，时间戳可能会重复，导致统计的请求偏少，用时间戳+随机数或者生成唯一序列解决</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingWindowRateLimiter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;slidingWindowRateLimiter:&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//请求次数限制</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> limit<span class="token punctuation">;</span>
    <span class="token comment">//窗口大小S</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> windowSize<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span><span class="token class-name">Long</span> limit<span class="token punctuation">,</span> <span class="token class-name">Long</span> windowSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>windowSize <span class="token operator">=</span> windowSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">triggerLimit</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedissonClient</span> redissonClient <span class="token operator">=</span> <span class="token class-name">RedissonConfig</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//窗口计数</span>
        <span class="token class-name">RScoredSortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> counter <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getScoredSortedSet</span><span class="token punctuation">(</span><span class="token constant">KEY</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//使用分布式锁，避免并发设置初始值的时候，导致窗口计数被覆盖</span>
        <span class="token class-name">RLock</span> rLock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">KEY</span> <span class="token operator">+</span> <span class="token string">&quot;LOCK:&quot;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            rLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 当前时间戳</span>
            <span class="token keyword">long</span> currentTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 窗口起始时间戳</span>
            <span class="token keyword">long</span> windowStartTimestamp <span class="token operator">=</span> currentTimestamp <span class="token operator">-</span> windowSize <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
            <span class="token comment">// 移除窗口外的时间戳，左闭右开</span>
            counter<span class="token punctuation">.</span><span class="token function">removeRangeByScore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> windowStartTimestamp<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 将当前时间戳作为score,也作为member，</span>
            <span class="token comment">// TODO:高并发情况下可能没法保证唯一，可以加一个唯一标识</span>
            counter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentTimestamp<span class="token punctuation">,</span> currentTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//使用zset的元素个数，作为请求计数</span>
            <span class="token keyword">long</span> count <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断时间戳数量是否超过限流阈值</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[triggerLimit] path:&quot;</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">&quot; count:&quot;</span> 
                <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&quot; over limit:&quot;</span> <span class="token operator">+</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">SlidingWindowRateLimiterTest</span> <span class="token punctuation">{</span>
    <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> 
    <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;滑动窗口限流&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">triggerLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">SlidingWindowRateLimiter</span> slidingWindowRateLimiter <span class="token operator">=</span> 
        <span class="token keyword">new</span> <span class="token class-name">SlidingWindowRateLimiter</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//模拟在不同时间片内的请求</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">boolean</span> isLimit <span class="token operator">=</span> slidingWindowRateLimiter<span class="token punctuation">.</span><span class="token function">triggerLimit</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//休眠10s</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>漏桶算法（Leaky Bucket）</summary> 请求进入桶中，桶中的请求会按照固定的速率处理。 如果请求的到达速度超过桶的容量，则多余的请求将被丢弃。 漏桶算法限制了流量的最大输出速率 <p>使用RScoredSortedSet，ZREMRANGEBYSCORE命令来删除旧请求<br> 用zSet来存储path，定时任务处理所有path对应的桶的出水<br> 用ScheduledExecutorService启动了定时任务，1s跑一次，<br> 集群下用xxl-job去执行leakWater</p><p>稳定输出速率，不会受到突发流量的影响。<br> 简单易实现<br> 不能处理突发流量：可能会丢弃大量请求，不能像令牌桶那样灵活应对突发流量。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeakyBucketRateLimiter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">RedissonClient</span> redissonClient <span class="token operator">=</span> <span class="token class-name">RedissonConfig</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;LeakyBucket:&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//桶的大小</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> bucketSize<span class="token punctuation">;</span>
    <span class="token comment">//漏水速率，个/秒</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> leakRate<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">LeakyBucketRateLimiter</span><span class="token punctuation">(</span><span class="token class-name">Long</span> bucketSize<span class="token punctuation">,</span> <span class="token class-name">Long</span> leakRate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>bucketSize <span class="token operator">=</span> bucketSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>leakRate <span class="token operator">=</span> leakRate<span class="token punctuation">;</span>
        <span class="token comment">//定时任务，每s执行一次</span>
        <span class="token class-name">ScheduledExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">leakWater</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//漏水</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leakWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pathSet<span class="token operator">=</span>redissonClient<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span><span class="token constant">KEY_PREFIX</span><span class="token operator">+</span><span class="token string">&quot;:pathSet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//遍历所有path,删除旧请求</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token operator">:</span>pathSet<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token constant">KEY_PREFIX</span> <span class="token operator">+</span> path<span class="token punctuation">;</span>
            <span class="token class-name">RScoredSortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> bucket <span class="token operator">=</span> 
            redissonClient<span class="token punctuation">.</span><span class="token function">getScoredSortedSet</span><span class="token punctuation">(</span><span class="token constant">KEY_PREFIX</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 删除旧的请求</span>
            bucket<span class="token punctuation">.</span><span class="token function">removeRangeByScore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>now <span class="token operator">-</span> <span class="token number">1000</span> <span class="token operator">*</span> leakRate<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//限流</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">triggerLimit</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//加锁，防止并发初始化问题</span>
        <span class="token class-name">RLock</span> rLock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">KEY_PREFIX</span> <span class="token operator">+</span> <span class="token string">&quot;LOCK:&quot;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            rLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token constant">KEY_PREFIX</span> <span class="token operator">+</span> path<span class="token punctuation">;</span>
            <span class="token class-name">RScoredSortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> bucket <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getScoredSortedSet</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//这里用一个set，来存储所有path</span>
            <span class="token class-name">RSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pathSet<span class="token operator">=</span>redissonClient<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span><span class="token constant">KEY_PREFIX</span><span class="token operator">+</span><span class="token string">&quot;:pathSet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pathSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取当前时间</span>
            <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 检查桶是否已满</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> bucketSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 桶未满，添加一个元素到桶中</span>
                bucket<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 桶已满，触发限流</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[triggerLimit] path:&quot;</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">&quot; bucket size:&quot;</span><span class="token operator">+</span>bucket<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LeakyBucketRateLimiterTest</span> <span class="token punctuation">{</span>

    <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> 
    <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;漏桶算法&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">triggerLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">LeakyBucketRateLimiter</span> leakyBucketRateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeakyBucketRateLimiter</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">boolean</span> isLimit <span class="token operator">=</span> leakyBucketRateLimiter<span class="token punctuation">.</span><span class="token function">triggerLimit</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>令牌桶算法</summary> 使用一个桶来存储令牌，每个请求在到达时都需要获取一个令牌才能被处理。 以固定速率在桶中生成一定数量的令牌，当桶中的令牌数达到上限时，新的令牌会被丢弃。 如果桶中有令牌，请求可以直接处理；如果没有令牌，请求将被拒绝。 桶的容量决定了系统可以承受的最大突发请求量。 <p>实现：开个线程定时往桶里投令牌，Redission提供令牌桶算法的实现</p><p>平滑流量：令牌桶算法允许在短时间内处理突发流量，只要桶中有足够的令牌，系统就可以接收突发流量。<br> 灵活性高：令牌生成速率是固定的，突发流量可以由桶的容量来控制。</p><p>要维护一个令牌桶，增加了系统的复杂度。<br> 如果突发流量超过了桶的容量，超出部分请求会被丢弃</p><p>Guava RateLimiter，基于令牌桶算法限流，单机<br> Sentinel ，基于滑动窗口限流，支持集群<br> 网关限流，比如Spring Cloud Gateway、Nginx</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucketRateLimiter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;TokenBucketRateLimiter:&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//阈值</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> limit<span class="token punctuation">;</span>
    <span class="token comment">//添加令牌的速率，单位：个/秒</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> tokenRate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TokenBucketRateLimiter</span><span class="token punctuation">(</span><span class="token class-name">Long</span> limit<span class="token punctuation">,</span> <span class="token class-name">Long</span> tokenRate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tokenRate <span class="token operator">=</span> tokenRate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//限流</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">triggerLimit</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">RedissonClient</span> redissonClient<span class="token operator">=</span><span class="token class-name">RedissonConfig</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RRateLimiter</span> rateLimiter <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getRateLimiter</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化，设置速率模式，速率，间隔，间隔单位</span>
        rateLimiter<span class="token punctuation">.</span><span class="token function">trySetRate</span><span class="token punctuation">(</span><span class="token class-name">RateType</span><span class="token punctuation">.</span><span class="token constant">OVERALL</span><span class="token punctuation">,</span> limit<span class="token punctuation">,</span>
         tokenRate<span class="token punctuation">,</span> <span class="token class-name">RateIntervalUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取令牌</span>
        <span class="token keyword">return</span> rateLimiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,12),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","ratelimit.html.vue"]]),d=JSON.parse('{"path":"/interview/scenedesign/ratelimit.html","title":"限流设计","lang":"zh-CN","frontmatter":{"title":"限流设计","date":"2023-01-01T00:00:00.000Z","tags":"面试","categories":"面试","description":"限流？为什么？和熔断、削峰区别？ 限制系统在某一时间段内接受到的请求，避免流量多到超出负载使系统宕机 限流发生在流量进来前，对超过的流量进行限制。 熔断发生在流量进来后，系统发生故障时会自动切断请求，防止故障进一步扩展，导致服务雪崩 削峰是对流量的平滑处理，缓慢增加请求的处理速率来避免系统瞬时过载 削峰是水库，把流量储存起来，慢慢流，限流是闸口，拒绝超...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/scenedesign/ratelimit.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"限流设计"}],["meta",{"property":"og:description","content":"限流？为什么？和熔断、削峰区别？ 限制系统在某一时间段内接受到的请求，避免流量多到超出负载使系统宕机 限流发生在流量进来前，对超过的流量进行限制。 熔断发生在流量进来后，系统发生故障时会自动切断请求，防止故障进一步扩展，导致服务雪崩 削峰是对流量的平滑处理，缓慢增加请求的处理速率来避免系统瞬时过载 削峰是水库，把流量储存起来，慢慢流，限流是闸口，拒绝超..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ08ad43f1cdac714893b9c8182deba861.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"限流设计\\",\\"image\\":[\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ08ad43f1cdac714893b9c8182deba861.png\\",\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ0a50faee79c72b3d628c04303f64e279.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"限流？为什么？和熔断、削峰区别？","slug":"限流-为什么-和熔断、削峰区别","link":"#限流-为什么-和熔断、削峰区别","children":[]},{"level":2,"title":"限流实现步骤","slug":"限流实现步骤","link":"#限流实现步骤","children":[]},{"level":2,"title":"限流算法及实现","slug":"限流算法及实现","link":"#限流算法及实现","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.67,"words":2300},"filePathRelative":"interview/scenedesign/ratelimit.md","localizedDate":"2023年1月1日","excerpt":"<h2>限流？为什么？和熔断、削峰区别？</h2>\\n<p>限制系统在某一时间段内接受到的请求，避免流量多到超出负载使系统宕机</p>\\n<p>限流发生在流量进来前，对超过的流量进行限制。<br>\\n熔断发生在流量进来后，系统发生故障时会自动切断请求，防止故障进一步扩展，导致服务雪崩<br>\\n削峰是对流量的平滑处理，缓慢增加请求的处理速率来避免系统瞬时过载</p>\\n<p>削峰是水库，把流量储存起来，慢慢流，限流是闸口，拒绝超出的流量</p>\\n<h2>限流实现步骤</h2>\\n<p><img src=\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ08ad43f1cdac714893b9c8182deba861.png\\" alt=\\"限流设计.png\\"><br>\\n通过计数器、滑动窗口等方式<strong>统计请求流量（数量或速率）</strong>。单机版储存到本地。集群存储到Redis<br>\\n根据设定的限制条件，<strong>判断当前请求流量是否超过限制</strong><br>\\n如果请求流量超过限制，<strong>执行限流策略</strong>，如拒绝请求、延迟处理、返回错误信息等<br>\\n根据请求的处理结果，<strong>更新统计信息</strong>，如增加计数器的值、更新滑动窗口的数据等<br>\\n重复执行以上步骤：不断地~</p>","autoDesc":true}');export{r as comp,d as data};
