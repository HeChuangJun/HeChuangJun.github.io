import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as l,c as i,a,d as t,w as p,b as n,e}from"./app-7KT7HDzT.js";const u={},r=e('<h2 id="spring-特性-模块-设计模式" tabindex="-1"><a class="header-anchor" href="#spring-特性-模块-设计模式"><span>Spring？特性？模块？设计模式？</span></a></h2><p>一个轻量级、非入侵式的控制反转IOC和面向切面AOP的框架</p><p>IOC和DI：管理对象生命周期和依赖关系<br> AOP：实现对程序进行权限拦截、运行监控等切面功能。<br> 声明式事务：通过配置完成事务管理，不需要通过硬编码的方式<br> 快捷测试：支持Junit注解测试Spring程序<br> 快速集成各种优秀框架<br> 复杂API模板封装：对JDBC、JavaMail等提供了模板化的封装，降低应用难度</p><p>Core：提供IoC和DI<br> Context：BeanFactory功能加强的子接口<br> Web：提供Web应用开发的支持<br> DAO：JDBC抽象，简化编码<br> ORM：整合ORM框架Hibernate、iBatis<br> AOP：面向切面编程</p><p>工厂模式：通过BeanFactory、ApplicationContext创建Bean对象<br> 代理模式：用于实现AOP<br> 单例模式：Bean默认为单例模式<br> 模板方法：提高代码重用。RestTemplate、JdbcTemplate<br> 观察者模式：驱动模型<br> 适配器模式：AOP的增强或通知(Advice)、SpringMVC中适配Controller<br> 策略模式：Resource接口会根据不同的策略去访问资源<br> 前端控制器：SpringMVC的DispatcherServlet来对请求进行分发<br> 依赖注入：</p><h2 id="spring注解-required、-autowired、-qualifier作用-autowired实现原理" tabindex="-1"><a class="header-anchor" href="#spring注解-required、-autowired、-qualifier作用-autowired实现原理"><span>Spring注解？@Required、@Autowired、@Qualifier作用？@Autowired实现原理？</span></a></h2>',6),k=a("br",null,null,-1),d=a("br",null,null,-1),m=a("br",null,null,-1),v=a("br",null,null,-1),b=a("br",null,null,-1),g=a("br",null,null,-1),y=a("br",null,null,-1),B=a("br",null,null,-1),A=a("code",null,"#{}",-1),f=a("code",null,"${}",-1),h=a("br",null,null,-1),P=a("br",null,null,-1),q=e(`<p>事务：<br> @Transactional：在方法上使用声明式开启事务</p><p>@Required，用在setter方法。表示属性必须注入否则抛出BeanInitializationException异常<br> @Autowired：用在setter方法，构造函数，具有任意名称或多个参数的属性或方法上自动装配 Bean<br> @Qualifier：指定id装配Bean</p><p>在Bean的初始化阶段通过Bean后置处理器AutowiredAnnotationBeanPostProcessor<br> 创建Bean的调用doCreateBean()方法，里面调用populateBean()方法为Bean进行属性填充<br> 在populateBean()方法调用了两次后置处理器，第一次调用postProcessProperties判断是否需要属性填充，第二次调用AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues()方法进行@Autowired注解的解析，实现自动装配</p><details><summary>源码</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//属性赋值</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">populateBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">BeanName</span><span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">BeanWrapper</span> bw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasInstAwareBpps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> pvs <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

    <span class="token class-name">PropertyValues</span> pvsToUse<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> var9 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeanPostProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instantiationAware<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> var9<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pvs <span class="token operator">=</span> pvsToUse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InstantiationAwareBeanPostProcessor</span> bp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span>var9<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pvsToUse <span class="token operator">=</span> bp<span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PropertyValues</span><span class="token punctuation">)</span>pvs<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BeanName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pvsToUse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>filteredPds <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                filteredPds <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filterPropertyDescriptorsForDependencyCheck</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span>allowCaching<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//执行后处理器，填充属性，完成自动装配</span>
            <span class="token comment">//调用InstantiationAwareBeanPostProcessor的postProcessPropertyValues()方法</span>
            pvsToUse <span class="token operator">=</span> bp<span class="token punctuation">.</span><span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PropertyValues</span><span class="token punctuation">)</span>pvs<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BeanName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pvsToUse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">PropertyValues</span> <span class="token function">postProcessProperties</span><span class="token punctuation">(</span><span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">,</span> <span class="token class-name">Object</span> <span class="token class-name">Bean</span><span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token class-name">BeanName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//解析Bean的@Autowired注解、@Inject和@Value注解的属性和方法</span>
  <span class="token class-name">InjectionMetadata</span> metadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findAutowiringMetadata</span><span class="token punctuation">(</span><span class="token class-name">BeanName</span><span class="token punctuation">,</span> <span class="token class-name">Bean</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">//属性填充</span>
      metadata<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token class-name">Bean</span><span class="token punctuation">,</span> <span class="token class-name">BeanName</span><span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> pvs<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> var6<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span><span class="token class-name">BeanName</span><span class="token punctuation">,</span> <span class="token string">&quot;Injection of autowired dependencies failed&quot;</span><span class="token punctuation">,</span> var7<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="ioc-优点-实现原理-di方式√" tabindex="-1"><a class="header-anchor" href="#ioc-优点-实现原理-di方式√"><span>IOC？优点？实现原理？di方式√</span></a></h2><p>Inverse Of Control控制反转：设计模式，将对象的创建和控制权反转到容器或框架中，不由对象本身控制<br> 简化代码、松耦合、支持懒加载Bean<br> IOC实现：di、事件驱动、服务定位器</p><p>工厂模式加反射机制<br> 加载配置文件，解析成BeanDefinition放在Map里<br> BeanFactory调用getBean时，从BeanDefinition的Map取出Class对象实例化，如果有依赖关系，将递归调用getBean方法，完成依赖注入</p><p>dependency Injection依赖注入，允许将类所依赖的对象注入到类中，而不是在类内部创建依赖对象<br> 注入方式：set方法、构造方法、工厂方法注入</p><details><summary>代码</summary><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>set方法注入
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Bean</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.itcast.Bean.User<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tom<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>car<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>car<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>arr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">Bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">Bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prop<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driverClass<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>com.jdbc.mysql.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql:///crm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>car<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.itcast.Bean.Car<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>兰博基尼<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Bean</span><span class="token punctuation">&gt;</span></span>


构造函数注入
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.itcast.Bean.User<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.Integer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>999<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>car<span class="token punctuation">&quot;</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>car<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="applicationcontext-beanfactory" tabindex="-1"><a class="header-anchor" href="#applicationcontext-beanfactory"><span>ApplicationContext/BeanFactory？</span></a></h2><p>BeanFactory接口：创建并管理类的对象。获取时才创建，如XmlBeanFactory根据XML文件创建对象<br> ApplicationContext：每次容器启动时就会创建容器中配置的所有对象<br> ClassPathXmlApplicationContext/FileSystemXmlApplicationContext/XmlWebApplicationContext<br> 从ClassPath/文件系统/Web应用的XML文件中读取并生成上下文<br> Spring Boot的ConfigServletWebServerApplicationContext</p><h2 id="bean注册方式-生命周期-作用域scope类型√线程安全吗-√自动装配方式-循环依赖及解决-√为何使用三级缓存解决循环依赖而不是二级缓存-√" tabindex="-1"><a class="header-anchor" href="#bean注册方式-生命周期-作用域scope类型√线程安全吗-√自动装配方式-循环依赖及解决-√为何使用三级缓存解决循环依赖而不是二级缓存-√"><span>Bean注册方式？生命周期？作用域scope类型√线程安全吗？√自动装配方式？循环依赖及解决？√为何使用三级缓存解决循环依赖而不是二级缓存？√</span></a></h2><p>xml配置：Bean标签<br> 注解配置：@Component、@Service、@Controller、@Bean<br> java config @Configuration、@Import(xxxConfig.class)<br> BeanFactory或ApplicationContext手动注册</p><p><strong>实例化Bean对象</strong>: 根据配置中Bean Definition中实例化Bean对象<br><strong>属性赋值</strong>：<br> 调用BeanNameAware的setBeanName(String name)方法<br> 调用BeanFactoryAware的setBeanFactory(BeanFactory BeanFactory)方法<br> [调用ApplicationContextAware的setApplicationContext()方法]<br><strong>初始化</strong><br> @PostConstruct<br> 调用BeanPostProcessor的preProcessBeforeInitialization(Object Bean, String BeanName) 方法。<br> 调用InitializingBean的afterPropertiesSet()方法<br> 调用init方法（例如 <code>&lt;Bean/&gt;</code> 的 init-method 属性）<br> 调用BeanPostProcessor的postProcessAfterInitialization(Object Bean, String BeanName) 方法。<br><strong>代理生成</strong><br> 通过BeanPostProcessor（如ProxyFactory）为目标Bean创建AOP代理对象。<br><strong>销毁</strong>：<br> @PreDestroy<br> 调用DisposableBean的destroy()方法[afterPropertiesSet()方法]<br> 调用destroy方法（例如 <code>&lt;Bean /&gt;</code> 的 destroy-method 属性）</p><p>singleton(默认)：单例<br> prototype：每次获取都会创建新对象<br> request、session、Application：与request~~生命周期一致</p><p>单例Bean是无状态线程中的操作不会对Bean的成员执行查询以外的操作则线程安全<br> Bean有多种状态则线程不安全。将Bean的作用域改为&quot;prototype&quot;或者将变量放入ThreadLocal中</p><p>byName/byType/constructor/autodetect 根据名称/类型/函数入参类型自动匹配/Bean有默认构造函数用byType否则用constructor</p><p>两个或多个Bean互相依赖，导致无法正常创建和注入Bean。<br> 允许循环依赖：spring.main.allow-circular-references:true</p><p>多例Bean不支持，无限创建对象，抛出BeanCurrentlylnCreationException异常<br> AB都采用构造器，依赖注入不支持，因为此时对象必须实例化时完成依赖注入，无法延迟依赖注入<br> AB均采用setter注入，支持<br> A中注入的B为setter注入，B中注入的A为构造器注入，支持<br> B中注入的A为setter注入，A中注入的B为构造器注入，不支持<br> 第四种可以，第五种不可以是因为创建Bean时默认根据自然排序创建，A先于B创建</p><p>通过第三级缓存<br> singletonObjects 一级缓存保存实例化、属性赋值、初始化完成的Bean实例<br> earlySingletonObjects 二级缓存保存实例化完成的Bean实例<br> singletonFactories 三级缓存保存提前暴露的ObjectFactory，用于创建代理或者普通对象<br> 关键在于第三级缓存ObjectFactory提前暴露对象的早期引用，通过这个早期引用，其他对象可以注入已经实例化但没赋值初始化的对象，使得依赖注入可以进行.而不需要等待Bean完全初始化。</p><p>实例化过程<br> A实例化并把A的ObjectFactory加入第三级缓存<br> A填充属性需要注入B =&gt; B实例化并把B的ObjectFactory加入第三级缓存<br> B填充属性需要注入A =&gt; 从第三级缓存移除A的ObjectFatory，A的ObjectFactory生成代理对象A&#39;加入第二级缓存（A还是半成品）<br> B属性注入A&#39;，创建B代理对象（完成品） =&gt; 从第三级缓存移除B对象，B代理对象加入第一级缓存<br> A填充属性注入B代理对象，从第二级缓存移除A代理对象，A代理对象加入第一级缓存</p><p>为什么要三级缓存？而不是二级？<br> 在循环依赖的场景下，Bean可能需要代理对象，而不是目标对象。如果只使用二级缓存，无法动态生成这些代理对象。三级缓存通过ObjectFactory动态调用BeanPostProcessor（AbstractAutoProxyCreator的getEarlyBeanReference方法）来生成代理对象。确保依赖关系的正确性。(即循环依赖时提前AOP。原本是属性赋完值之后，再由后置处理器处理AOP)</p><h2 id="读取配置的方式-bootstrap-application-properties区别-配置文件读取顺序-√区分环境-配置文件外置" tabindex="-1"><a class="header-anchor" href="#读取配置的方式-bootstrap-application-properties区别-配置文件读取顺序-√区分环境-配置文件外置"><span>读取配置的方式？bootstrap\\application.properties区别？配置文件读取顺序？√区分环境？配置文件外置</span></a></h2><p>@PropertySource(value=&quot;x&quot;)指定配置文件<br> @Value读取配置到属性。<br> @ConfigurationProperties(prefix=&quot;x&quot;)读取配置到类</p><p>bootstrap.yml/properties：由父ApplicationContext加载，属性不能被覆盖，用于SpringCloud Config、Nacos<br> application.yml/properties：由ApplicatonContext加载</p><p>同目录先读取properties后yml<br> 同属性默认使用第1个读取的</p><p>config/application.properties|yml（项目根目录中config目录下）<br> application.properties|yml<br> resources/config/application.properties|yml（项目resources目录中config目录下）<br> resources/application.properties|yml</p><p>Spring.profiles.active=dev =&gt; application-dev.properties</p><p>java -Dfile.encoding=utf-8 -Xbootclasspath/a:/config/ -jar a.jar外置配置文件优先<br> /config/根目录，config/相对当前目录<br> 指定编码</p><h2 id="spring-aop-原理-场景-通知类型" tabindex="-1"><a class="header-anchor" href="#spring-aop-原理-场景-通知类型"><span>Spring AOP？原理？场景？通知类型？</span></a></h2><p>Aspect-Oriented Programming面向切面编程：通过动态代理将通知织入目标对象，把相同业务逻辑中抽取到一个模块中，提高代码的重用性</p><p>动态代理：基于接口，目标对象必须实现接口<br> cglib代理：基于继承。目标对象不被final修饰。通过ASM读取目标类的字节码并修改生成</p><p>增强方法，权限认证、日志、事务、参数校验</p><p>Joinpoint连接点：目标对象中被拦截的方法<br> Poincut切入点：目标对象中已经增强的方法。给满足规则(使用 AspectJ pointcut expression language)的匹配joinpoint添加Advice@PointCut：在配置类上用@EnableAspectJAutoProxy注解开启AspectJ代理<br> Advice通知/增强：连接点要执行的增强代码<br> aspect切面：切入点+通知 使用@Aspect的类<br> 前置通知Before advice：在JoinPoint之前执行的通知，但不能阻止连接点前的执行。ApplicationContext中在<code>&lt; aop:aspect &gt;</code>嵌套<code>&lt; aop:before &gt;</code>标签声明@Before<br> 后置通知After advice：~之后（不论是正常返回还是异常退出）。 ~<code>&lt; aop:after &gt;</code> @After<br> 返回后通知After return advice：~正常完成后，不包括抛出异常的情况。~<code>&lt; after-returning &gt;</code><br> 抛出异常后通知After throwing advice：~抛出异常退出时执行的通知。~<code>&lt; aop:after-throwing &gt;</code><br> 环绕通知Around advice：之前与之后都执行的 advice。~<code>&lt; aop:around &gt;</code> @Around<br> Target目标对象：被代理的对象<br> Weaving织入：将aspect和其他对象连接起来创建adviced object的过程<br> Proxy代理：将通知织入到目标对象之后，形成代理对象</p><h2 id="spring事务配置方式-隔离级别-传播行为作用和实现-原理-失效情况-√集成数据持久层框架mybatis原理-为什么spring事务不能切换数据源" tabindex="-1"><a class="header-anchor" href="#spring事务配置方式-隔离级别-传播行为作用和实现-原理-失效情况-√集成数据持久层框架mybatis原理-为什么spring事务不能切换数据源"><span>Spring事务配置方式？隔离级别？传播行为作用和实现？原理？失效情况？√集成数据持久层框架MyBatis原理？为什么Spring事务不能切换数据源？</span></a></h2><p><strong>声明式事务</strong>：使用@Transactional或XML。@Transactional可用在接口、接口方法、类、类方法上。方法级别注解覆盖类级别的注解。但无法用到代码块级别<br> 属性：propagation事务传播行为，isolation事务隔离级别、rollbackFor事务回滚的异常类数组、timeout事务超时回滚、readonly读写或只读事务</p><p><strong>编程式事务</strong>：通过TransactionTemplate和PlatformTransactionManager。灵活性高，维护困难</p><details><summary>demo</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTransactionTemplate</span><span class="token punctuation">(</span><span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>transactionTemplate <span class="token operator">=</span> transactionTemplate<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> out<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> in<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallbackWithoutResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doInTransactionWithoutResult</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 转出</span>
            accountDao<span class="token punctuation">.</span><span class="token function">outMoney</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 转入</span>
            accountDao<span class="token punctuation">.</span><span class="token function">inMoney</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>TransactionDefinition接口定义隔离级别的常量<br> ISOLATION_DEFAULT/READ_UNCOMMITTED/READ_COMMITTED/REPEATABLE_READ/SERIALIZABLE：数据库默认的隔离级别/读未提交/读已提交/可重复读/串行化</p><p>传播行为propagation：一个事务方法中调用<strong>其他类</strong>事务方法时，事务的范围和属性等。<br> 支持当前事务<br> PROPAGATION_REQUIRED/SUPPORTS/MANDATORY如果当前存在事务则使用。没有则新建(默认)/不使用事务/抛出异常<br> 不支持当前事务的情况<br> PROPAGATION_REQUIRES_NEW创建新事务，如果有事务存在，挂起当前事务，<br> PROPAGATION_NOT_SUPPORTED以非事务方式运行，如果有事务存在，挂起当前事务<br> PROPAGATION_NEVER以非事务方式运行，如果有事务存在，抛出异常<br> PROPAGATION_NESTED如果当前事务存在则新建事务做内嵌事务，没有则等价PROPAGATION_REQUIRED，外部的事务提交和回滚会使内部事务的提交和回滚</p><p>用ThreadLocal实现，调用其他线程的事务方法时事务传播会失效</p><p>通过AOP和动态代理实现<br> Bean初始化时会遍历所有的BeanPostProcessor实现类并执行postProcessAfterInitialization方法。遍历容器中所有的切面，查找与当前Bean匹配的切面并获取@Transactional注解及其属性值。<br> 然后创建代理对象，如果目标类是接口，则使用JDK动态代理，否则使用Cglib。<br> 当通过代理对象调用Bean方法时触发AOP增强拦截器接口MethodInterceptor的实现类TransactionInterceptor。调用DynamicAdvisedInterceptor（CglibAopProxy的内部类）的intercept方法或JdkDynamicAopProxy的invoke方法，调用AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法，获取Transactional注解的事务配置信息。再通过调用父类TransactionAspectSupport的invokeWithinTransaction方法处理事务</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">protectedTransactionAttributecomputeTransactionAttribute</span><span class="token punctuation">(</span><span class="token class-name">Methodmethod</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>targetClass<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">allowPublicMethodsOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Transactional<br> public方法<br> propagation要用支持事务NOT_SUPPORTED、SUPPORTS、NEVER<br> rollbackFor默认抛出未检查unchecked异常（继承自RuntimeException的异常）或者Error才回滚事务，其他异常不会触发回滚事务<br> 调用其他方法时必须是不同类，AOP才生成代理对象管理事务</p><p>实现org.Springframework.transaction.PlatformTransactionManager接口<br> HibernateTransactionManager集成Hibernate5<br> DataSourceTransactionManager集成JDBC、MyBatis</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token punctuation">{</span>
  <span class="token comment">//根据事务定义TransactionDefinition获得TransactionStatus。 </span>
  <span class="token comment">//为什么不创建事务呢？因为如果已经有事务则不会再创建，跟当前线程进行绑定。</span>
  <span class="token comment">//为什么返回TransactionStatus对象？因为TransactionStatus中包含事务属性等信息，例如是否只读、是否为新创建的事务等</span>
  <span class="token class-name">TransactionStatus</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
  <span class="token comment">//为什么根据TransactionStatus情况进行提交？例如A方法调用B方法，在B方法结束后执行commit方法时不能提交事务，而是A方法结束后执行commit方法才提交事务</span>
  <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
  <span class="token comment">// 为什么根据 TransactionStatus 情况，进行回滚？原因同上</span>
  <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库连接和当前线程绑定<br> 多个数据源会带来多事务一致性的问题</p><h2 id="延迟加载-热部署-容器创建过程-spring启动过程" tabindex="-1"><a class="header-anchor" href="#延迟加载-热部署-容器创建过程-spring启动过程"><span>延迟加载？热部署？容器创建过程？Spring启动过程？</span></a></h2><p>容器启动后不需要默认创建作用域为单例的Bean而是在获得该Bean时才创建。设置lazy-init=&quot;true&quot;即可</p><p>Spring-boot-devtools、Spring Loaded实现原理，nio的WatchService监听文件夹变化，同时实现classLoader的findclass方法重新将class加载进内存</p><p>AbstractApplicationContext调用refresh()方法通过调用obtainFreshBeanFactory()方法创建Bean工厂AnnotatedBeanDefinitionReader扫描注解doScan方法和XmlBeanDefinitionReader的doLoadBeanDefinitions方法sax方式解析xml将其封装成document对象，使用BeanDefinitionReaderUtils.registerBeanDefinition并注册到BeanDefinitionRegistry缓存中<br> 然后调用postProcessBeanFactory调用子类的BeanFactory的后置处理器，然后调用invokeBeanFactoryPostProcessors()执行后置处理器<br> 第三注册BeanPostProcessors()到BeanFactory中<br> 第四注册监听器<br> 第五实例化所有的Bean放到singletonObjects单例池里面</p><p>容器启动阶段：加载并分析配置文件，装配到BeanDefinition，其他后处理<br> Bean实例化阶段：实例化对象，装配依赖， 生命周期回调，对象其他处理， 注册回调接口</p>`,52);function w(T,C){const s=c("RouteLink");return l(),i("div",null,[r,a("p",null,[t(s,{to:"/interview/framework/Springmvc.html#Springmvc%E6%B3%A8%E8%A7%A3requestmapping%E5%92%8Cgetmapping%E5%8C%BA%E5%88%AB"},{default:p(()=>[n("Spring MVC注解")]),_:1}),k,t(s,{to:"/interview/framework/spring.html#spring-aop%E5%8E%9F%E7%90%86%E5%9C%BA%E6%99%AF%E9%80%9A%E7%9F%A5%E7%B1%BB%E5%9E%8B"},{default:p(()=>[n("Spring AOP注解")]),_:1}),d,n(" 容器:"),m,n(" @Component：将类变为Spring管理的Bean"),v,n(" @Service：@Component注解，service层（业务逻辑层）"),b,n(" @Repository：~，dao层（数据访问层）"),g,n(" @Autowired：依赖注入工具（BeanPostProcessor、BeanFactoryPostProcessor）自动注入"),y,n(" @Configuration：声明配置类"),B,n(" @Value：在字段，构造器参数跟方法参数指定默认值，支持"),A,n("、"),f,n("方式。将配置文件值赋值给变量"),h,n(' @Bean：声明方法的返回值为Bean。@Bean(initMethod="init",destroyMethod="destroy")'),P,n(" @Scope：定义创建Bean的模式")]),q])}const x=o(u,[["render",w],["__file","spring.html.vue"]]),I=JSON.parse('{"path":"/interview/framework/spring.html","title":"Spring","lang":"zh-CN","frontmatter":{"title":"Spring","date":"2023-01-01T00:00:00.000Z","tags":"java","categories":"面试","description":"Spring？特性？模块？设计模式？ 一个轻量级、非入侵式的控制反转IOC和面向切面AOP的框架 IOC和DI：管理对象生命周期和依赖关系 AOP：实现对程序进行权限拦截、运行监控等切面功能。 声明式事务：通过配置完成事务管理，不需要通过硬编码的方式 快捷测试：支持Junit注解测试Spring程序 快速集成各种优秀框架 复杂API模板封装：对JDBC...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/framework/spring.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"Spring"}],["meta",{"property":"og:description","content":"Spring？特性？模块？设计模式？ 一个轻量级、非入侵式的控制反转IOC和面向切面AOP的框架 IOC和DI：管理对象生命周期和依赖关系 AOP：实现对程序进行权限拦截、运行监控等切面功能。 声明式事务：通过配置完成事务管理，不需要通过硬编码的方式 快捷测试：支持Junit注解测试Spring程序 快速集成各种优秀框架 复杂API模板封装：对JDBC..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"Spring？特性？模块？设计模式？","slug":"spring-特性-模块-设计模式","link":"#spring-特性-模块-设计模式","children":[]},{"level":2,"title":"Spring注解？@Required、@Autowired、@Qualifier作用？@Autowired实现原理？","slug":"spring注解-required、-autowired、-qualifier作用-autowired实现原理","link":"#spring注解-required、-autowired、-qualifier作用-autowired实现原理","children":[]},{"level":2,"title":"IOC？优点？实现原理？di方式√","slug":"ioc-优点-实现原理-di方式√","link":"#ioc-优点-实现原理-di方式√","children":[]},{"level":2,"title":"ApplicationContext/BeanFactory？","slug":"applicationcontext-beanfactory","link":"#applicationcontext-beanfactory","children":[]},{"level":2,"title":"Bean注册方式？生命周期？作用域scope类型√线程安全吗？√自动装配方式？循环依赖及解决？√为何使用三级缓存解决循环依赖而不是二级缓存？√","slug":"bean注册方式-生命周期-作用域scope类型√线程安全吗-√自动装配方式-循环依赖及解决-√为何使用三级缓存解决循环依赖而不是二级缓存-√","link":"#bean注册方式-生命周期-作用域scope类型√线程安全吗-√自动装配方式-循环依赖及解决-√为何使用三级缓存解决循环依赖而不是二级缓存-√","children":[]},{"level":2,"title":"读取配置的方式？bootstrap\\\\application.properties区别？配置文件读取顺序？√区分环境？配置文件外置","slug":"读取配置的方式-bootstrap-application-properties区别-配置文件读取顺序-√区分环境-配置文件外置","link":"#读取配置的方式-bootstrap-application-properties区别-配置文件读取顺序-√区分环境-配置文件外置","children":[]},{"level":2,"title":"Spring AOP？原理？场景？通知类型？","slug":"spring-aop-原理-场景-通知类型","link":"#spring-aop-原理-场景-通知类型","children":[]},{"level":2,"title":"Spring事务配置方式？隔离级别？传播行为作用和实现？原理？失效情况？√集成数据持久层框架MyBatis原理？为什么Spring事务不能切换数据源？","slug":"spring事务配置方式-隔离级别-传播行为作用和实现-原理-失效情况-√集成数据持久层框架mybatis原理-为什么spring事务不能切换数据源","link":"#spring事务配置方式-隔离级别-传播行为作用和实现-原理-失效情况-√集成数据持久层框架mybatis原理-为什么spring事务不能切换数据源","children":[]},{"level":2,"title":"延迟加载？热部署？容器创建过程？Spring启动过程？","slug":"延迟加载-热部署-容器创建过程-spring启动过程","link":"#延迟加载-热部署-容器创建过程-spring启动过程","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":13.16,"words":3948},"filePathRelative":"interview/framework/spring.md","localizedDate":"2023年1月1日","excerpt":"<h2>Spring？特性？模块？设计模式？</h2>\\n<p>一个轻量级、非入侵式的控制反转IOC和面向切面AOP的框架</p>\\n<p>IOC和DI：管理对象生命周期和依赖关系<br>\\nAOP：实现对程序进行权限拦截、运行监控等切面功能。<br>\\n声明式事务：通过配置完成事务管理，不需要通过硬编码的方式<br>\\n快捷测试：支持Junit注解测试Spring程序<br>\\n快速集成各种优秀框架<br>\\n复杂API模板封装：对JDBC、JavaMail等提供了模板化的封装，降低应用难度</p>\\n<p>Core：提供IoC和DI<br>\\nContext：BeanFactory功能加强的子接口<br>\\nWeb：提供Web应用开发的支持<br>\\nDAO：JDBC抽象，简化编码<br>\\nORM：整合ORM框架Hibernate、iBatis<br>\\nAOP：面向切面编程</p>","autoDesc":true}');export{x as comp,I as data};
