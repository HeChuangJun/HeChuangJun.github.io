import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as s,b as n,d as t,e as p}from"./app-7KT7HDzT.js";const i={},u=p(`<h1 id="c语言" tabindex="-1"><a class="header-anchor" href="#c语言"><span>C语言</span></a></h1><h2 id="计算机系统组成" tabindex="-1"><a class="header-anchor" href="#计算机系统组成"><span>计算机系统组成</span></a></h2><figure><img src="https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vuyhbjtwj30o70ggtas.jpg" alt="1.png" tabindex="0"><figcaption>1.png</figcaption></figure><ul><li>输⼊设备： <ul><li>⿏标、键盘、⻨克⻛、扫描仪</li></ul></li><li>输出设备： <ul><li>显示屏、扬声器、打印机。</li></ul></li><li>中央处理器（cpu）： 运算速度⾮常快。ns 级别。 <ul><li>运算器（算逻单元）：负责数据运算</li><li>控制器：帮助cpu获取指令交给运算器</li><li>寄存器：存储cpu⽤来运算的数据</li><li>预取器：从内存中获取程序中的指令。</li><li>MMU：虚拟内存映射。</li></ul></li><li>内存储器（内存）： <ul><li>ROM：（read only memory）</li><li>RAM：（随机：random access memory）</li><li>内存靠 “电信号” 来存储数据。 断电没！数据存储不能持久化。 优点：数据读写速度快。</li></ul></li><li>外存储器（硬盘）： <ul><li>硬盘采⽤ “磁信号” 来存储数据。断电依然在。数据能持久化存储。 缺点：数据读写速度慢。</li></ul></li></ul><h2 id="硬件系统" tabindex="-1"><a class="header-anchor" href="#硬件系统"><span>硬件系统</span></a></h2><figure><img src="https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vvbwijq4j30nb0j3tb3.jpg" alt="2.png" tabindex="0"><figcaption>2.png</figcaption></figure><h3 id="主机部分" tabindex="-1"><a class="header-anchor" href="#主机部分"><span>主机部分</span></a></h3><ul><li>cpu</li><li>内存储器</li></ul><h3 id="外设部分" tabindex="-1"><a class="header-anchor" href="#外设部分"><span>外设部分</span></a></h3><ul><li>输⼊设备：读⼊。</li><li>输出设备：写出。</li><li>外存储器：持久化存储。</li></ul><figure><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vvczzcuzj30oh0ehwfk.jpg" alt="3.png" tabindex="0"><figcaption>3.png</figcaption></figure><h2 id="软件系统" tabindex="-1"><a class="header-anchor" href="#软件系统"><span>软件系统</span></a></h2><h3 id="系统软件" tabindex="-1"><a class="header-anchor" href="#系统软件"><span>系统软件</span></a></h3><ul><li>操作系统： <ul><li>优秀的商业公司、开源组织，站出来，编写⼀套针对硬件的底层程序。 管理声卡、显卡、⽹卡、磁盘等等这些硬件。</li><li>概念：操作系统 就是管理计算机硬件与软件资源的 ⼀个计算机程序。 本质：程序！！</li></ul></li><li>向下： <ul><li>提供驱动程序，管理硬件。</li></ul></li><li>向上： <ul><li>图形界⾯：普通⽤户，⿏标点点点。</li><li>终端界⾯：普通⽤户、开发⼈员都可以使⽤。</li><li>系统调⽤：操作系统 提供给开发⼈员使⽤的函数。</li></ul></li></ul><figure><img src="https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x9xhpcicj30p70en0ut.jpg" alt="29.png" tabindex="0"><figcaption>29.png</figcaption></figure><ul><li>常⽤操作系统：windows：微软、macOS：苹果、Linux、Unix</li><li>语⾔系统 <ul><li>计算机语⾔： C、C++、java、Python、php ....</li><li>机器语⾔：⼆进制(10101001)</li></ul></li></ul><h3 id="应用软件" tabindex="-1"><a class="header-anchor" href="#应用软件"><span>应⽤软件</span></a></h3><p>根据实际需求，来制定功能。</p><ul><li>⽂件处理</li><li>图形处理</li><li>表格处理</li><li>实时控制</li></ul><h2 id="编译器和语言" tabindex="-1"><a class="header-anchor" href="#编译器和语言"><span>编译器和语⾔</span></a></h2><ul><li>编程语⾔： <ul><li>作⽤：控制计算机硬件⼯作。</li><li>组成：字⺟、特殊字符。</li><li>每个编程语⾔有⾃⼰⼀套规则、语法。——学习⽬标！</li></ul></li><li>编译器： <ul><li>原因：CPU，只认识 1010010 ⼆进制码。 abc、汉字 看不懂。</li><li>作⽤：将⼈类易读易懂的语⾔转换成 cpu 能读懂的语⾔。 —— 编译！</li><li>语⾔不同，语法不同，因此使⽤的编译器不同。 <ul><li>java 使⽤ javac 编译器。 不能拿来编译C语⾔。</li><li>C语⾔ 使⽤ gcc 编译器。 不能拿来编译java语⾔。</li></ul></li></ul></li></ul><h2 id="c语言简述" tabindex="-1"><a class="header-anchor" href="#c语言简述"><span>C语⾔简述</span></a></h2><h3 id="计算机语言发展史" tabindex="-1"><a class="header-anchor" href="#计算机语言发展史"><span>计算机语⾔发展史</span></a></h3><ol><li>机器语⾔：101100110</li><li>汇编语⾔：助记符：abc --- 10100101。问题：硬件不同，指令不同。不同架构(cpu) 指令集不同。 <ul><li>只能⽀持某⼀种特定的硬件。—— 跨平台性差。</li><li>衍⽣出 B 语⾔。</li></ul></li><li>C语⾔：借助编译器将C代码，转换成各种平台使⽤的 指令。—— 跨平台。</li><li>C++、java、Oc、Python：⾯向对象编程。程序扩展性好！</li><li>SQL语句：⼈类更易理解。</li></ol><p>机器⽣汇编，汇编⽣B，B⽣C，C⽣万物！！</p><h3 id="c语言标准" tabindex="-1"><a class="header-anchor" href="#c语言标准"><span>C语⾔标准</span></a></h3><h4 id="标准简史" tabindex="-1"><a class="header-anchor" href="#标准简史"><span>标准简史</span></a></h4><ol><li>1972年C语⾔在⻉尔实验室诞⽣. 丹尼斯·⾥奇 参考B语⾔开发.</li><li>1970-80年代，C语⾔被⼴泛应⽤，产⽣很多不同的C语⾔版本. 程序可移植性⽐较差.</li><li>1983年，美国国家标准委员会(ANSI) 成⽴⼀个⼩组来制定C语⾔的标准. C语⾔⽀持哪些语法、⽀持哪些功能等等.</li><li>1989年，通过了C语⾔的第⼀个标准. C89标准.</li><li>1990年，国际标准化组织(ISO) 和 国际电⼯委员会(IEC) 将 C89标准当做国际的C语⾔标准. C90标准. C89和C90指的是同⼀个标准</li><li>1994年 ISO和 IEC 对 C89标准进⾏修订. C94标准. 由于并没有增加新的语法特性，还是叫做 C89或者C90.</li><li>1995年 ISO和IEC再次做了修正，C95 标准.</li><li>1999年 ISO 和 IEC 发布了C语⾔新标准. C语⾔第⼆个标准. 在该标准中，新增许多实⽤的C语⾔语法特性. 增加新的关键字、可变⻓数组等等. C99标准</li><li>2007年，重新修订了C语⾔.</li><li>2011年， 发布新的版本。新增了⼀些语法，泛型、国际化⽀持. ⽬前为⽌最新版本是 C11.</li></ol><h4 id="标准的影响" tabindex="-1"><a class="header-anchor" href="#标准的影响"><span>标准的影响</span></a></h4><ol><li>可将C语⾔的标准理解为C语⾔说明书。但，其并没有强制性约束⼒。</li></ol><blockquote><p>如：微软拿到标准，认为有些标准不合理，不⽀持。 微软认为某些特性⾮常好，但标准中没有，微软可以修改标准，新增语法.</p></blockquote><ol start="2"><li>如果编译器不⽀持标准，我们即使使⽤标准中的语法仍然会报错。</li><li>编译器版本也会影响程序。因此，编写程序之前要确定编译器版本。</li><li>常⻅的C/C++编译器: <ol><li>Borland C++ 宝蓝公司</li><li>Intel C++ 英特尔编译器</li><li>VC++ 微软公司</li><li>g++编译器（gcc是编译套件）, Linux 默认使⽤的编译器. 对标准⽀持最好.</li></ol></li></ol><h3 id="c语言的优缺点" tabindex="-1"><a class="header-anchor" href="#c语言的优缺点"><span>C语⾔的优缺点</span></a></h3><ul><li>优点：学习成本低、运⾏速度快、功能强⼤。</li><li>缺点：代码实现周期⻓、可移植性差、对经验要求⾼、对平台库依赖多</li></ul><h3 id="c语言的应用领域" tabindex="-1"><a class="header-anchor" href="#c语言的应用领域"><span>C语⾔的应⽤领域</span></a></h3><ol><li>服务器。</li><li>操作系统。</li><li>上层应⽤。 MFC、QT</li><li>嵌⼊式。</li><li>⼈⼯智能、硬件驱动。</li><li>中间件。</li><li>⽹络攻防、数据安全。</li><li>⼤学必修课。</li><li>名企、外企。</li></ol><h3 id="c语言32个关键字" tabindex="-1"><a class="header-anchor" href="#c语言32个关键字"><span>C语⾔32个关键字</span></a></h3><p>关键字：在C语言中被赋予了特定含义的英文单词，一共有32个关键字。但是不需要背，后面会挨个讲解，现在只要只有关键字的两个特点即可：</p><ul><li><p>关键字全部小写</p></li><li><p>在特定的编译器中，关键字是高亮显示的<br> vs：蓝色或者紫色</p></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">auto</span>  <span class="token keyword">break</span>  <span class="token keyword">case</span>  <span class="token keyword">char</span>  <span class="token keyword">const</span>  <span class="token keyword">continue</span>  <span class="token keyword">default</span>  <span class="token keyword">do</span>  <span class="token keyword">double</span> <span class="token keyword">else</span>  <span class="token keyword">enum</span> 
<span class="token class-name">extern</span> <span class="token keyword">float</span>  <span class="token keyword">for</span>  <span class="token keyword">goto</span>  <span class="token keyword">if</span>  <span class="token keyword">int</span>  <span class="token keyword">long</span>  <span class="token keyword">register</span>   <span class="token keyword">return</span>  <span class="token keyword">short</span>  <span class="token keyword">signed</span>
<span class="token keyword">sizeof</span>  <span class="token keyword">static</span> <span class="token keyword">struct</span>  <span class="token class-name">switch</span>  <span class="token keyword">typedef</span> <span class="token keyword">union</span>  <span class="token keyword">unsigned</span>  <span class="token keyword">void</span>  <span class="token keyword">volatile</span>  <span class="token keyword">while</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vvou58s8j30aw091aab.jpg" alt="5.png"><br><img src="https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vvou5emej30fq0efabm.jpg" alt="6.png"></p><h2 id="第一个程序helloworld" tabindex="-1"><a class="header-anchor" href="#第一个程序helloworld"><span>第一个程序HelloWorld</span></a></h2><figure><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vvtz41tyj30os07kq41.jpg" alt="7.png" tabindex="0"><figcaption>7.png</figcaption></figure><ul><li>⽂本编辑HelloWorld：打开任意⼀个⽬录。编写hello world 程序</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>编译 hello world 程序 ——&gt; 得到 机器能识别的 ⼆进制码。<br> cd ⽬录 —— 含义：进⼊这个⽬录。</li></ul><figure><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vx36qzvuj30lq0ig77e.jpg" alt="8.png" tabindex="0"><figcaption>8.png</figcaption></figure><p>提示：快捷打开 HelloWorld.c ⽂件所在⽬录。进⼊到 HelloWorld.c ⽂件所在⽬录. 直接在 “地址栏” 中键⼊ cmd ，不需要 cd ⽬录。切换。<br><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3xa9hxqxpj30kc0ctt9l.jpg" alt="30.png"></p><h2 id="常⻅ide" tabindex="-1"><a class="header-anchor" href="#常⻅ide"><span>常⻅IDE</span></a></h2><p>IDE：集 编辑器、编译器、调试器与⼀身的集合⼯具。</p><ul><li>Windows： <ul><li>vs（visual studio）2013、2015、2017、2019、2022</li><li>Clion：跨平台IDE。、跟Java的IDEA、python的pycharm是同一家公司的</li><li>Qt Creator 跨平台IDE。</li><li>Eclipse。</li></ul></li><li>MacOS：（苹果电脑的操作系统） <ul><li>Xcode</li><li>Clion：跨平台IDE。</li><li>Qt Creator 跨平台IDE。</li><li>Eclipse。</li></ul></li><li>Linux： <ul><li>vi/vim —— ⽂本编辑器。</li><li>Clion：跨平台IDE。</li><li>Qt Creator 跨平台IDE。</li><li>Eclipse。</li></ul></li></ul><blockquote><p>备注：大多企业开发用vs会更多一些</p></blockquote><h3 id="vs安装" tabindex="-1"><a class="header-anchor" href="#vs安装"><span>VS安装</span></a></h3>`,53),r={href:"https://visualstudio.microsoft.com/%EF%BC%8C%E4%B8%8B%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"},k=p(`<figure><img src="https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyczxss2j32k81c87tr.jpg" alt="环境搭建1.png" tabindex="0"><figcaption>环境搭建1.png</figcaption></figure><ul><li>双击安装包进行安装。在 “工作负荷” 标签页中，选择 “使用 C++的桌面开发” 选项即可。</li></ul><figure><img src="https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vy88hk4aj31wp0ypdy0.jpg" alt="安装1.png" tabindex="0"><figcaption>安装1.png</figcaption></figure><p>“安装位置” 中修改安装路径。路径要求：<br> ​ 1，不要有中文，不要有空格，不要有一些特殊符号<br> ​ 2，选择一个统一的文件夹进行管理</p><figure><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vy88hggmj31z013ydqv.jpg" alt="安装2.png" tabindex="0"><figcaption>安装2.png</figcaption></figure><ul><li>自动下载并安装，过程略微漫长，耐心等待。</li></ul><figure><img src="https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vy88herfj31z214247c.jpg" alt="安装3.png" tabindex="0"><figcaption>安装3.png</figcaption></figure><ul><li>安装完成，弹出 “安装完毕” 对话框。 点击确定。</li></ul><figure><img src="https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vycetg4uj31z0140qdd.jpg" alt="安装4.png" tabindex="0"><figcaption>安装4.png</figcaption></figure><ul><li>可用微软的账号登录，没有可以注册一个。也可以点击“暂时跳过此项”。</li></ul><figure><img src="https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vy88gytkj31hs0raqbg.jpg" alt="安装5.png" tabindex="0"><figcaption>安装5.png</figcaption></figure><ul><li>根据提示选择主题</li></ul><figure><img src="https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vy88gpgbj31hq0rgna8.jpg" alt="安装6.png" tabindex="0"><figcaption>安装6.png</figcaption></figure><ul><li>点击启动，环境搭建完毕</li></ul><h3 id="vs2022基本使用" tabindex="-1"><a class="header-anchor" href="#vs2022基本使用"><span>VS2022基本使⽤</span></a></h3><ul><li>创建项目：点击 “创建新项目”</li></ul><figure><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vygg53pbj31k811itkq.jpg" alt="安装7.png" tabindex="0"><figcaption>安装7.png</figcaption></figure><ul><li>选择创建 “控制台应用”，点击下一步。</li></ul><figure><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyi23s7lj30s60ir0wq.jpg" alt="9.png" tabindex="0"><figcaption>9.png</figcaption></figure><ul><li>指定项目名称。确保位置下的项目存储目录存在。 勾选 “将解决方案和项目.....” ，点击 “创建”。</li></ul><figure><img src="https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyj7ecurj30sg0jqq6j.jpg" alt="10.png" tabindex="0"><figcaption>10.png</figcaption></figure><ul><li><p>右侧的解决方案管理器可以放在左侧或者右侧<br><img src="https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vynf59zqj309p0iitad.jpg" alt="112.png"></p></li><li><p>创建 helloworld.c ⽂件：右键选择原文件，选择添加，选择新建项<br><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vylbpqnxj30j407r77a.jpg" alt="111.png"></p></li><li><p>在弹出的编辑框中，选中 “C++文件(.cpp)”，将 下方 “源.cpp” 手动改为要新创建的文件名，</p><p>如：helloWorld.c 。注意，默认 cpp 后缀名，要手动改为 .c 后缀名，然后点击 “添加”。</p></li></ul><figure><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyj7dsgfj30q50i542k.jpg" alt="12.png" tabindex="0"><figcaption>12.png</figcaption></figure><ul><li>编写 helloworld.c程序</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>点击上方绿色空心三角运行</li></ul><figure><img src="https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyopnyvkj30hy06ktai.jpg" alt="117.png" tabindex="0"><figcaption>117.png</figcaption></figure><ul><li>解决窗⼝⼀闪⽽过问题，解决方法</li></ul><ol><li><p>使⽤ 函数：在 return 0； 代码前添加system(&quot;pause&quot;);</p><p>2.修改 VS2019 ⼯具配置属性：项⽬名上，右键 —— 属性 —— 配置属性 ——连接器 —— 系统 —— ⼦系统 —— 下拉框中选择 “控制台(/SUBSYSTEM:CONSOLE)” —— 点击 “应⽤” —— 点击确定</p></li></ol><ul><li>修改字体： ⼯具 —— 选项 —— 环境 —— 字体和颜⾊ 。 选择字体。 Ctrl + ⿏标滚轮 放⼤、缩⼩字号</li></ul><h2 id="helloworld释义" tabindex="-1"><a class="header-anchor" href="#helloworld释义"><span>HelloWorld释义</span></a></h2><ol><li><code>#</code> ： 代表引⼊头⽂件专⽤特殊字符。</li><li>include ： 引⼊头⽂件专⽤关键字。</li><li>&lt;&gt; : ⽤来包裹 库 头⽂件名</li><li>stdio.h : 使⽤的 头⽂件。因为程序中使⽤了 printf() 函数。就必须使⽤该头⽂件。</li></ol><ul><li>std：标准：standard</li><li>i： input 输⼊。</li><li>o： output 输出。</li></ul><ol start="5"><li>int ：main 函数返回值为 整型。 int</li><li>main： 整个程序的⼊⼝函数。 任何.c 程序，有且只有⼀个 main 函数。</li><li>(void) : 当前main函数没有参数。</li><li>{} ： 内部放函数体。</li><li>printf(“helloworld\\n”) : <ol><li>printf(); C语⾔向屏幕输出字符使⽤的函数。</li><li>helloworld： 待写出的字符串内容。</li><li>\\n: 回⻋换⾏。</li></ol></li><li>return 0；</li></ol><ul><li>return 返回。 C程序要求，main 函数要有返回值。借助 return 实现返回。</li><li>0：成功！因为 int ，返回整数。</li></ul><ol start="11"><li>注意事项 <ol><li>程序中使⽤的所有的字符，全部是 “英⽂半⻆” 字符。</li><li>程序中，严格区分⼤⼩写。</li><li>“;” 代表⼀⾏结束。不能使⽤ 中⽂ “；”，必须是英⽂。</li></ol></li></ol><ul><li>换行符：<code>\\r</code>回到行首<code>\\n</code>:到下一行</li></ul><table><thead><tr><th>操作系统</th><th>换行符</th></tr></thead><tbody><tr><td>windows</td><td>\\r\\n</td></tr><tr><td>mac</td><td>\\r</td></tr><tr><td>Linux</td><td>\\n</td></tr></tbody></table><p>平时写代码的时候，想要换行直接写<code>\\n</code>即可，C语言会根据不同的操作系统解析成对应的换行符</p><h3 id="代码运行-4-种模式" tabindex="-1"><a class="header-anchor" href="#代码运行-4-种模式"><span>代码运⾏ 4 种模式</span></a></h3><ol><li>Debug x86：以调试模式，运⾏32位程序。</li><li>Debug x64：以调试模式，运⾏64位程序。</li><li>Release x86：以发布模式，运⾏32位程序。</li><li>Release x64：以发布模式，运⾏64位程序。</li></ol><p>Debug： 调试模式。⽣成的 .exe ⽂件 ⽐ Release 模式⽣成⽂件⼤。 带有调试信息。学习用<br> Release：发布模式。⽣成的.exe ⽂件没有调试信息。⽂件较⼩。<br> 热键：运⾏编写好的程序。Ctrl - F5</p><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><ul><li>单⾏注释。 // 待注释的内容</li><li>多⾏注释。 /* 待注释的内容 */ <ul><li>多⾏注释可以嵌套单⾏注释。 多⾏注释间不能嵌套</li></ul></li></ul><ul><li>注释的快捷键：Ctrl + K，Ctrl + C/U</li><li>注释擦除：注释的内容，不参与运行</li></ul><h2 id="system函数" tabindex="-1"><a class="header-anchor" href="#system函数"><span>System函数</span></a></h2><ul><li>作⽤：执⾏ windows 系统中的指定的命令。</li><li>命令： <ul><li>pause：暂停。</li><li>cmd：启动新的终端</li><li>calc：唤起windows下的计算器。</li><li>notepad： 唤起 windows下的记事本。</li><li>mspaint： 唤起 windows下的画图⼯具。</li><li>cls：清空 当前windows下 终端中的内容。</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> <span class="token comment">// 引⼊头⽂件 stdio.h , 因为下⾯使⽤了printf() 必须添加此头⽂件。</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h&gt;</span> <span class="token comment">// 引⼊头⽂件 Windows.h, 因为下⾯使⽤ Sleep() 函数。</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">// main 是程序的⼊⼝函数。 void表示没有参数。int表示返回整数。</span>
<span class="token punctuation">{</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world1!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 helloworld 字符串，到屏幕。 \\n 换⾏之意。</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world7!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
 <span class="token comment">//Sleep() 函数，指定程序睡眠。 默认单位：毫秒。 需要使⽤头⽂件。 #include &lt;Windows.h&gt;</span>
 <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使当前程序，打印完 helloworld 后，睡眠3s钟</span>
 
 <span class="token comment">// system(&quot;cmd&quot;); //3s 后，再有机会执⾏。启动⼀个新终端。</span>
 <span class="token comment">// system(&quot;calc&quot;); //3s 后，启动计算器</span>
 <span class="token comment">// system(&quot;notepad&quot;); //3s 后，启动记事本</span>
 <span class="token comment">// system(&quot;mspaint&quot;); //3s 后，启动画图⼯具</span>
 <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;cls&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3s 后，将当前 终端 清空。</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 因为 main返回 int 。所以这⾥有 return 0；</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="键盘录入的基本使用" tabindex="-1"><a class="header-anchor" href="#键盘录入的基本使用"><span>键盘录入的基本使用</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//1.定义一个变量用来接收数据</span>
  <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  <span class="token comment">// 2.键盘录入</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 3.打印一下</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="main函数种类" tabindex="-1"><a class="header-anchor" href="#main函数种类"><span>main函数种类</span></a></h2><h3 id="main函数标准类型" tabindex="-1"><a class="header-anchor" href="#main函数标准类型"><span>main函数标准类型</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>无参：<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
有参：<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
参<span class="token number">1</span>：表示给 main 函数传递的参数的总个数。
参<span class="token number">2</span>：是一个数组。数组的每一个元素都是 字符串 <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;argv[%d] = %s\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试方法</p><ol><li>在 终端中， 使用 gcc 编译得到 可执行文件，如 test.exe</li><li>不能获取带有空格的字符串！！！空格是分隔符。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>gcc <span class="token number">09</span><span class="token operator">-</span>带参数的main<span class="token punctuation">.</span>c <span class="token operator">-</span>o test<span class="token punctuation">.</span>exe
test<span class="token punctuation">.</span>exe aa bb cc dd ee
test<span class="token punctuation">.</span>exe hello world haha xixi hoho heihei 。。。。
argc<span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token number">6</span>
argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">.</span>exe
argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> aa
argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> bb
argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> cc
argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> dd
argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> ee
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 VS 中，项目名称上 右键 —— 属性 —— 配置属性——调试 —— 命令行参数 —— 写入 待测试<br> 的命令行参数。</p><figure><img src="https://i4.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x4f496mwj30k50cawgd.jpg" alt="27.png" tabindex="0"><figcaption>27.png</figcaption></figure><h3 id="main函数其他类型" tabindex="-1"><a class="header-anchor" href="#main函数其他类型"><span>main函数其他类型</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 都能正常运行。但是！不是main的标准语法格式。</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码执行流程分析-gcc编译4步骤" tabindex="-1"><a class="header-anchor" href="#代码执行流程分析-gcc编译4步骤"><span>代码执行流程分析/gcc编译4步骤</span></a></h2><h3 id="整体过程" tabindex="-1"><a class="header-anchor" href="#整体过程"><span>整体过程</span></a></h3><figure><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vywthnkqj30jv07daan.jpg" alt="13.png" tabindex="0"><figcaption>13.png</figcaption></figure><p>C语言运行分为以下4步，在VS中直接运行把中间的步骤省略了<br><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyqqaficj312w0h30x8.jpg" alt="115.png"></p><h3 id="预处理" tabindex="-1"><a class="header-anchor" href="#预处理"><span>预处理</span></a></h3><ul><li>找到#include后面的 &lt;stdio.h&gt;这个文件</li><li>参数：-E</li><li>生成的文件： xxx.i 预处理文件</li><li>使用命令： gcc -E xxx.c -o xxx.i</li><li>工具：预处理器（包含在 gcc 编译集合工具中）</li><li>完成的工作： <ul><li><ol><li>头文件展开。</li></ol><ul><li>展开 stdio.h 文件内容，和源码一起，放到 xxx.i 文件中。</li><li>不检查语法错误！可以在此阶段展开任意文件。</li><li>测试命令： gcc -E hello.c -o hello.i -I(大i) .(当前目录)</li></ul></li><li><ol start="2"><li>宏定义替换</li></ol><ul><li>将宏名，替换成宏值。</li><li>#define PI 3.14 【解释】：define：创建宏。 PI ：宏名 3.14：宏值。</li></ul></li><li><ol start="3"><li>替换注释：把单行、多行注释替换成空行。</li></ol></li><li><ol start="4"><li>展开条件编译：根据条件来展开代码。</li></ol></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 测试案例2宏定义替换。 使用命令： gcc -E hello.c -o hello.i</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">// 定义宏</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 使用宏</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;PI = %f\\n&quot;</span><span class="token punctuation">,</span> PI<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 测试案例4展开条件编译</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token comment">// 定义宏</span>
<span class="token comment">// #define PI 3.14 // PI 定义与否，直接决定了下面的 ----666 是否打印。</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用宏</span>
    <span class="token comment">//printf(&quot;PI = %f\\n&quot;, PI);</span>
    <span class="token comment">// 使用条件编译, 含义是：如果定义了PI ，那么就打印 -----666， 否则不打印。</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">PI</span></span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-------------6666\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h3><ul><li><p>把c文件编译成二进制文件后缀名为obj</p></li><li><p>参数：-S</p></li><li><p>生成的文件： xxx.s 汇编文件</p></li><li><p>使用命令： gcc -S xxx.i -o xxx.s</p></li><li><p>工具：编译器（包含在 gcc 编译集合工具中）</p></li><li><p>完成的工作：</p><ul><li>逐行检查语法错误！【重点】 —— 编译过程整个gcc编译4步骤中，最耗时。</li><li>将 C 程序翻译成汇编指令。得到 .s 汇编文件。</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>	<span class="token punctuation">.</span>file <span class="token string">&quot;hello.c&quot;</span>
	<span class="token punctuation">.</span>text
	<span class="token punctuation">.</span>def __main<span class="token punctuation">;</span> <span class="token punctuation">.</span>scl <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>type <span class="token number">32</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>endef
	<span class="token punctuation">.</span>section <span class="token punctuation">.</span>rdata<span class="token punctuation">,</span><span class="token string">&quot;dr&quot;</span>
<span class="token punctuation">.</span>LC0<span class="token operator">:</span>
	<span class="token punctuation">.</span>ascii <span class="token string">&quot;hello world\\0&quot;</span>
<span class="token punctuation">.</span>LC2<span class="token operator">:</span>
	<span class="token punctuation">.</span>ascii <span class="token string">&quot;PI = %f\\12\\0&quot;</span>
<span class="token punctuation">.</span>LC3<span class="token operator">:</span>
	<span class="token punctuation">.</span>ascii <span class="token string">&quot;-------------6666\\0&quot;</span>
	<span class="token punctuation">.</span>text
	<span class="token punctuation">.</span>globl main
	<span class="token punctuation">.</span>def main<span class="token punctuation">;</span> <span class="token punctuation">.</span>scl <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>type <span class="token number">32</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>endef
	<span class="token punctuation">.</span>seh_proc main
main<span class="token operator">:</span>
	pushq <span class="token operator">%</span>rbp
	<span class="token punctuation">.</span>seh_pushreg <span class="token operator">%</span>rbp
	movq <span class="token operator">%</span>rsp<span class="token punctuation">,</span> <span class="token operator">%</span>rbp
    <span class="token punctuation">.</span>seh_setframe <span class="token operator">%</span>rbp<span class="token punctuation">,</span> <span class="token number">0</span>
    subq $<span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">%</span>rsp
    <span class="token punctuation">.</span>seh_stackalloc <span class="token number">32</span>
    <span class="token punctuation">.</span>seh_endprologue
    call __main
    leaq <span class="token punctuation">.</span><span class="token function">LC0</span><span class="token punctuation">(</span><span class="token operator">%</span>rip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rcx
    call puts
    movq <span class="token punctuation">.</span><span class="token function">LC1</span><span class="token punctuation">(</span><span class="token operator">%</span>rip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rax
    movq <span class="token operator">%</span>rax<span class="token punctuation">,</span> <span class="token operator">%</span>rdx
    movq <span class="token operator">%</span>rdx<span class="token punctuation">,</span> <span class="token operator">%</span>xmm1
    movq <span class="token operator">%</span>rax<span class="token punctuation">,</span> <span class="token operator">%</span>rdx
    leaq <span class="token punctuation">.</span><span class="token function">LC2</span><span class="token punctuation">(</span><span class="token operator">%</span>rip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rcx
    call printf
    leaq <span class="token punctuation">.</span><span class="token function">LC3</span><span class="token punctuation">(</span><span class="token operator">%</span>rip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rcx
    call puts
    movl $<span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">%</span>eax
    addq $<span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">%</span>rsp
    popq <span class="token operator">%</span>rbp
    ret
    <span class="token punctuation">.</span>seh_endproc
    <span class="token punctuation">.</span>section <span class="token punctuation">.</span>rdata<span class="token punctuation">,</span><span class="token string">&quot;dr&quot;</span>
    <span class="token punctuation">.</span>align <span class="token number">8</span>
<span class="token punctuation">.</span>LC1<span class="token operator">:</span>
    <span class="token punctuation">.</span><span class="token keyword">long</span> <span class="token number">1374389535</span>
    <span class="token punctuation">.</span><span class="token keyword">long</span> <span class="token number">1074339512</span>
    <span class="token punctuation">.</span>ident <span class="token string">&quot;GCC: (x86_64-posix-sjlj-rev0, Built by MinGW-W64 project) 8.1.0&quot;</span>
    <span class="token punctuation">.</span>def puts<span class="token punctuation">;</span> <span class="token punctuation">.</span>scl <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>type <span class="token number">32</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>endef
    <span class="token punctuation">.</span>def printf<span class="token punctuation">;</span> <span class="token punctuation">.</span>scl <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>type <span class="token number">32</span><span class="token punctuation">;</span> <span class="token punctuation">.</span>endef
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="汇编" tabindex="-1"><a class="header-anchor" href="#汇编"><span>汇编</span></a></h3><ul><li><p>把预处理找到的h文件，还有编译之后产生的obj文件打包在一起，产生exe文件</p></li><li><p>参数：-c</p></li><li><p>生成的文件： xxx.o 目标文件（二进制。人类看不懂。）</p></li><li><p>使用命令： gcc -c xxx.s -o xxx.o</p></li><li><p>工具：汇编器（包含在 gcc 编译集合工具中）</p></li><li><p>完成的工作：翻译：将汇编指令翻译成对应的 二进制指令。</p></li></ul><h3 id="连接-链接" tabindex="-1"><a class="header-anchor" href="#连接-链接"><span>连接/链接</span></a></h3><ul><li>参数：无 （-o 不是链接阶段参数，是用来指定文件名）</li><li>生成的文件： xxx.exe 可执行文件（二进制。人类看不懂。）</li><li>使用命令： gcc xxx.o -o xxx.exe</li><li>工具：链接器（包含在 gcc 编译集合工具中）</li><li>完成的工作： <ul><li>库引入</li><li>合并多目标文件</li><li>合并启动例程</li></ul></li></ul><figure><img src="https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vz31zirmj30h90bk75m.jpg" alt="14.png" tabindex="0"><figcaption>14.png</figcaption></figure><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>gcc 编译的 4个步骤中，每个步骤直接都可相互转换。</p><figure><img src="https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vz4ibvp0j30kc07jjsb.jpg" alt="16.png" tabindex="0"><figcaption>16.png</figcaption></figure><h2 id="printf格式化输出int" tabindex="-1"><a class="header-anchor" href="#printf格式化输出int"><span>printf格式化输出int</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// %d：格式匹配符，匹配整数。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a = 在“”中，代表普通字符串， 原样输出。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> PI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// %f：格式匹配符，匹配小数。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;PI = %f\\n&quot;</span><span class="token punctuation">,</span> PI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// PI = 在“”中，代表普通字符串， 原样输出。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">3.45678</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// %f：格式匹配符，匹配小数。</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d + %d = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +、= 在 “”中，代表普通字符串， 原样输出。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d + %d = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="程序调试" tabindex="-1"><a class="header-anchor" href="#程序调试"><span>程序调试</span></a></h2><ul><li>前提：程序，没有语法错误。 ——语法错误 VS 帮我检查。 <ul><li>检查 程序出现的逻辑错误！</li></ul></li><li>核心思想：让程序一行一行的执行。</li><li>添加行号：工具 —— 选项 —— 文本编辑器 —— c/c++ —— 行号（勾选）</li></ul><h3 id="程序调试流程" tabindex="-1"><a class="header-anchor" href="#程序调试流程"><span>程序调试流程</span></a></h3><ol><li><p>添加断点。 —— 可添加多个</p><ol><li>鼠标点击待添加断点行，左侧行号前灰色区域。 再次点击取消。</li><li>光标停止在待添加断点行的任意位置，按F9添加断点。 再次按 F9 取消断点。</li></ol></li><li><p>调试，必须在 Debug 模式下进程。Release 模式无效。</p></li><li><p>F5 启动调试。</p></li><li><p>断点停止的位置，是尚未执行的指令。</p></li><li><p>开始调试：</p><ol><li>逐语句执行。 逐语句执行下一行（F11）：遇见函数，进入自定义函数内部，逐条跟踪执行。逐过程执行。</li><li>逐过程执行下一行（F10）：遇见函数，不进入函数内部，逐条跟踪执行。</li><li>逐断点执行。 代码中有多断点，直接跳转到下一个断点。 —— 点击“继续”，无快捷键。</li><li>跳出函数。跳出当前断点所在的函数。 shift + F10</li></ol><figure><img src="https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3xb3nmpz3j30ku06zt9w.jpg" alt="31.png" tabindex="0"><figcaption>31.png</figcaption></figure></li></ol><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><h3 id="变量-3-要素" tabindex="-1"><a class="header-anchor" href="#变量-3-要素"><span>变量 3 要素</span></a></h3><ul><li><ol><li>变量名：用来在程序中使用。</li></ol></li><li><ol start="2"><li>变量类型：开辟内存空间大小。</li></ol></li><li><ol start="3"><li>变量值：存储的实际数据。</li></ol></li></ul><h3 id="变量定义" tabindex="-1"><a class="header-anchor" href="#变量定义"><span>变量定义：</span></a></h3><ul><li>定义语法： 类型名 变量名 = 变量值（一般定义方法）。 int m = 57;</li><li>会开辟内存空间给变量。变量声明不会开辟内存空间。</li></ul><h3 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明"><span>变量声明：</span></a></h3><ul><li>语法： <ul><li>int a； 没有变量值的变量定义，叫做声明。</li><li>extern int a; 添加 extern 关键字。</li></ul></li><li>特性： <ul><li>变量要想使用，必须 有定义。</li><li>编译器，在使用变量之前，必须要看到变量定义。如果没有看到，编译器会自动找寻一个变量声明。提升成定义。</li><li>如果 变量声明前，添加了 extern 关键字，无法提升！</li></ul></li></ul><h3 id="变量的注意事项" tabindex="-1"><a class="header-anchor" href="#变量的注意事项"><span>变量的注意事项</span></a></h3><ul><li>只能存一个值</li><li>变量名不允许重复定义</li><li>一条语句可以定义多个变量</li><li>变量在使用之前一定要进行赋值</li><li>变量的作用域范围</li></ul><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量"><span>常量</span></a></h2><p>程序运行的过程中，其值永远不会发生改变、不能被修改的的数据</p><p>常量的分类<br><img src="https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3w0e0vuyqj315u0egq9o.jpg" alt="var.png"><br> 实型常量细节：</p><ul><li>小数点前后，如果只有0，可以省略不写</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">0.93</span> 可以写成 <span class="token number">.93</span>
<span class="token number">18.0</span> 可以写成 <span class="token number">18.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>科学计数法是实型常量，但是要写E</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">12340000</span> 可以写成 <span class="token number">1.2340000E7</span>
但是写成 <span class="token number">1.234</span> <span class="token operator">*</span> <span class="token number">10</span>的<span class="token number">7</span>次方就错误了，因为这是一个计算过程，不是最终的数字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>“hello”、‘A’、57、-10、 3.1415926（浮点常量）</li><li>#define PI 3.14 ——【宏定义】语法：#define 宏名 宏值 <ul><li>强调：没有 “;” 结束标记。没有 “=”</li></ul></li><li>const int a = 10; 定义语法： const 类型名 变量名 = 变量值 <ul><li>const 关键字： 被该关键字修饰的变量，表示为只读变量。</li></ul></li></ol><p>练习：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.1415926</span> </span><span class="token comment">// 定义常量</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 圆的面积 ：s = PI * r * r</span>
    <span class="token comment">// 圆的周长 ：L = 2 * PI * r</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 变量的定义。</span>
    <span class="token keyword">float</span> s <span class="token operator">=</span> PI <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span> <span class="token comment">// 表达式。作为变量值。</span>
    <span class="token keyword">float</span> l <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> PI <span class="token operator">*</span> r<span class="token punctuation">;</span>
    <span class="token comment">//printf(&quot;圆的面积：%f\\n&quot;, s);// 28.274334 默认显示 6 位小数。</span>
    <span class="token comment">//printf(&quot;圆的周长：%f\\n&quot;, l);// 18.849556</span>
    <span class="token comment">//printf(&quot;圆的面积：%.2f\\n&quot;, s);// 28.27</span>
    <span class="token comment">//printf(&quot;圆的周长：%.2f\\n&quot;, l);// 18.85指定保留小数点后两位，对第3位四舍五入</span>
    <span class="token keyword">float</span> m <span class="token operator">=</span> <span class="token number">3.4567891</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;m=%6.2f\\n&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//共显示6位数，包含小数点，保留小数点后两位，对第3位四舍五入，不足6位用空格补齐。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;m=%06.2f\\n&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//共显示6位数，包含小数点，保留小数点后两位，对第3位四舍五入，不足6位用0补齐。</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给你一组数据，说出下面每组数据中，分别是哪种类型的常量</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">0</span>	<span class="token operator">:</span>整形常量
<span class="token number">0.0</span>	<span class="token operator">:</span>实型常量
<span class="token operator">-</span><span class="token number">25</span>	<span class="token operator">:</span>整形常量
<span class="token number">123</span> <span class="token operator">:</span>整形常量
<span class="token number">17.0</span><span class="token operator">:</span>实型常量
‘’  <span class="token operator">:</span>语法错误
‘ ’ <span class="token operator">:</span>字符常量
‘a’ <span class="token operator">:</span>字符常量
‘<span class="token operator">!</span>’ <span class="token operator">:</span>字符常量
‘#’ <span class="token operator">:</span>字符常量
‘ab’<span class="token operator">:</span>语法错误
‘题’<span class="token operator">:</span>语法错误
‘￥’<span class="token operator">:</span>语法错误
“”  <span class="token operator">:</span>字符串常量
“你好”<span class="token operator">:</span>字符串常量 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>选择题：</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">1.</span> 以下选项中正确的整型常量是：B
A） <span class="token number">12.</span>		B<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">20</span>		C<span class="token punctuation">)</span>  <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">000</span>		   D<span class="token punctuation">)</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>选择题：</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">2.</span>以下选项中正确的实型常量是：D
A） <span class="token number">0</span>		B<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">31</span>		C<span class="token punctuation">)</span>  <span class="token number">0.329</span>×<span class="token number">102</span>	  D<span class="token punctuation">)</span> <span class="token number">.871</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>选择题</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">3.</span>以下选项中不正确的实型常量是<span class="token operator">:</span>B
A） <span class="token number">2.607E-1</span>	B<span class="token punctuation">)</span> <span class="token number">0.8103</span>e <span class="token number">2</span>	C<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token number">77.77</span>	 D<span class="token punctuation">)</span> <span class="token number">456e-2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>选择题</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">4.</span> 想要进行数学计算，下面正确的写法是： C
A）“<span class="token number">12</span>”<span class="token operator">+</span> <span class="token number">13</span>	B<span class="token punctuation">)</span>“<span class="token number">23</span>”<span class="token operator">+</span>“<span class="token number">13</span>” 	C<span class="token punctuation">)</span> <span class="token number">13</span> <span class="token operator">+</span> <span class="token number">23</span> 	D<span class="token punctuation">)</span>“<span class="token number">1.2</span>”<span class="token operator">+</span> <span class="token number">3.7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符"><span>标识符</span></a></h2><p>变量和常量总称</p><h3 id="硬性要求" tabindex="-1"><a class="header-anchor" href="#硬性要求"><span>硬性要求</span></a></h3><ol><li>不是关键字、函数名。 system、printf、int、main、return。。。</li><li>只能有 字母、数字、下划线组成。 a-z/A-Z/0-9 _ <ul><li>abc_1/ abc_2 / _abc_1 / a_b_c_d</li></ul></li><li>不能以数字开头。 <ul><li>int a5ir = 10; ok</li><li>int _34F = 6; ok</li><li>float 98ti_54 = 5.4; error;</li></ul></li><li>大小写严格区分。 <ul><li>通常 使用大写来定义常量。 #define MAX 100</li><li>通常 使用小写来定义变量。</li><li>变量名：全部小写</li><li>文件名：全部小写，单词之间用下划线隔开</li></ul></li></ol><h3 id="命名规范" tabindex="-1"><a class="header-anchor" href="#命名规范"><span>命名规范</span></a></h3><p>用英文单词，见名知意</p><ol><li>大驼峰法：int HelloWorldHahaHohoHehe = 10; <ul><li>多个单词组成变量名，每个单词首字母大写。</li></ul></li><li>小驼峰法：int helloWorldHahaHohoHehe = 10; <ul><li>多个单词组成变量名，首个单词的首字母小写，其余每个单词首字母大写。</li></ul></li><li>小写+下划线：int hello_world_haha_hoho_hehe = 10; <ul><li>C 语言专用！</li></ul></li></ol><h2 id="sizeof关键字" tabindex="-1"><a class="header-anchor" href="#sizeof关键字"><span>sizeof关键字</span></a></h2><ul><li>sizeof 不是函数</li><li>求取变量、数据类型，占用的内存空间大小</li><li>查看 sizeof 返回的占用内存大小，需要使用 %llu 格式符或者%zu格式符</li><li>用法： <ul><li><ol><li>sizeof(变量名) —— 返回变量大小，单位整数字节。</li></ol></li><li><ol start="2"><li>sizeof(类型名) ——返回 数据类型大小， 单位整数字节。</li></ol></li><li><ol start="3"><li>sizeof 变量名 —— 语法C语言支持该写法，不推荐使用。</li></ol></li></ul></li></ul><h2 id="整型" tabindex="-1"><a class="header-anchor" href="#整型"><span>整型</span></a></h2><h3 id="有符号整型" tabindex="-1"><a class="header-anchor" href="#有符号整型"><span>有符号整型</span></a></h3><p>下表中列出的占用字节数和取值范围，是大多数情况下各种类型的取值。由于C 标准没有具体规定以上各类数据所占用的字节数。因此，在不同系统、编译器下，数据类型占用的字节数会有所不同。</p><p>比如：int 类型，在 Turbo C 环境占 2 字节，取值范围与 short 相同。 而在 Visual C 环境下是 4 字节。</p><p>再如：long 类型，相同的 gcc 编译器下，在 Windows 系统中占 4 字节，而在 Linux 系统中占 8 字节。</p><p>可以使用 sizeof 查看 数据类型 占用内存的大小。</p><p>可以引入头文件 #include &lt;limits.h&gt; 借助宏来查看 数据类型 在当前平台上 对应的最小、最大值。</p><ul><li>获取数据类型的最小值，最大值，可用 <code>#include &lt;limits.h&gt;</code></li></ul><table><thead><tr><th>整型</th><th>名称</th><th>格式匹配符</th><th>占用的大小</th><th>数据范围</th><th>最小值宏</th><th>最大值宏</th></tr></thead><tbody><tr><td>short</td><td>短整型</td><td>%hd</td><td>2字节</td><td>-2<sup>15</sup> ~ 2<sup>15</sup>-1 (-32768 ~ 32767)</td><td>SHRT_MIN</td><td>SHRT_MAX</td></tr><tr><td>int</td><td>整型</td><td>%d</td><td>4字节</td><td><strong>-2<sup>31</sup> ~ 2<sup>31</sup>-1 (-2147483648 ~ 2147483647)</strong></td><td>INT_MIN</td><td>INT_MAX</td></tr><tr><td>long</td><td>长整型</td><td>%ld</td><td>windows：32/6位：4字节 Linux下：32位：4字节、64位：8字节。</td><td>-2<sup>31</sup> ~ 2<sup>31</sup>-1 (-2147483648 ~ 2147483647)</td><td>LONG_MIN</td><td>LONG_MAX</td></tr><tr><td>long long</td><td>长长整型</td><td>%lld</td><td>8字节</td><td>-2<sup>63</sup> ~ 2<sup>63</sup>-1</td><td>LLONG_MIN</td><td>LLONG_MAX</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;int大小 = %u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;int最小值：%d, 最大值：%d\\n&quot;</span><span class="token punctuation">,</span> INT_MIN<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;short大小 = %u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;short最小值：%hd, 最大值：%hd\\n&quot;</span><span class="token punctuation">,</span> SHRT_MIN<span class="token punctuation">,</span> SHRT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;long大小 = %u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;long最小值：%ld, 最大值：%ld\\n&quot;</span><span class="token punctuation">,</span> LONG_MIN<span class="token punctuation">,</span> LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;long long大小 = %u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;long long最小值：%lld, 最大值：%lld\\n&quot;</span><span class="token punctuation">,</span> LLONG_MIN<span class="token punctuation">,</span> LLONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无符号整型" tabindex="-1"><a class="header-anchor" href="#无符号整型"><span>无符号整型</span></a></h3><table><thead><tr><th>整型名</th><th>名称</th><th>格式匹配符</th><th>占用的大小</th><th>数据范围</th><th>最小值宏</th><th>最大值宏</th></tr></thead><tbody><tr><td>unsigned short</td><td>无符号短整型</td><td>%hu</td><td>同 short</td><td>0 ~ 2<sup>16</sup>-1 (0 ~ 65535)</td><td>0</td><td>USHRT_MAX</td></tr><tr><td>unsigned int</td><td>无符号整型</td><td>%u</td><td>同 int</td><td>0 ~ 2<sup>32</sup>-1 (0 ~ 4294967295)</td><td>0</td><td>UINT_MAX</td></tr><tr><td>unsigned long</td><td>无符号长整型</td><td>%lu</td><td>同 long</td><td>0 ~ 2<sup>32</sup>-1 (0 ~ 4294967295)</td><td>0</td><td>ULONG_MAX</td></tr><tr><td>unsigned long long</td><td>无符号长长整型</td><td>%llu</td><td>同 long long</td><td>0 ~ 2<sup>64</sup>-1</td><td>0</td><td>ULLONG_MAX</td></tr></tbody></table><h2 id="输出常量" tabindex="-1"><a class="header-anchor" href="#输出常量"><span>输出常量</span></a></h2><p>利用printf集合占位符（格式匹配符）的方式可以输出常量<br> 一个printf中可以同时输出多个数据，占位符和后面的数据要一一对应</p><p><strong>格式：</strong></p><ul><li><p>printf（参数1，参数2）；</p><ul><li><p>参数1：输出内容的最终样式，以字符串的形式体现 <strong>（必填）</strong></p></li><li><p>参数2：填补的内容 <strong>（选填）</strong></p></li></ul></li><li><p><strong>占位符：</strong></p></li></ul><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>整形</td><td>%d</td></tr><tr><td>实型 （小数）</td><td>%f</td></tr><tr><td>字符</td><td>%c</td></tr><tr><td>字符串</td><td>%s</td></tr></tbody></table><h2 id="char类型" tabindex="-1"><a class="header-anchor" href="#char类型"><span>char类型</span></a></h2><ul><li>字符型。其本质依然是存储数值，因此与数值型类似，也有有符号、无符号之分。</li></ul><table><thead><tr><th>类型</th><th>字节数</th><th>格式符</th><th>数据范围</th><th>最小值宏</th><th>最大值宏</th></tr></thead><tbody><tr><td>char</td><td>1（8 bit位）</td><td>%hhd</td><td>-2<sup>7</sup> ~ 2<sup>7</sup>-1 (-128 ~ 127)</td><td>CHAR_MIN</td><td>CHAR_MAX</td></tr><tr><td>unsigned char</td><td>1（8 bit位）</td><td>%hhu</td><td>0~2<sup>8</sup>-1 (0 ~ 255)</td><td>0</td><td>UCHAR_MAX</td></tr></tbody></table><ul><li>字符型：%c</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 获取无符号数取值范围</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;char 无符号 min = 0，max = %hhu\\n&quot;</span><span class="token punctuation">,</span> UCHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取有符号数取值范围</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;char 有符号 min = %hhd，max = %hhd\\n&quot;</span><span class="token punctuation">,</span> CHAR_MIN<span class="token punctuation">,</span> CHAR_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 char 占用的字节数 1</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;char 大小 = %u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 unsigned char 占用的字节数 1</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;unsigned char 大小 = %u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ascii码" tabindex="-1"><a class="header-anchor" href="#ascii码"><span>ASCII码</span></a></h3><p>ASCII 码 (American Standard Code for Information Interchange) 美国信息交换标准代码。char 类型数据，数值 对应一个 ASCII 码。</p><p>ASCII表说明</p><ul><li>0 ~ 32 ASCII码 对应的字符都不可见。从键盘键入的所有内容都是字符。如，键入数字 7，实际是字符 ‘7’，真正存储在计算机内的是 55（字符 7 的 ASCII 码值），而如果我们键入了 35，实际上这是两个字符。真正存储在计算机内的是 51 和 53（字符 3 和 字符 5 的 ASCII 码值）。</li><li>用 printf 结合 格式符 %c，显示字符。 如果用 %d，就显示 其 ASCII 值了。</li><li>常用的 ASCII码：</li></ul><table><thead><tr><th>字符</th><th>ASCII 码</th><th>字符</th><th>ASCII 码</th></tr></thead><tbody><tr><td><strong>空（&#39;\\0&#39;）</strong></td><td><strong>0</strong></td><td><strong>‘\\n’</strong></td><td><strong>10</strong></td></tr><tr><td><strong>空格</strong></td><td><strong>32</strong></td><td><strong>0</strong></td><td><strong>48</strong></td></tr><tr><td><strong>A</strong></td><td><strong>65</strong></td><td><strong>a</strong></td><td><strong>97</strong></td></tr><tr><td>‘\\t’ 制表符tab键对应字符</td><td>9</td><td></td><td></td></tr></tbody></table><table><thead><tr><th><strong>ASCII值</strong></th><th><strong>控制字符</strong></th><th><strong>ASCII值</strong></th><th><strong>字符</strong></th><th><strong>ASCII值</strong></th><th><strong>字符</strong></th><th><strong>ASCII值</strong></th><th><strong>字符</strong></th></tr></thead><tbody><tr><td><strong>0</strong></td><td><strong>NUL</strong></td><td><strong>32</strong></td><td><strong>(space)</strong></td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td><strong>65</strong></td><td><strong>A</strong></td><td><strong>97</strong></td><td><strong>a</strong></td></tr><tr><td>2</td><td>STX</td><td>34</td><td>&quot;</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>‘</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td><strong>10</strong></td><td><strong>LF</strong></td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td><strong>48</strong></td><td><strong>0</strong></td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>\\</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>~</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 定义变量 ch， 指定初值为 &#39;A&#39;;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c: character %c 用来显示字符的 格式匹配符。</span>
    ch <span class="token operator">=</span> <span class="token char">&#39;m&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 给变量ch 赋值成 &#39;m&#39;, 覆盖 原来的 &#39;A&#39;;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ch <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span> <span class="token comment">// 使用 范围内的数值 97 ，给 ch 赋值。	</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将数值97，按照字符格式打印输出。</span>
    ch <span class="token operator">=</span> <span class="token number">98</span><span class="token punctuation">;</span> <span class="token comment">// 使用 范围内的数值 98 ，给 ch 赋值。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将数值98，按照字符格式打印输出。</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 大写字母，转换成 小写字母。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;R&#39;</span><span class="token punctuation">;</span> <span class="token comment">// char 变量定义</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;R 转换的小写为：%c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ch+32 表达式，对应格式匹配符 %c</span>
    <span class="token keyword">char</span> ch2 <span class="token operator">=</span> <span class="token char">&#39;h&#39;</span><span class="token punctuation">;</span> <span class="token comment">// char 变量定义</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;h 转换的大写为：%c\\n&quot;</span><span class="token punctuation">,</span> ch2<span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ch2-32 表达式，对应格式匹配符 %c</span>
    <span class="token keyword">char</span> ch3 <span class="token operator">=</span> <span class="token char">&#39;5&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 借助字符5， 利用 ASCII特性，打印出 字符9</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; 打印字符9 = %c\\n&quot;</span><span class="token punctuation">,</span> ch3<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符"><span>转义字符</span></a></h3><p>‘/’: 自右向左划， 叫做 “斜杠”。<br> ‘\\’ : 自左向右划，叫做 “反斜杠” 。 ——是 转义字符。<br> 转义字符的作用：</p><ul><li>将普通字符，转换为 特殊意。 <ul><li>如： ‘\\n’ : 这是一个字符。代表换行。（回车键）</li><li>如：‘\\t’ : 这是一个字符。代表 一个制表符。（Tab键）</li><li>‘\\b’ 同样是 1 个字符。 代表 退格符（Backspace 键）。</li><li>‘\\0’ 是一个字符。代表 空。对应 ASCII 值 0。</li><li>‘\\ddd’ 是一个字符。ddd 对应 3 个八进制数（没有用 0 开头）。 如：\\141 对应 ASCII 值为 97，代表 ‘a’。</li><li>‘\\xhh’ 是一个字符。x 表十六进制，hh 对应 2 个十六进制数。 如：\\x41 对应 ASCII 值为 65，代表 ‘A’。</li></ul></li><li>将特殊字符，还原成本身意。 <ul><li><p>如： \\n : 这样就将 一个字符 ‘\\n’，还原成 两个字符：‘\\’ 和 ‘n’</p></li><li><p><code>\\</code> 代表 单引号。</p><p><code>\\\\</code> 代表 反斜杠。</p></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//一个printf中打印 hello (一个tab缩进) world 换行</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">char</span> ch1 <span class="token operator">=</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 实现 一个tab缩进</span>
<span class="token keyword">char</span> ch2 <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 实现 一个换行。</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello%cworld%c&quot;</span><span class="token punctuation">,</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//将 特殊字符转换成本身意。</span>
<span class="token comment">//屏幕上严格输出 如下内容：【 ‘\\n’ 的值是 10】 要求显示时要有 ‘ ’</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;\\\\n&#39;的值是 %hhd&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实型-浮点型-【了解】" tabindex="-1"><a class="header-anchor" href="#实型-浮点型-【了解】"><span>实型（浮点型）【了解】</span></a></h2><ul><li>显示小数</li><li>float : 单精度浮点型。 %f 大小：4字节。（ 可以使用 sizeof() 求取 ） <ul><li>4.35 默认会被编译器理解为 double 类型。</li><li>float v = 4.567f； 编译器理解 float。</li><li>%f 格式匹配符，默认保留6位小数。</li></ul></li><li>double: 双精度浮点型。%lf 大小：8字节。double d = 5.68;</li><li>取值范围</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//使用头文件 #include &lt;float.h&gt; 获取浮点型取值范围。</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;float 范围：%f ~ %f\\n&quot;</span><span class="token punctuation">,</span> FLT_MIN<span class="token punctuation">,</span> FLT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;double 范围：%lf ~ %lf\\n&quot;</span><span class="token punctuation">,</span> DBL_MIN<span class="token punctuation">,</span> DBL_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">1.23456789101112131415f</span><span class="token punctuation">;</span> <span class="token comment">// 定义有 20 位小数的 float 变量</span>
	<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.23456789101112131415</span><span class="token punctuation">;</span> <span class="token comment">// 定义有 20 位小数的 double 变量</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;f=%.20f\\n&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;d=%.20lf\\n&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>精度问题</p><ul><li><p>float类型：</p><ul><li>精度 6~7 位： <ul><li>整数部分 + 小数部分 &lt;= 6 位， 准确。</li><li>整数部分 + 小数部分 == 7 位，可能准确，也可能不准确。</li><li>整数部分 + 小数部分 &gt; 7位。不准确。</li></ul></li></ul></li><li><p>double类型</p><ul><li>精度 15~16 位： <ul><li>整数部分 + 小数部分 &lt;= 15 位， 准确。</li><li>整数部分 + 小数部分 == 16 位，可能准确，也可能不准确。</li><li>整数部分 + 小数部分 &gt; 16位。不准确。</li></ul></li></ul></li></ul></li><li><p>不同平台（操作系统）的float、double 类型实现的精度有可能不同。以上是Windows特性</p></li><li><p>float 和 double 不存在 “无符号”类型。</p></li><li><p>显示小数时，%f 和 %lf 默认保留 6 位小数。</p></li><li><p>如需指定小数位数，使用格式符 %.nf ，n 为几，表示精确到小数点后几位，会对 n+1 位做 4 舍 5 入。</p></li></ul><h2 id="bool-类型" tabindex="-1"><a class="header-anchor" href="#bool-类型"><span>bool 类型</span></a></h2><p>C语言原来没有 bool 类型。 C99标准中，新增了 bool 类型。C++ 自带 bool类型。<br> 表示 ：好、坏；真、假；对、错；是、否<br> 取值：true —— 真 —— 1、false —— 假 —— 0<br> C语言使用bool 的条件：1. 编译器要支持c99标准。2. 导入 #include &lt;stdbool.h&gt;<br> bool 类型的大小。1字节。 （ sizeof() 求取 ）<br> bool 没有专用的格式匹配符。 打印时，使用 %d 来打印。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    bool aa <span class="token operator">=</span> true<span class="token punctuation">;</span> <span class="token comment">// 定义bool 类型变量 aa ， 初值为 true == 1</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;aa = %d\\n&quot;</span><span class="token punctuation">,</span> aa<span class="token punctuation">)</span><span class="token punctuation">;</span>
    aa <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token comment">// 给 bool 类型变量 aa 赋值为 false == 0</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;aa = %d\\n&quot;</span><span class="token punctuation">,</span> aa<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进制和转换" tabindex="-1"><a class="header-anchor" href="#进制和转换"><span>进制和转换</span></a></h2><ul><li>计算机 只 使用 2 机制。</li><li>8进制、10进制、16进制。统统都是给人类用的！！！</li><li>存储知识 <ul><li>1 bit位 就是一个 二进制位。 存 0 或 1</li><li>一个字节（Byte） 1B = 8bit位。</li><li>“内存单元” 是计算机内存存储的最小单位， 一个内存单元 == 1字节。 <ul><li>1KB = 1024B</li><li>1MB = 1024KB</li><li>1GB = 1024MB</li><li>1TB = 1024GB</li></ul></li></ul></li></ul><h3 id="_8进制" tabindex="-1"><a class="header-anchor" href="#_8进制"><span>8进制</span></a></h3><p>逢 8 进 1。 借1当8。<br> 取值： 0/1/2/3/4/5/6/7 最大值 7<br> 格式匹配符：%o 和 %#o<br> 表示语法： 0开头 。</p><h3 id="_16进制" tabindex="-1"><a class="header-anchor" href="#_16进制"><span>16进制</span></a></h3><p>逢 16 进 1。 借1当16。<br> 取值： 0~9 10-A/a 11-B/b 12-C/c 13-D/d 14-E/e 15-F/f 最大值: F/f<br> 格式匹配符：%x 或 %#x<br> 表示语法： 0x开头 。</p><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1"><span>小结</span></a></h3><p>使用频率最高的是 10 进制。 次高的：16进制。<br> int m = 0x15F4；<br> int n = 0345；<br> int k = 0101101；</p><ul><li>不能直接将变量值赋值为 2进制。</li><li>上述的赋值，会被编译器理解为 8进制数。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span> <span class="token comment">// 10进制数作a变量初始化。 —— 定义。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;10进制：a = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;8进制：a = %o\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;8进制：a = %#o\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在%和x中间添加#，可以在输出时，显示8进制前缀。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;16进制：a = %x\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;16进制：a = %#x\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在%和x中间添加#，可以在输出时，显示16进制前缀。</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用的格式匹配符" tabindex="-1"><a class="header-anchor" href="#常用的格式匹配符"><span>常用的格式匹配符</span></a></h3><p>%d、%c、%x、%u、%s （打印字符串）、%o、%#o、%#x、%hhd、%hd、%ld、%lld、%hhu、%hu、%lu、%llu、%f、%lf</p><h2 id="编码和存储" tabindex="-1"><a class="header-anchor" href="#编码和存储"><span>编码和存储</span></a></h2><h3 id="无符号存储" tabindex="-1"><a class="header-anchor" href="#无符号存储"><span>无符号存储</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// 占用 4 字节 32 个 bit位存储。</span>
空间：<span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> ———— <span class="token number">4</span> 字节。
存储：<span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00001100</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token comment">//占用 2 字节 16 个 bit位存储。</span>
空间：<span class="token number">00000000</span> <span class="token number">00000000</span> ———— <span class="token number">2</span> 字节。
存储：<span class="token number">00000000</span> <span class="token number">00001111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有符号存储" tabindex="-1"><a class="header-anchor" href="#有符号存储"><span>有符号存储</span></a></h3><ul><li>拿出一个二进制位存储符号。标识正、负。<br> 选用 最高位 为符号位。正：0、负：1</li></ul><h4 id="有符号正数" tabindex="-1"><a class="header-anchor" href="#有符号正数"><span>有符号正数</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 采用 “源码” 存储</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
空间：<span class="token number">0</span> <span class="token number">0000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span>
存储：<span class="token number">0</span> <span class="token number">0000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000101</span> <span class="token operator">--</span><span class="token operator">-</span> 表示存储正数 <span class="token number">5</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="有符号负数" tabindex="-1"><a class="header-anchor" href="#有符号负数"><span>有符号负数</span></a></h4><ul><li>有符号的负数，采用 “补码” 存储 <ul><li>源码：数值的二进制位直接存储。</li><li>反码：符号位不变，将其余数值为取反。</li><li>补码：反码+1。</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">33</span><span class="token punctuation">;</span>
空间：<span class="token number">0</span> <span class="token number">0000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span>
源码：<span class="token number">1</span> <span class="token number">0000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00100001</span>
反码：<span class="token number">1</span> <span class="token number">1111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11011110</span>
补码：<span class="token number">1</span> <span class="token number">1111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11011111</span> —— 负<span class="token number">33</span> 在计算机中实际的存储形式。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>小结： <ul><li>int —— 4字节 —— 32bit位 <ul><li>有符号：31个数值位。 取值范围 -2^31~ 2^31-1 ——&gt; -2147483648 ~ +2147483647</li><li>无符号：32个数值位。取值范围 0 ~ 2^32-1 ——&gt; 0 ~ 4294967295</li></ul></li><li>short —— 2字节 —— 16bit位 <ul><li>有符号：15个数值位。 取值范围 -2^15 ~ 2^15-1 ——&gt;</li><li>无符号：16个数值位。取值范围 0 ~ 2^16-1 ——&gt; 0 ~ 65535</li></ul></li></ul></li><li>因此，知道数据类型占用内存的大小，就能算出该类型 无符号数、有符号数 对应的取值范围。</li></ul><h2 id="数据溢出" tabindex="-1"><a class="header-anchor" href="#数据溢出"><span>数据溢出</span></a></h2><ul><li>如果 int 类型变量，已经取最大值（2147483647），再给这个变量 +1。就发了溢出。 <ul><li><p>上溢出：最大值+1</p></li><li><p>下溢出：最小值-1</p></li></ul></li></ul><h3 id="无符号数" tabindex="-1"><a class="header-anchor" href="#无符号数"><span>无符号数</span></a></h3><ul><li><p>取值范围 0 ~ 2^32-1</p></li><li><p>最大值 + 1 ——&gt; 0</p></li><li><p>0 -1 ——&gt; 最大值。</p></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 上溢出</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> UINT_MAX<span class="token punctuation">;</span> <span class="token comment">// 取出无符号最大值</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;最大值+1 = %d\\n&quot;</span><span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;最大值+2 = %d\\n&quot;</span><span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//下溢出。</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token comment">//取出无符号最小值</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;最小值-1 = %u，最大值 = %u\\n&quot;</span>，a <span class="token operator">-</span> <span class="token number">1</span>，UINT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有符号数" tabindex="-1"><a class="header-anchor" href="#有符号数"><span>有符号数</span></a></h3><ul><li>上溢出：最大值+1，上溢出 == 最小值。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span> <span class="token comment">// 取出无符号最小值</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;最大值+1 = %d, 最小值 = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> INT_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>下溢出：最小值-1，下溢出 == 最大值。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// signed 下溢出。</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span><span class="token comment">// 取出有符号最小值</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;最小值-1 = %d，最大值 = %d\\n&quot;</span>，a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2"><span>小结</span></a></h3><p>大部分编译器，对于数值溢出，采用上述处理方式。但个别编译器有可能不能。<br> 受数值溢出影响，数据存储时要选择恰当的数据类型。389482390483209 --- int</p><h2 id="不常用关键字-了解" tabindex="-1"><a class="header-anchor" href="#不常用关键字-了解"><span>不常用关键字（了解）</span></a></h2><ul><li>extern：表示声明。声明没有内存空。不能提升为定义。</li><li>const：限制一个变量为只读。—— 常量。</li><li>Volatile：防止编译优化。</li><li>register：定义一个寄存器变量。 没有内存地址。</li></ul><h2 id="输入输出函数" tabindex="-1"><a class="header-anchor" href="#输入输出函数"><span>输入输出函数</span></a></h2><h3 id="输出函数" tabindex="-1"><a class="header-anchor" href="#输出函数"><span>输出函数</span></a></h3><ul><li>printf(); %d、%c、%x、%u、%s ....</li><li>putchar() 函数：输出一个字符到屏幕。将 ch 对应的字符，输出到屏幕。返回实际写出的字符对应的ASCII值</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 97 == &#39;a&#39;</span>
<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出换行符。</span>
<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用评率高。 printf(&quot;\\n&quot;);</span>
<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;abcZ&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//‘abcZ’是错误的定义，既不是 char 也不是字符串。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="输入函数" tabindex="-1"><a class="header-anchor" href="#输入函数"><span>输入函数</span></a></h3><h4 id="scanf-函数" tabindex="-1"><a class="header-anchor" href="#scanf-函数"><span>scanf 函数</span></a></h4><p>从标准输入设备（键盘）上按格式获取数据。</p><p>安装指定个格式匹配符，获取指定类型数据。</p><ul><li>获取整数</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//scanf(&quot;格式控制字符串“, ......);</span>
参 <span class="token number">1</span>： 必须是字符串，且必须包含 格式说明符（占位符）
格式符 与 数据类型中使用方式一致。 常用的有 <span class="token operator">%</span>d、<span class="token operator">%</span>c、<span class="token operator">%</span>f、<span class="token operator">%</span>lf 等。
后续参数（变参）：个数，直接受 参 <span class="token number">1</span> 格式匹配符影响。
对应 格式符的 必须是 变量地址（<span class="token operator">&amp;</span>变量名，可取变量地址），代表数据存放位置。
<span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment">// 可以定义a变量（有内存空间），也可以声明（自动提升成定义，有内存空间）</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &amp;: 取变量a的地址 ——&gt; 拿到a的内存空间。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// scanf 输入</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//int a = 10;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment">// 在scanf执行时，会提示为定义。</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//scanf可以从键盘获取用户输入，用户根据%d 输入整数。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;获取的a为：%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\\n换行</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 一次性获取多个整数</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span> <span class="token comment">// 一次性创建多个 int 类型变量。</span>
    <span class="token comment">// scanf 可以从键盘获取用户输入， 用户根据 多个%d 输入整数。</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;获取的a为：%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;获取的b为：%d\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;获取的c为：%d\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取字符</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3<span class="token punctuation">;</span> <span class="token comment">// 一定性创建多个 char 变量</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入3个字符，用空格隔分：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c %c %c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch1 = %c\\n&quot;</span><span class="token punctuation">,</span> ch1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch2 = %c\\n&quot;</span><span class="token punctuation">,</span> ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch3 = %c\\n&quot;</span><span class="token punctuation">,</span> ch3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ol><li><p>不要随意在scanf() 函数中添加 ‘\\n’ 。 如果添加了换行符，会被scanf当成格式来约束用户输入</p><ol><li>printf() 中的 ‘\\n’ 用来向屏幕输出 换行。</li><li>scanf() 函数中的 ‘\\n’，不能用来输出。因为这是一个输入函数。</li></ol></li><li><p>解决 VS中使用 scanf函数 报 C4996 错误：</p></li></ol><blockquote><p>以下是错误描述<br> C4996 &#39;scanf&#39;: This function or variable may be unsafe. Consider using scanf_s instead.<br> To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.<br> day04 C:\\itcast\\VSsource\\day04\\02-输出输出函数.c 43</p></blockquote><ol start="3"><li><p>解决方法：</p><ol><li>在 .c 文件的 第一行 添加 #define _CRT_SECURE_NO_WARNINGS</li><li>在项目中设置：工程名→右键→属性→C/C++→预处理器→预处理器定义→编辑→将 _CRT_SECURE_NO_WARNINGS 加入“预处理定义” 中</li></ol></li><li><p>键入数据时，数据个数、类型、顺序，必须与参 1 中占位符一一对应。</p></li><li><p>键入数据时，数据间的分割符，必须与 参 1 中 占位符的分割符一致。</p></li></ol><h4 id="getchar-函数" tabindex="-1"><a class="header-anchor" href="#getchar-函数"><span>getchar 函数</span></a></h4><ul><li>直接从键盘接收 一个字符， 并将得到的字符对应的ASCII返回。如用户键入多个字符，需要多次调用 getchar()读取。函数调用完成，会返回实际读到的字符 对应的 ASCII 值。用户键入字符结束，敲的回车键，对应‘\\n’ 字符，也可以使用 getchar() 读取。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义char 变量 ch，接收 getchar() 函数返回值做为初值。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch的数值：%d\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// %hhd %hd</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch的字符：%c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><ol><li><code>+ - * / </code>: 先 乘除取余，后加减。</li><li>除法运算后，得到的结果赋值给整型变量，取整数部分（舍小数部分）。 int c = 10/20; ---》0 19 / 10=1</li><li>除 0 ：错误操作，不允许。 printf(&quot;%d\\n&quot;, 10/0);</li><li>对0取余：错误操作，不允许。 printf(&quot;%d\\n&quot;, 123 % 0);</li><li>不允许对小数取模。运算数必须是整型。 35 % 3.4;</li><li>对负数取余，结果为余数的绝对值。 printf(&quot;%d\\n&quot;, 10 % -3); ---&gt; 1</li><li>取模% 10%3=1</li><li>两浮点数相除，结果 double 浮点数</li><li>整数和实数相除，自动类型转换为实型</li></ol><h3 id="自增自减运算符" tabindex="-1"><a class="header-anchor" href="#自增自减运算符"><span>自增自减运算符</span></a></h3><ul><li>前缀自增(++)、自减(--)：先自增、自减，再取值。</li><li>后缀自增(++)、自减(--)：先取值，再自增、自减。</li><li>只适用变量，不能用于常量、表达式。</li></ul><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h3><ol><li>“=”, 在计算机中，只能完成 “赋值” 操作，一定是右边赋值给左边，也叫单向赋值符。</li><li>a += 10 // 等价于 a = a+10；</li><li>a -= 30 // 等价于 a = a-30；</li><li>a %= 5； // 等价于 a = a%5；</li></ol><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h3><ul><li>真：1（非0）， 假：0</li><li>== 判等符 （ = 不是用来判等）</li><li>!= 不等</li><li>&lt; 小于</li><li>&lt;= 小于等于</li><li><code>&gt;</code> 大于</li><li><code>&gt;=</code> 大于等于</li><li>【强调】：数学运算 中 <code>13 &lt; var &lt; 16</code> 判断， 在计算机中，要写成：<code>var &gt; 13 &amp;&amp; var &lt; 16;</code></li></ul><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><ul><li>0 为假， 非0 为真。（非0: 1、 27、-9）</li><li>逻辑非(!)：非真为假，非假为真。</li><li>逻辑与(&amp;&amp;)：同真为真，其余为假。</li><li>逻辑或(||)：有真为真，同假为假。</li></ul><h3 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级"><span>运算符优先级</span></a></h3><p>[] () &gt; ++/--（后缀高于前缀） (强转) ! (逻辑非）sizeof &gt; 算数运算符(先乘除取余，后加减) &gt; 比较运算符 &gt; 逻辑运算符 &gt; 三目运算 （条件运算）&gt; 赋值运算符 &gt; 逗号运算符。</p><h3 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符"><span>逗号运算符</span></a></h3><p>含有“，”运算符表达式运算结果，是最后一个子表达式的结果。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x=1, y=2, z=3 是一个逗号运算符表达式。运算结果为 a =3;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 运算结果为 a = 27;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符"><span>三目运算符</span></a></h3><p>语法： 表达式1 ? 表达式2 ：表达式3<br> 表达式1 必须是一个判断表达式。<br> 结果为真：整个三目运算，返回表达式2<br> 结果为假：整个三目运算，返回表达式3<br> 如果不使用（），三目运算默认的结合性，自右向左。</p><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h2><h4 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换"><span>隐式类型转换</span></a></h4><ol><li>编译器自动完成。 （小类型转大类型，同类型大小）</li></ol><figure><img src="https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x028s91fj30c3078t8t.jpg" alt="19.png" tabindex="0"><figcaption>19.png</figcaption></figure><ol start="2"><li>由赋值产生。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> s <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>
<span class="token comment">// 3.14 默认类型double, r 为int类型。运算过程中，转换为 double 类型运算。</span>
<span class="token comment">// 运算结束，赋值给 s 时，转换为 float</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>小类型 ——&gt; 大类型： 没问题。</li><li>大类型 ——&gt; 小类型。可能丢失数据。 <ul><li>VS中 Ctrl+F7 只编译，检查语法错误，不运行。</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 用值为 321 的a变量，给 char 类型赋值。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %d\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 运行输出 65；</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>321： 2^8 = 256 有， 128 没有， 64 有， 32/16/8/4/2 没有， 有1<br> 0000 0000 0000 0000 0000 0001 0100 0001 —— 321 二进制表现形式。<br> 0000 0000 —— char 只有一个字节。<br> 赋值后，char值为：0100 0001 --- 1 + 64 = 65</p><h4 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换"><span>强制类型转换</span></a></h4><ul><li>语法： <ol><li>强转变量： （目标类型）变量</li><li>强转表达式：（目标类型）表达式</li></ol></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">float</span> price <span class="token operator">=</span> <span class="token number">3.6</span><span class="token punctuation">;</span> <span class="token comment">// 单价</span>
    <span class="token keyword">int</span> weight <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 斤数</span>
    <span class="token comment">//int sum = weight * (int)price; // 强转变量。</span>
    <span class="token comment">//printf(&quot;sum = %d\\n&quot;, sum); // --- 12</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>weight <span class="token operator">*</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 强转表达式。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sum = %d\\n&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --- 14</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="if-分支语句" tabindex="-1"><a class="header-anchor" href="#if-分支语句"><span>if 分支语句</span></a></h2><ul><li>分支语句中，可以嵌套其他分支语句</li><li>else 总是找它前面最近的 未配对的 if 组合使用。</li><li>if ... else 分支语句，实现一种模糊匹配。匹配一个范围。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">if</span> （判断表达式）<span class="token punctuation">{</span>
	判别表达式为真，执行的代码。
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
	判别表达式为假，执行的代码。
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>多个分支逻辑</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">if</span>（判断表达式<span class="token number">1</span>）<span class="token punctuation">{</span>
	判别表达式<span class="token number">1</span>为真，执行的代码。
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>判断表达式<span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	判别表达式<span class="token number">1</span>为假，判断表达式<span class="token number">2</span>为真，执行的代码。
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>判断表达式<span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	判别表达式<span class="token number">1</span>为假，判断表达式<span class="token number">2</span>为假，判断表达式<span class="token number">3</span>为真，执行的代码。
<span class="token punctuation">}</span>
。。。
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
	以上所有判别表达式都为假，执行的代码。
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="switch-分支语句" tabindex="-1"><a class="header-anchor" href="#switch-分支语句"><span>switch 分支语句</span></a></h2><ul><li><p>精确匹配。 结构较清晰。较 if 语句执行效率略高。</p></li><li><p>缺点：不能直接判断区间，需要借助表达式运算。</p></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span>：
    	执行语句<span class="token punctuation">;</span>
    	<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 表示一个分支执行结束。跳出 switch。</span>
    <span class="token keyword">case</span> <span class="token number">2</span>：
        执行语句<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 表示一个分支执行结束。跳出 switch。</span>
    	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">case</span> N：
    <span class="token keyword">case</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token comment">//case穿透</span>
        执行语句<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 表示一个分支执行结束。跳出 switch。</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
    	其他情况，执行语句<span class="token punctuation">;</span>（上述所有的<span class="token keyword">case</span>都不满足）
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="case穿透" tabindex="-1"><a class="header-anchor" href="#case穿透"><span>case穿透</span></a></h3><p>一个case分支，如果没有 break；它执行完本case的代码后，会继续执行下一个case 分支代码<br> 大多数情况下，一个case分支对应一个 break;</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>score<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span> <span class="token comment">// 故意让 switch 发生 case穿透</span>
    <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;优秀\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span> <span class="token comment">// 故意让 switch 发生 case穿透</span>
    <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;良好\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;及格\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">// 所有case都不满足的其他情况。</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;不及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="while-循环语句" tabindex="-1"><a class="header-anchor" href="#while-循环语句"><span>while 循环语句</span></a></h2><p>语法</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>判别表达式<span class="token punctuation">)</span> <span class="token comment">// 如果为真，执行循环体，如果为假，跳出循环。</span>
<span class="token punctuation">{</span>
	循环体
    条件控制语句    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>敲7：从 1~ 100 数数，逢 7 和 7 的倍数，敲桌子。<br> 分析：</p><ul><li>7 的倍数：num % 7 == 0</li><li>个位含7： num % 10 == 7</li><li>十位含7： num / 10 == 7</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> num <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">||</span> num <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;敲桌子！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
        	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="do-while-循环语句" tabindex="-1"><a class="header-anchor" href="#do-while-循环语句"><span>do while 循环语句</span></a></h2><p>无论如何先执行一次循环体， 然后再判断循环是否应该继续。<br> 语法：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
	循环体
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>判断表达式<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习：<br> 求 水仙花数。 一个三位数（100~999），各个位上数字的立方 和 等于本数字。<br> 分析：</p><ul><li><p>3位数：100 ~ 999 —— 如： 234、861</p></li><li><p>个位数：int a = num % 10；</p></li><li><p>十位数：int b = num / 10 % 10;</p></li><li><p>百位数：int c = num / 100;</p></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 数数从 100 开始。</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span> <span class="token comment">// 定义存储个位、十位、百位数 的变量。</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        b <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        c <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断 这个数字是否是“水仙花数”</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">+</span> c <span class="token operator">*</span> c <span class="token operator">*</span> c <span class="token operator">==</span> num<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;水仙花数：%d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 不断向后数数。</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-vs2019-快捷导入代码" tabindex="-1"><a class="header-anchor" href="#配置-vs2019-快捷导入代码"><span>配置 VS2019 快捷导入代码</span></a></h3><p>准备 快捷导入代码的脚本文件，保存在系统目录中（位置自定义）<br> 在 VS2019 中配置，使用上述目录中的 脚本文件。<br> 工具 —— 代码片段管理器 —— 修改 Basic 为 Visual C++ —— 选择 上述自定义的目录位置<br> （不需要选择到具体脚本文件）。<br> 在程序中使用 快捷导入代码。<br> #1 ---- tab 键。</p><h2 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>①初始化语句<span class="token punctuation">;</span>②条件判断语句<span class="token punctuation">;</span>③条件控制语句<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	④循环体。
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行流程:1243243<br> ① 执行初始化语句<br> ② 执行条件判断语句，看其结果是否成立<br> 成立:执行循环体语句<br> 不成立:结束循环<br> ③执行条件控制语句<br> ④回到②继续执行条件判断语句</li></ul><p>使用 for 循环 求 1~100 的 和。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 1~100 求和 1+2+3+4+5+。。。+100</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 定义循环因子。</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 定义i，给初值。</span>
    <span class="token comment">// 定义变量 记录累加值</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 初值为 0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 循环结束，打印 累加结果</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sum = %d\\n&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>循环因子 i：<br> 在 for 循环之前定义。 在 for 循环，结束后依然能使用。<br> 定义 在for 循环之内。 for 循环结束后，不能使用！</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 将 i 的定义放到 for 内 表达式1上。</span>
<span class="token punctuation">{</span>
	sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 循环结束，打印 累加结果</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sum = %d， i = %d\\n&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译器保存，“未定义标识符”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>for 循环 3 个表达式，在使用时，均可省略。 但，2 个 “ ; ” 不允许省略。</li></ul><ol><li>省略 表达式1</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 定义 循环因子</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 不写表达式1</span>
<span class="token punctuation">{</span>
	sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>省略 表达式3</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 定义 循环因子</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token comment">// 不写表达式1, 不写表达式3</span>
<span class="token punctuation">{</span>
    sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 将原来的表达式3写到循环体中。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>省略 表达式2</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 定义 循环因子</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token comment">// 不写表达式2, 相当于 for ( ; 1 ; )表达式2为 真(1)。 这是一个死循环。</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i = %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// for ( ; ; ) 死循环 相当于 while(1) {};</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>for 每个表达式中， 可以含有多个算式。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 定义 循环因子</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> a<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">,</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> a<span class="token operator">+=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// i&lt;10, a &lt;20 也可以写成 i&lt;10 &amp;&amp; a&lt;20</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i = %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>死循环</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 方法1：</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 方法2：</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 方法3：</span>
<span class="token keyword">do</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习：<br> 猜数字游戏：产生一个随机数。用户键盘键入一个数据，程序提示用户，输入的数据 &gt; &lt; == 随机数。用户根据提示不断变换输入，最终猜中！<br> 生成随机数：</p><ol><li>添加一个随机数种子。作用：保证随机是真正的随机。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 固定写法。</span>
<span class="token comment">// time(NULL): 获取系统当前时间。返回unsigned long long 类型。从1970年1月1日0:8:8 开始过了1709817925秒的那个时间点</span>
<span class="token comment">// srand() 函数来生成随机数。使用 系统时间为 算法的系数。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>添加头文件</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// srand() --- &lt;stdlib.h&gt;</span>
<span class="token comment">// time() --- &lt;time.h&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>生成随机数。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 随机数范围： 0 ~ 99</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">// 随机数范围： 13 ~ 112</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">63</span> <span class="token operator">+</span> <span class="token number">17</span><span class="token punctuation">;</span> <span class="token comment">// 随机数范围： 0+17 ~ 62+17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 播种随机数种子</span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 生成随机数 n</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 范围 0-99</span>
    <span class="token comment">// 定义 num 变量，存储用户输入的数据。</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token comment">// 创建 死循环，给用户猜数字。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment">// while(1) 等价</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入猜测的数字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 获取用户输入数据</span>
   	 	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 提示用户，测试方向</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> n<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;猜大了！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果 if分支、for、while 满足后，执行语句只有一条时，{} 可以省略。</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>
        	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;猜小了！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 语法允许，不写 {}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
        	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;猜中了！！！\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 不必再循环。</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;本尊数：%d\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套-for-循环" tabindex="-1"><a class="header-anchor" href="#嵌套-for-循环"><span>嵌套 for 循环</span></a></h3><ul><li>外层循环执行一次， 内层循环执行 一周。</li></ul><p>先确定内循环是做了什么事情外循环其实就是把里面的代码重复执行了N次</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 外层循环的循环因子</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 内层循环的循环因子</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token comment">// 循环体</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>模拟电子表打印</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 小时</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 分钟</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 秒</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%02d:%02d:%02d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">980</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;cls&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清屏</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>打印正序 9x9 乘法表</li></ul><p>\\t:制表符 长度可变的大空格，会根据前面字母的个数在后面补空格，让整体的长度达到8或者8的倍数，最少补1个，最多补8个原理:作用:打印表格数据的时候，可以对齐<br> abc\\t 补5个<br> zhangsan\\t 补8个<br> 张\\t补6个</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">1</span>x1<span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 第1行, 打印1列</span>
<span class="token number">1</span>x2<span class="token operator">=</span> <span class="token number">2</span> <span class="token number">2</span>x2<span class="token operator">=</span> <span class="token number">4</span> <span class="token comment">// 第2行，打印2列</span>
<span class="token number">1</span>x3<span class="token operator">=</span> <span class="token number">3</span> <span class="token number">2</span>x3<span class="token operator">=</span> <span class="token number">6</span> <span class="token number">3</span>x3<span class="token operator">=</span> <span class="token number">9</span> <span class="token comment">// 第3行，打印3列</span>
<span class="token number">1</span>x4<span class="token operator">=</span> <span class="token number">4</span> <span class="token number">2</span>x4<span class="token operator">=</span> <span class="token number">8</span> <span class="token number">3</span>x4<span class="token operator">=</span><span class="token number">12</span> <span class="token number">4</span>x4<span class="token operator">=</span><span class="token number">16</span> <span class="token comment">// 第4行，打印4列</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">1</span>x9<span class="token operator">=</span> <span class="token number">9</span> <span class="token number">2</span>x9<span class="token operator">=</span><span class="token number">18</span> <span class="token number">3</span>x9<span class="token operator">=</span><span class="token number">27</span> <span class="token number">4</span>x9<span class="token operator">=</span><span class="token number">36</span> <span class="token number">5</span>x9<span class="token operator">=</span><span class="token number">45</span> <span class="token number">6</span>x9<span class="token operator">=</span><span class="token number">54</span> <span class="token number">7</span>x9<span class="token operator">=</span><span class="token number">63</span> <span class="token number">8</span>x9<span class="token operator">=</span><span class="token number">72</span> <span class="token number">9</span>x9<span class="token operator">=</span><span class="token number">81</span> <span class="token comment">// 第9行，9列</span>
jxi <span class="token operator">=</span>
第 i 行，打印 i 列。
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 外层，描述行。</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 内层，描述每一列。</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%dx%d=%d\\t&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>打印倒序 9x9 乘法表</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token number">1</span>x9<span class="token operator">=</span> <span class="token number">9</span> <span class="token number">2</span>x9<span class="token operator">=</span><span class="token number">18</span> <span class="token number">3</span>x9<span class="token operator">=</span><span class="token number">27</span> <span class="token number">4</span>x9<span class="token operator">=</span><span class="token number">36</span> <span class="token number">5</span>x9<span class="token operator">=</span><span class="token number">45</span> <span class="token number">6</span>x9<span class="token operator">=</span><span class="token number">54</span> <span class="token number">7</span>x9<span class="token operator">=</span><span class="token number">63</span> <span class="token number">8</span>x9<span class="token operator">=</span><span class="token number">72</span> <span class="token number">9</span>x9<span class="token operator">=</span><span class="token number">81</span> <span class="token comment">// 行</span>
<span class="token number">1</span>x8<span class="token operator">=</span> <span class="token number">8</span> <span class="token number">2</span>x8<span class="token operator">=</span><span class="token number">16</span> <span class="token number">3</span>x8<span class="token operator">=</span><span class="token number">24</span> <span class="token number">4</span>x8<span class="token operator">=</span><span class="token number">32</span> <span class="token number">5</span>x8<span class="token operator">=</span><span class="token number">40</span> <span class="token number">6</span>x8<span class="token operator">=</span><span class="token number">48</span> <span class="token number">7</span>x8<span class="token operator">=</span><span class="token number">56</span> <span class="token number">8</span>x8<span class="token operator">=</span><span class="token number">64</span>
<span class="token number">1</span>x7<span class="token operator">=</span> <span class="token number">7</span> <span class="token number">2</span>x7<span class="token operator">=</span><span class="token number">14</span> <span class="token number">3</span>x7<span class="token operator">=</span><span class="token number">21</span> <span class="token number">4</span>x7<span class="token operator">=</span><span class="token number">28</span> <span class="token number">5</span>x7<span class="token operator">=</span><span class="token number">35</span> <span class="token number">6</span>x7<span class="token operator">=</span><span class="token number">42</span> <span class="token number">7</span>x7<span class="token operator">=</span><span class="token number">49</span>
<span class="token number">1</span>x6<span class="token operator">=</span> <span class="token number">6</span> <span class="token number">2</span>x6<span class="token operator">=</span><span class="token number">12</span> <span class="token number">3</span>x6<span class="token operator">=</span><span class="token number">18</span> <span class="token number">4</span>x6<span class="token operator">=</span><span class="token number">24</span> <span class="token number">5</span>x6<span class="token operator">=</span><span class="token number">30</span> <span class="token number">6</span>x6<span class="token operator">=</span><span class="token number">36</span>
<span class="token number">1</span>x5<span class="token operator">=</span> <span class="token number">5</span> <span class="token number">2</span>x5<span class="token operator">=</span><span class="token number">10</span> <span class="token number">3</span>x5<span class="token operator">=</span><span class="token number">15</span> <span class="token number">4</span>x5<span class="token operator">=</span><span class="token number">20</span> <span class="token number">5</span>x5<span class="token operator">=</span><span class="token number">25</span>
<span class="token number">1</span>x4<span class="token operator">=</span> <span class="token number">4</span> <span class="token number">2</span>x4<span class="token operator">=</span> <span class="token number">8</span> <span class="token number">3</span>x4<span class="token operator">=</span><span class="token number">12</span> <span class="token number">4</span>x4<span class="token operator">=</span><span class="token number">16</span>
<span class="token number">1</span>x3<span class="token operator">=</span> <span class="token number">3</span> <span class="token number">2</span>x3<span class="token operator">=</span> <span class="token number">6</span> <span class="token number">3</span>x3<span class="token operator">=</span> <span class="token number">9</span>
<span class="token number">1</span>x2<span class="token operator">=</span> <span class="token number">2</span> <span class="token number">2</span>x2<span class="token operator">=</span> <span class="token number">4</span>
<span class="token number">1</span>x1<span class="token operator">=</span> <span class="token number">1</span>
jxi <span class="token operator">=</span> 值

<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment">// i 控制 行</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%dx%d=%d\\t&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 上述省略{}写法无误， 不推荐。--- 推荐下面的写法。</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%dx%d=%d\\t&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// printf(&quot;\\n&quot;);</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>求整数n是否是2的幂次方</li></ul><p>规则:任意的一个数字，不断的除以2，最终都会得到数字1</p><p>结果是1时候，就可以结束了 yes<br> 结果无法被2再次整除了，也可以结束了，no</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int main(){
	int n = 123;
	while(n &gt; 1 &amp;&amp; n % 2 == 0){
		n = n / 2;
	}
	return n == 1;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>求1-100内质数的个数</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//统计从2开始，到number-1.在这个范围之内，有多少个数字能被number整除</span>
    <span class="token keyword">int</span> countA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//找到了一个数字能被number整除</span>
                count<span class="token operator">++</span><span class="token operator">:</span>
                <span class="token comment">//后面其他的数字就没有必要再次判断了</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//33</span>
            <span class="token punctuation">}</span>

            <span class="token comment">//对countA进行判断</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                countA<span class="token operator">++</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">prinf</span><span class="token punctuation">(</span>&quot;质数个数：<span class="token operator">%</span>d\\&quot;<span class="token punctuation">,</span> countA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-和-while-的区别" tabindex="-1"><a class="header-anchor" href="#for-和-while-的区别"><span>for 和 while 的区别</span></a></h2><ul><li>for循环中:知道循环次数或者循环的范围</li><li>while循环:不知道循环的次数和范围，只知道循环的结束条件</li></ul><h2 id="跳转语句" tabindex="-1"><a class="header-anchor" href="#跳转语句"><span>跳转语句</span></a></h2><h3 id="break" tabindex="-1"><a class="header-anchor" href="#break"><span>break</span></a></h3><p>作用1：一次break，可以跳出一重循环。( for、while、do while )<br> 作用2：防止 case 穿透。 结束 switch();</p><h3 id="continue" tabindex="-1"><a class="header-anchor" href="#continue"><span>continue</span></a></h3><p>作用：结束 本次 循环。continue关键字之后的代码，在这次循环中，不执行。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
            	<span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 只跳出（后续代码代码不执行）本次 j == 3 时的循环，</span>
            <span class="token punctuation">}</span>
            	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i = %d, j= %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="goto" tabindex="-1"><a class="header-anchor" href="#goto"><span>goto</span></a></h3><p>语法：</p><ol><li>设定一个标签。标签名自定义，一般大写。如：ABC、 LABLE、AAA</li><li>使用 “goto 标签名” 跳转到标签的位置。（只函数内生效）</li><li>goto 语法过于灵活，会打乱程序的执行逻辑，降低代码的 可读性。 后续编程中，尽量少用。<br> C 程序中，简单的逻辑可以使用 goto。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;==========1=========\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;==========2=========\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;==========3=========\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> LABLE<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;==========4=========\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;==========5=========\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;==========6=========\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;==========7=========\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LABLE<span class="token operator">:</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;==========8=========\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;==========9=========\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><ul><li><p>概念：相同数据类型有序的、连续的存储集合。</p></li><li><p>%p：打印变量内存地址 格式匹配符 (占位符)</p></li><li><p>基本特性</p></li></ul><ol><li>各个元素，连续存储。</li><li><strong>数组名为地址</strong>，是数组首个元素的地址。<code>arr == &amp;arr[0]</code></li><li>求数组的总大小：<code>printf(&quot;数组的大小：%u\\n&quot;, sizeof(arr));</code></li><li>求数组每一个元素的大小：<code>printf(&quot;数组元素的大小：%u\\n&quot;, sizeof(arr[0]));</code></li><li>求数组元素的个数：<code>printf(&quot;数组元素的个数：%d\\n&quot;, sizeof(arr)/sizeof(arr[0]));</code></li><li>数组第一个元素的下标： 0</li><li>数组最后一个元素的下标：<code>sizeof(arr)/sizeof(arr[0]) - 1</code></li><li>数组元素：arr[0]</li><li>arr参与计算的时候，会退化为第一个元素的指针，包括赋值 <ol><li>sizeof 运算的时候，不会退化，arr还是整体</li><li>&amp;arr获取地址的时候，不会退化</li><li>步长 = 数据类型 * 数组长度</li></ol></li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 1.定义数组
int arr[]={1,2,3,4,5,6,7,8,9,10};
//2.sizeof 运算的时候，不会退化，arr还是整体
printf(&quot;%zu\\n&quot;，sizeof(arr));//40
//3.&amp;arr获取地址的时候，不会退化，记录的内存地址第一个元素的首地址，也是数组的首地址，步长:数据类型 *数组的长度 40
//arr参与计算的时候，会退化为第一个元素的指针,记录的内存地址第一个元素的首地址，也是数组的首地址，步长:数据类型 int 4
printf(“%p\\n&quot;,arr);
printf(&quot;%p\\n&quot;，&amp;arr);

printf(&quot;%p\\n&quot;,arr +1);//4
printf(&quot;%p\\n&quot;，&amp;arr+1);//40
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组初始化</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 初始化方法1</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化方法2【多用】</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 剩余未初始化的元素，默认值 0</span>
<span class="token comment">// 初始化方法3【多用】</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 初始化一个 全部元素为 0 的数据。 ---清0 常用。</span>
<span class="token comment">// 初始化方法4【多用】</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 编译器会自动求取数组元素个数。</span>
<span class="token comment">// 初始化方法5</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 定义了只有一个元素的数组，值为 0</span>
<span class="token comment">// 初始化方法6【多用】</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 声明了一个有10个元素数组。</span>
    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// 剩余未初始化的元素，默认值 —— 随机数。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组元素逆序</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 变为：{2, 9, 3, 4, 0, 8, 6, 1}</span>
    <span class="token comment">// 获取数组的元素个数</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 从前向后</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 从后向前</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 定义临时变量。</span>
    <span class="token comment">// 交换数组元素之前，打印数组的所有元素。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 循环交换数组元素。</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 三杯水变量交换法</span>
    	arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    	arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    	i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 不断后移</span>
    	j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 不断前移</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 交换数组元素之后，打印数组的所有元素。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序"><span>冒泡排序</span></a></h2><figure><img src="https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x16cu8f7j30ku0atdh2.jpg" alt="20.png" tabindex="0"><figcaption>20.png</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>
    <span class="token keyword">int</span> xjp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 求取数组元素个数。</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>xjp<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>xjp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开始排序。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 外层控制行</span>
    <span class="token punctuation">{</span>
    	<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 内层控制列。</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 相邻两两比较，三杯水交换</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>xjp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> xjp<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                tmp <span class="token operator">=</span> xjp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                xjp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> xjp<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                xjp<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 打印排序结果。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> xjp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二维数组" tabindex="-1"><a class="header-anchor" href="#二维数组"><span>二维数组</span></a></h2><ul><li>定义语法</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span>行<span class="token punctuation">]</span><span class="token punctuation">[</span>列<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>数组元素<span class="token punctuation">}</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 第0行</span>
    <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span> <span class="token comment">// 第1行</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 常规写法：</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 第二种写法</span>
<span class="token number">1.</span>定义<span class="token number">3</span>个一维数组
<span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//2.把三个一维数组放入到二维数组当中</span>
<span class="token comment">//数组的数据类型，跟内部存储的元素类型保持一致</span>
<span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span>arr3<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 预先计算每一个数组真实的长度</span>
<span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> len3 <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
    
<span class="token comment">//再定义一个数组，装所有数组的长度</span>
<span class="token keyword">int</span> lenrr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>len1<span class="token punctuation">,</span>len2<span class="token punctuation">,</span>len3<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//2.把三个一维数组放入到二维数组当中</span>
<span class="token comment">//数组的数据类型，跟内部存储的元素类型保持一致</span>
<span class="token comment">// arr1:使用数组名进行计算的时候，退化为指向第一个元素的指针，此时不再表示数组的那个整体了</span>
<span class="token comment">//指针---内存地址64位win 8个字节</span>

<span class="token comment">//3.利用索引遍历arr</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//i:依次表示二维数组的索引 0 1 2</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span> lenArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//2.利用指针遍历二维数组</span>
<span class="token comment">//获取二维数组的指针</span>
<span class="token comment">// 数组指针的数据类型:要跟数组内部元素的类型保持一致</span>
<span class="token comment">//二维数组里面存储的是一维数组int[5]</span>
<span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 遍历一维数组</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span>&quot;<span class="token operator">%</span>d，<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// 换行</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 移动二维数组的指针，继续遍历下一个-维数组</span>
    p<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
               
<span class="token comment">//1.定义三个-维数组</span>
<span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">2222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//2.把三个一维数组的内存地址，再放入到二维数组当中</span>
<span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> arr3<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//3.获取指针</span>
<span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> p<span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token comment">// 4.遍历数组</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>intj<span class="token operator">=</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>d“，<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 换行</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移动指针</span>
    p<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>打印</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 自动补齐的 for 自带的 size_t 来源：</span>
查看：方法<span class="token number">1</span>：右键 —— 转到定义
方法<span class="token number">2</span>：F12
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token class-name">size_t</span><span class="token punctuation">;</span> <span class="token comment">// 给 unsigned int 起别名，叫 size_t</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment">// 打印 2 维数组方法：</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 行</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 列</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>特性</p><ul><li>数组大小<code>printf(&quot;数组大小：%u\\n&quot;, sizeof(arr));</code></li><li>一行大小<code>printf(&quot;数组一行大小：%u\\n&quot;, sizeof(arr[0]));</code></li><li>一个元素大小<code>printf(&quot;数组一个元素大小：%u\\n&quot;, sizeof(arr[0][0]));</code></li><li>行数<code>int row = sizeof(arr) / sizeof(arr[0]); // 数组总大小 / 每行大小</code></li><li>列数<code>int col = sizeof(arr[0]) / sizeof(arr[0][0]); // 一行大小 / 每个元素大小</code></li><li>地址合一 <ul><li><code>数组的地址 == 数组的首元素地址 == 数组的首行地址</code></li><li><code>printf(&quot;%p\\n&quot;, arr); // 数组的首地址</code></li><li><code>printf(&quot;%p\\n&quot;, arr[0]); // 数组首行地址</code></li><li><code>printf(&quot;%p\\n&quot;, &amp;arr[0][0]); // 数组首元素的地址</code></li></ul></li></ul></li><li><p>初始化</p><ul><li>常规初始化 <code>int arr[3][5] = { {2, 3, 54, 56, 7}, {2, 67, 4, 35, 9}, {1, 4, 9, 3, 78}};</code></li><li>不完全初始化</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 未被初始化的数值，为0</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 初值全部为0的二维数组</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//【少见】系统自动分配行列</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不完全指定行列初始化</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 【错误】 <span class="token comment">// 二维数组定义，至少需要指定 列值。</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 可以不指定行值。</span>
<span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 行</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 列</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习：求出5名学生3门功课的总成绩。（总成绩：一个学生的总成绩。一门功课的总成绩）</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> scores<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 5个学生， 3门功课</span>
    <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 5 个学生 3门功课成绩</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 一门功课的总成绩</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 一次取出，每个学生的 一门功课</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 累加每门功课的分数。</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 每门功课第几个学生</span>
        <span class="token punctuation">{</span>
        	sum <span class="token operator">+=</span> scores<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;第%d门功课总成绩：%d\\n&quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 求每个学生的总成绩</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 每个学生</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 累加每个学生的成绩。</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 每个学生的成绩</span>
        <span class="token punctuation">{</span>
        	sum <span class="token operator">+=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// sum = sum + scores[i][j];</span>
        <span class="token punctuation">}</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;第%d个学生的总成绩为：%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//printf(&quot;---------------------------------\\n&quot;);</span>
    <span class="token comment">//// 打印 5 个学生 3门功课成绩</span>
    <span class="token comment">//for (size_t i = 0; i &lt; row; i++)</span>
    <span class="token comment">//{</span>
        <span class="token comment">// for (size_t j = 0; j &lt; col; j++)</span>
        <span class="token comment">// {</span>
        <span class="token comment">// 		printf(&quot;%d &quot;, scores[i][j]);</span>
        <span class="token comment">// }</span>
    	<span class="token comment">// printf(&quot;\\n&quot;);</span>
    <span class="token comment">//}</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多维数组-了解" tabindex="-1"><a class="header-anchor" href="#多维数组-了解"><span>多维数组(了解)</span></a></h2><p>三维数组： <code>[层][行][列]</code></p><ul><li>语法： <code>类型名 数组名[层][行][列]</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 第0行</span>
        <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 第1行</span>
        <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">// 第2行</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 第0层</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 第0行</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 第1行</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 第2行</span>
    <span class="token punctuation">}</span> <span class="token comment">// 第1层</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>打印：</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">{</span><span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token number">311</span><span class="token punctuation">,</span> <span class="token number">419</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 层</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 行</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 列</span>
            <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>int arr[2][3][4] = {1,2,3,4,5,6,7,8,9};</code><br><code>int arr[][3][4] = {1,2,3,4,5,6,7,8,9}; // 层数，可以省略。</code><br><code>数组首地址 == 首层地址 == 首层首行地址 == 首元素地址。</code><br><code>4维、5维、6维、。。。。。N维</code><br><code>int arr[2</code>][3]<br><code>short arr[2][3]</code><br><code>float arr[2]</code><br><code>long long arr[2][3][5]</code></p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><ul><li>一串字符。C语言中，一定使用 ‘\\0’ 结束。</li></ul><h3 id="字符数组和字符串的区别" tabindex="-1"><a class="header-anchor" href="#字符数组和字符串的区别"><span>字符数组和字符串的区别</span></a></h3><ul><li><p>字符数组 <code>char str1[5] = {&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;}; // 不是字符串，没有 \\0</code></p></li><li><p>字符串</p></li></ul><p><code>char str1[] = &quot;abc&quot;;//在底层，实际存储的时候，c语言会把字符串&quot;abc&quot;转换成字符数组进行保存，并且在末尾还要再加上\\0{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,\\0 };</code></p><p><code>char str2[6] = {&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;\\0&#39;}; 【麻烦】</code><br><code>char str3[6] = &quot;hello&quot;; // 自动带有 \\0 结束标志。</code></p><ul><li>内存占用大小的计算方式: <ul><li>英文:1个字母，符号，数字占用一个字节</li><li>中文:在vs或者vc中，默认情况下，一个中文占用两个字节</li><li>结束标记:1个字节</li></ul></li><li>数组的长度，要么不写，如果要写的话，记得要把结束标记的空间给预留出来</li><li>字符数组 +双引号的方式定义字符串，内容是可以发生改变的，会把底层的字符数组放在只读常量区，只读常量区特点:内容不可以修改。里面定义的字符串是可以复用的</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>&#39;<span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>

str1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;Q&#39;</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> str2 <span class="token operator">=</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> str3 <span class="token operator">=</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//地址完全一样</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span>，str3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串输出" tabindex="-1"><a class="header-anchor" href="#字符串输出"><span>字符串输出</span></a></h3><ul><li>printf( “ %s ” )：打印字符串，从字符串的第一个字符顺序向后打印，打印到 ‘\\0’ 结束</li><li><code>‘a&#39; != “a” (‘a’,’\\0’)</code></li><li><code>‘abc’ 是一个错误定义！既不是字符串，也不是有效字符。</code></li></ul><h3 id="其他格式匹配符" tabindex="-1"><a class="header-anchor" href="#其他格式匹配符"><span>其他格式匹配符</span></a></h3><ul><li><p>%Ns：显示 N个字符的字符串，不足N用空格向右填充。<code>printf(&quot;|%9s|\\n&quot;, str);</code></p></li><li><p>%0Ns：显示 N个字符的字符串，不足N用0向左填充。<code>printf(&quot;|%09s|\\n&quot;, str);</code></p></li><li><p>%-Ns:显示 N个字符的字符串，不足N用空格向左填充。<code>printf(&quot;|%-9s|\\n&quot;, str);</code></p></li><li><p>%%: 与字符串无直接关系。</p><ul><li>显示一个%， 转义字符 ’\\‘ ， 对%无效。转义%，使用%本身。</li><li>输出【10 % 3 = 1】： <code>printf(&quot;10 %% 3 = 1\\n&quot;);</code></li></ul></li></ul><p>练习：键盘输入字符串，存至str[]中，统计每个字母出现的次数。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 定义有10个元素的字符数组，初值均为0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// helloworld</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 定义一个有26个元素的数组，初始化成 0</span>
    <span class="token keyword">char</span> count<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 代码26个英文字符出现的次数。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 提取每个字符，在 count 表中对应的下标。</span>
        count<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 向对应字符，位置++，代表该字符出现了一次。</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 循环遍历 count 数组，打印出每个字符，出现的次数。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 0 == \\0</span>
        <span class="token punctuation">{</span>
        	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c字符，在字符串%s中，出现了%d次\\n&quot;</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scanf-获取字符串" tabindex="-1"><a class="header-anchor" href="#scanf-获取字符串"><span>scanf 获取字符串</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 定义字符串存储的空间，保证足够大。</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><ul><li>用于存储字符串的空间，必须足够大！防止溢出。</li><li>%s 遇到 空格 和 \\n 终止。</li><li>借助 “正则表达式”， 可以获取带有空格的字符串。<code> scanf(“%[^\\n]”, str);</code></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">-</span> 获取 “hello world haha xixi” 字符串
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span>， str<span class="token punctuation">)</span><span class="token punctuation">;</span> ———— 输出 hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串操作函数" tabindex="-1"><a class="header-anchor" href="#字符串操作函数"><span>字符串操作函数</span></a></h3><h4 id="gets" tabindex="-1"><a class="header-anchor" href="#gets"><span>gets</span></a></h4><p>从 (键盘) 标准输入 stdin 获取字符串。返回字符串首地址， 可以获取带有空格的字符串，不保存<br> \\n , 将其替换为 \\0</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">gets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char * 等价于 char []</span>
    参数：用来存储字符串的空间地址。
    返回值：返回实际获取到的字符串的首地址。
<span class="token comment">// 示例</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;获取的字符串为：%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fgets" tabindex="-1"><a class="header-anchor" href="#fgets"><span>fgets</span></a></h4><p>从 (键盘) 标准输入 stdin 获取字符串。一定会给字符串预留\\0空间。 可以获取带有空格的字符<br> 串。如果空间足够，保留\\n , 如果空间不足，不保留\\n。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char * 等价于 char []</span>
    参<span class="token number">1</span>：用来存储字符串的空间地址。
    参<span class="token number">2</span>：空间的大小。（严格对应实际空间的大小）
    参<span class="token number">3</span>：读取字符串的位置。 —— <span class="token constant">stdin</span>（键盘）
    返回值：返回实际获取到的字符串的首地址。
<span class="token comment">// 示例：</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;获取到的字符串为：%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="puts" tabindex="-1"><a class="header-anchor" href="#puts"><span>puts</span></a></h4><p>将字符串输出到 屏幕 标准输出 stdout。 输出后会自动向屏幕输出 \\n</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// printf(“%s\\n”, “hello”)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char * 等价于 char []</span>
    参：待 写入到屏幕的字符串。
    返回值：
    	成功：<span class="token number">0</span>， 失败：<span class="token operator">-</span><span class="token number">1</span>
<span class="token comment">// 示例：</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fputs" tabindex="-1"><a class="header-anchor" href="#fputs"><span>fputs</span></a></h4><p>将字符串输出到 屏幕 标准输出 stdout。不自动添加 \\n 字符。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char * 等价于 char []</span>
    参<span class="token number">1</span>： 待写出到屏幕的字符串。
    参<span class="token number">2</span>： 写出的位置。—— <span class="token constant">stdout</span> 标准输出。屏幕。
    返回值：
    成功：<span class="token number">0</span>， 失败：<span class="token operator">-</span><span class="token number">1</span>
<span class="token comment">// 示例：</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="strlen" tabindex="-1"><a class="header-anchor" href="#strlen"><span>strlen</span></a></h4><p>获取一个字符串有效字符个数（字符串的长度）。 不含\\0 ( 碰到 \\0 结束 )</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token class-name">size_t</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    参：待 求长度的字符串
    返回：有效字符个数
<span class="token comment">// 示例：</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;有效长度=%u\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不含有 \\0 长度</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sizeof=%u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//含有 \\0 长度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现 strlen 函数</p><div class="language-C line-numbers-mode" data-ext="C" data-title="C"><pre class="language-C"><code>int main(void)
{
    char str[] = &quot;hello world&quot;;
    int i = 0;
    while (str[i] != &#39;\\0&#39;)
    {
    	i++;
    }
    printf(&quot;不含\\\\0的字符串长度为：%d\\n&quot;, i);
    printf(&quot;strlen = %d\\n&quot;, strlen(str)) ;
    system(&quot;pause&quot;);
    return EXIT_SUCCESS;
}

//2.遍历字符串得到每一个字符
char* p= str;
while(1){
    // 利用指针获取字符串中的每一个字符，直到遇到\\0为止
    char c = *p;
    if(c == &#39;\\0&#39;){
        break;
    }
    printf(&quot;%c\\n&quot;,c);
    p++;//指针往后
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串追加" tabindex="-1"><a class="header-anchor" href="#字符串追加"><span>字符串追加</span></a></h3><div class="language-C line-numbers-mode" data-ext="C" data-title="C"><pre class="language-C"><code>int main(void)
{
    char str1[] = &quot;hello&quot;;
    char str2[] = &quot;world&quot;;
    char str3[100];
    // 循环将 str1 中的字符，依次写入到 str3 中
    int i = 0;
    while (str1[i] != &#39;\\0&#39;)
    {
    	str3[i] = str1[i];
    	i++;
    } // 循环结束，str3 =【hello】无 \\0
    // printf(&quot;i = %d\\n&quot;, i); --- 循环结束为 5 。
    int j = 0; // 循环 str2
    // 循环将 str2 中的字符，接着str1的内容顺序写入到 str3 中
    while (str2[j]) // while(str2[i] != 0) == while (str2[i] != &#39;\\0&#39;)
    {
    	str3[i+j] = str2[j];
    	j++;
    } // 循环结束，str3 =【helloworld】无 \\0
    // 手动添加 \\0 结束标记
    str3[i + j] = &#39;\\0&#39;;
    printf(&quot;str3 = %s\\n&quot;, str3);
    system(&quot;pause&quot;);
    return EXIT_SUCCESS;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h3 id="函数的作用" tabindex="-1"><a class="header-anchor" href="#函数的作用"><span>函数的作用</span></a></h3><ul><li>提高代码复用率。提高程序模块化组织性。</li></ul><h3 id="函数分类" tabindex="-1"><a class="header-anchor" href="#函数分类"><span>函数分类</span></a></h3><ul><li>系统库函数：标准C库。 libc <ul><li>必须要引入头文件 #include &lt;xxx.h&gt; ---- 函数声明。</li><li>根据函数库函数原型，调用函数。</li></ul></li><li>用户自定义函数： <ul><li>bubble_sort()、myPrint()</li><li>除了需要提供函数原型之外，还需要提供函数实现。</li></ul></li></ul><h3 id="使用函数" tabindex="-1"><a class="header-anchor" href="#使用函数"><span>使用函数</span></a></h3><h4 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义"><span>函数定义</span></a></h4><ul><li>必须包含 “函数原型” 和 “函数体” <ul><li>函数原型： 返回值类型 + 函数名 + 形参列表（形式参数列表。 一定包含：类型名、形参名）。</li><li>函数体：一对 {} 包裹函数实现。</li></ul></li></ul><h4 id="函数声明" tabindex="-1"><a class="header-anchor" href="#函数声明"><span>函数声明</span></a></h4><ul><li>包含：函数原型( 返回值类型 + 函数名 + 形参列表) + “;”</li><li>要求，在函数调用之前，编译器，必须见过函数定义。否则需要函数声明。</li><li>如果，没有函数声明，编译默认做 “隐式声明”。 <ul><li>隐式声明：【不要依赖】 <ul><li>编译认为所有的函数，返回值都是 int 。</li><li>可以根据函数调用，推测函数原型。</li></ul></li></ul></li><li>#include &lt;xxx.h&gt; 内部，包含 函数声明。</li></ul><h4 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用"><span>函数调用</span></a></h4><ul><li>包含：函数名(实参列表); <ul><li>实参（实际参数）：在调用时，传参必须严格按照形参填充。（参数个数、类型、顺序）</li><li>实参 在调用时，没有 类型描述符。</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 函数声明</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 函数定义</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//函数调用</span>
<span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exit-函数" tabindex="-1"><a class="header-anchor" href="#exit-函数"><span>exit 函数</span></a></h3><p>return 关键字：返回当前函数调用。将返回值返回调用者。（ 在底层，会调用 _exit() 函数。）<br> exit() 函数：退出当前程序</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 函数声明</span>
<span class="token comment">// int test(int a, char ch);</span>
<span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数声明de 简化写法。 声明时，形参名 可以省略。</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 函数调用</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// test函数，调用结束，return 给 main</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test函数返回：ret = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// return 0; // 返回给调用者（启动例程）—— 作用：结束程序。</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结束程序。</span>
<span class="token punctuation">}</span>
<span class="token comment">// 函数定义</span>
<span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// return 97; // 返回给调用者，程序不结束。</span>
    <span class="token comment">// 结束程序</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 #include &lt;stdlib.h&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多文件编程" tabindex="-1"><a class="header-anchor" href="#多文件编程"><span>多文件编程</span></a></h2><ul><li><p>头文件守卫：为了防止头文件被重复包含。 --- head.h</p></li><li><p><code>#pragma once</code> 是 VS自动生成的。 只应用于 windows系统。</p></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_HEAD_H_ </span><span class="token comment">// 习惯写成这样。</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_HEAD_H_</span></span>
。。。头文件内容：#include <span class="token operator">&lt;</span>xx<span class="token punctuation">.</span>h<span class="token operator">&gt;</span><span class="token operator">/</span>宏定义 #define PI <span class="token number">3.14</span><span class="token operator">/</span>函数声明<span class="token operator">/</span>类型定义
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token comment">// 示例：</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_HEAD_H_ </span><span class="token comment">// 标准引入“头文件守卫”</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_HEAD_H_</span></span>
<span class="token comment">// include 头文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>
<span class="token comment">// 函数声明</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 宏定义</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span></span></span>
<span class="token comment">// 类型定义</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;&gt; </code>包谷的是 系统库头文件。<br><code>“”</code> 包裹的是，用户自定义头文件。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// main函数所在的 .c 文件中：</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;head.h&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针" tabindex="-1"><a class="header-anchor" href="#指针"><span>指针</span></a></h2><h3 id="指针和内存单元" tabindex="-1"><a class="header-anchor" href="#指针和内存单元"><span>指针和内存单元</span></a></h3><ul><li>指针：地址！</li><li>指针变量（*p = 0x10101）：用存储地址的变量！</li><li>内存单元：是计算机中内存最小的存储单位。 内存单元大小 —— 1字节(8bit位)。 <ul><li>每个内存单元，都有一个唯一的编号。</li><li>这个内存单元的编号，称为 “地址”</li></ul></li><li>&amp;p 地址占位符</li></ul><h3 id="指针的作用" tabindex="-1"><a class="header-anchor" href="#指针的作用"><span>指针的作用</span></a></h3><ul><li>作用1:操作其他函数中的变量</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
｛
    <span class="token comment">//定义两个变量，要求交换变量中记录的值注意:交换的代码写在一个新的函数swap中</span>
    <span class="token comment">//1.定义两个变量</span>
    <span class="token keyword">int</span> a<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.调用swap函数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;调用前:%d，%d&quot;</span>，a，b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a，<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;调用后:%d，%d&quot;</span>，a，b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
｝
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> p2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//此时交换的是p1指向的变量和p2指向的变量的值</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
    <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>
    <span class="token operator">*</span>p2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int main(){
    //调用method函数，并使用该函数中的变量a 
    int*p = method();
    printf(“拖点时间\\n”);
    printf(&quot;拖点时间\\n”)
    printf(“拖点时间间\\n”);
    printf(&quot;拖点时间\\n&quot;)
    printf(&quot;拖点时间\\n&quot;)
    printf(&quot;拖点时间\\n&quot;);
    printf(&quot;拖点时间\\n”);
    printf(&quot;拖点时间\\n&quot;);
    printf(&quot;%d\\n&quot;，*p);//不能打印的，因为method函数结束之后，那么该函数里面所有的变量也会随之消失
    return 0;
}
int* method()
{
    int a= 10;
    return &amp;a;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>作用2:函数返回多个值</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">getMaxAndMin</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> max<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> min<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//求数组的最大值</span>
	<span class="token operator">*</span>max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">*</span>max<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token operator">*</span>max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>	
    <span class="token comment">//求数组的最小值</span>
    <span class="token operator">*</span>min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span> <span class="token operator">*</span>min<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token operator">*</span>min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>作用3:函数的结果和计算状态分开</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>定义一个函数，将两数相除，获取他们的余数
<span class="token comment">//返回值:表示计算的状态0正常1不正常</span>
<span class="token keyword">int</span> <span class="token function">getRemainder</span><span class="token punctuation">(</span><span class="token keyword">int</span> numl<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> res<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>num2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 停止</span>
    	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>res <span class="token operator">=</span> num1 <span class="token operator">%</span>num2<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>作用4:方便地操作数组和函数</li></ul><h3 id="指针的定义和使用" tabindex="-1"><a class="header-anchor" href="#指针的定义和使用"><span>指针的定义和使用</span></a></h3><figure><img src="https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3y7m40bhpj30kv09rmy1.jpg" alt="41.png" tabindex="0"><figcaption>41.png</figcaption></figure><ul><li>指针变量的数据类型要跟指向变量的类型保持一致</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//int* p --- windows int *p ---Linux int * p 依据个人习惯，这个*代表标记</span>
<span class="token comment">// int *p = &amp;a; 展开：</span>
<span class="token comment">// int *p;</span>
<span class="token comment">// p = &amp;a;</span>
a <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*p = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 间接引用 —— 右值。这个*代表解引用运算符</span>
<span class="token comment">// 解引用、间接引用。</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span> <span class="token comment">// 间接引用 —— 左值。</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>给指针变量赋值的时候，不能把一个数值赋值给指针变量</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//正确</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> p<span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>错误
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>*p 作用： <ul><li>将 p 变量的内容，取出，当成地址看待。找到该地址对应的内存空间。 <ul><li>如果做左值，存储数据到空间中。</li><li>如果做右值，取出空间中的内容。</li></ul></li></ul></li><li>指针类型大小。（ 指针，算一种自定义数据类型。int * ）与类型无关！只与当前使用的平台架构/编译器有关（32位：4字节、64位：8字节）。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;int *的大小：%u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;short *的大小：%u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;char *的大小：%u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;long *的大小：%u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;long long *的大小：%u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一条语句同时定义多个指针变量、普通变量</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span> <span class="token comment">// 多个普通变量</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token operator">*</span>p2<span class="token punctuation">,</span> <span class="token operator">*</span>p3<span class="token punctuation">;</span> <span class="token comment">// 多个指针变量。 每个变量都有有一个自己的 *</span>
<span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> d<span class="token punctuation">;</span> <span class="token comment">// 定义整型变量a、d， 同时定义指针变量 b、c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="野指针" tabindex="-1"><a class="header-anchor" href="#野指针"><span>野指针</span></a></h3><ol><li>没有使用 “有效” 的地址，给指针初始化。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span> <span class="token comment">//没有给 p 指定一个有效地址。</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>p指针变量有值，但该值不是一个有效的地址。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 没有给 p 指定一个有效地址。</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>指针指向的空间未分配</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//野指针:指针指向的空间未分配</span>
<span class="token keyword">int</span> a<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span>&quot;<span class="token operator">%</span>d\\n”<span class="token punctuation">,</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// p2 野指针</span>
<span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> p1 <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>，<span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>编程时杜绝野指针。</li></ol><h3 id="空指针" tabindex="-1"><a class="header-anchor" href="#空指针"><span>空指针</span></a></h3><ol><li>NULL == 0 == \\0</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// #define NULL ((void *)0) // 定义一个空指针。</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// *p 所指向的内存空间，是一个 “无效访问区域”。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>指针指向的空间已分配，但是被释放了</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> p2<span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拖时间</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型指针-万能指针-void" tabindex="-1"><a class="header-anchor" href="#泛型指针-万能指针-void"><span>泛型指针 (万能指针 void *)</span></a></h3><ul><li>无法获取数据，无法计算。可以接受任意一种变量的地址。 但是使用时【必须】借助 “强制类型转换” 具体化数据类型。</li><li>void * 类型的大小：32位：4字节。 64位：8字节。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;void *的大小：%u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;R&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">;</span> <span class="token comment">// 泛型指针(万能指针)</span>
    p <span class="token operator">=</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*p = %c&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将p变量类型，由void* 强转成 char *</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//1.定义两个变量
int a = 10;
short b=20;
//2.定义两个指针
int* p1 = &amp;a;
short* p2 = &amp;b;
//3.输出打印
printf(“%d\\n&quot;,*p1);
printf(&quot;%d\\n&quot;,*p2);
//不同类型的指针之间，是不能互相赋值的
//void类型的指针打彼上而的观念
//void没有任何类型，好处可以接受任意类型指针记录的内存地址
void* p3 = p1;
Void* p4 = p2;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 函数:用来交换两个变量记录的数据
// 修改一下函数，更具有通用性
void swap(void* pl,void* p2,int len)// 8
{
	//把void类型的指针，转成char类型的指针
	char* pc1 = p1;
	char* pc2 = p2;
	char temp =0;
	//以字节为单位，一个字节一个字节的进行交换
	for(inti=0;i&lt;len; i++)
	{
		temp =*pc1;
		*pc1 =*pc2;
		*pc2 = temp;
		pc1++;
		pc2++;	
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组指针和指针数组" tabindex="-1"><a class="header-anchor" href="#数组指针和指针数组"><span>数组指针和指针数组</span></a></h3><ul><li>数组指针:指向数组的指针</li></ul><p>作用:方便的操作数组中的各种数据<br> 举例:int* p=arr; 步长为:int(4字节)<br> 举例:int(*p)[5]=&amp;arr; 步长为:int乘5(20字节)</p><ul><li>指针数组:存放指针的数组作用:用来存放指针</li></ul><p>举例:int*p[5]，这个数组里面存着int类型的指针</p><h3 id="函数指针" tabindex="-1"><a class="header-anchor" href="#函数指针"><span>函数指针</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>//1.定义指针指向两个函数
void(*p1)()= method1;
int (p2)(int, int);
//2.利用函数指针去调用函数
p1();
int num = p2(10,20);
printf(&quot;%d\\n&quot;num);

void method1(){
	printf(&quot;method1\\n&quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="const关键字" tabindex="-1"><a class="header-anchor" href="#const关键字"><span>const关键字</span></a></h2><ul><li>修饰变量</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// a 为只读变量，不能修改。</span>
<span class="token comment">//a = 200; // 不可以修改</span>
<span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">677</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 借助指针可以修改 const 普通变量的值。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修饰指针：常用在函数内，限制指针所指向的内存空间，为只读 (不允许修改)</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 方式1</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">// 向后（右）作用</span>
<span class="token comment">// 示例：</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token comment">//【失败】： 将 a 的值，改为 500， 不能改！</span>
p <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span> <span class="token comment">//【成功】：可以修改 p变量的内容（地址）。</span>
<span class="token comment">// 方式2</span>
<span class="token keyword">int</span> <span class="token keyword">const</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">// 向后（右）作用</span>

作用方式同上！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针和数组" tabindex="-1"><a class="header-anchor" href="#指针和数组"><span>指针和数组</span></a></h2><h3 id="数组名" tabindex="-1"><a class="header-anchor" href="#数组名"><span>数组名</span></a></h3><p>数组名，是地址常量。不可以被修改、赋值（=、+=、-=、*= 、/=、%= 带有副作用的运算符）</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// a 就是数组地址。</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// b 是常量</span>
b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 不允许！！ 因为 b 为地址常量。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指针，是变量。可以使用数组名，给指针赋值。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// a 就是数组地址。允许！！此时p就是数组指针</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="取数组元素" tabindex="-1"><a class="header-anchor" href="#取数组元素"><span>取数组元素</span></a></h3><figure><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x3z2e2k5j30la0c0dgf.jpg" alt="22.png" tabindex="0"><figcaption>22.png</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">// 使用数组地址，给p指针变量初始化</span>
<span class="token comment">// 结论：</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>
。。。
arr<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>N<span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>N<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指针和数组名区别" tabindex="-1"><a class="header-anchor" href="#指针和数组名区别"><span>指针和数组名区别</span></a></h3><ol><li>指针是变量。数组名是常量。</li><li>sizeof（指针）——&gt; 4字节、8字节。</li><li>sizeof（数组名）——&gt; 数组实际的字节数。</li></ol><h3 id="指针的算数运算" tabindex="-1"><a class="header-anchor" href="#指针的算数运算"><span>指针的算数运算</span></a></h3><p>数据类型对指针的作用</p><ol><li>间接引用（解引用）：指针的数据类型，绝定了从指针存储的地址开始，向后读取的字节数。（与指针本身存储空间无关）</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span>
<span class="token comment">//int* p = &amp;a;</span>
<span class="token comment">//int* p; --- 0x12345678;</span>
<span class="token comment">//short* p; --- 0x5678;</span>
<span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">;</span> <span class="token comment">// --- 0x78;</span>
p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%#x\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x40nn9llj30jn09d3yz.jpg" alt="23.png" tabindex="0"><figcaption>23.png</figcaption></figure><ol start="2"><li>加减运算。指针的数据类型，决定了指针进行 +/- 操作时，向后/前 跳过的字节数。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token operator">+</span><span class="token number">1</span> 实际加过 <span class="token number">4</span> 字节。
<span class="token keyword">short</span> <span class="token operator">*</span> <span class="token operator">+</span><span class="token number">1</span> 实际加过 <span class="token number">2</span> 字节。
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token operator">+</span><span class="token number">1</span> 实际加过 <span class="token number">1</span> 字节。
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span> <span class="token operator">+</span><span class="token number">1</span> 实际加过 <span class="token number">8</span> 字节。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指针-操作数组" tabindex="-1"><a class="header-anchor" href="#指针-操作数组"><span>指针++操作数组</span></a></h4><figure><img src="https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3y8fn6jhzj30kl07caag.jpg" alt="42.png" tabindex="0"><figcaption>42.png</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> arr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//for (size_t i = 0; i &lt; n; i++)</span>
    <span class="token comment">//{</span>
    <span class="token comment">// 	printf(&quot;%d &quot;, arr[i]);</span>
    <span class="token comment">//}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//或者*p++</span>
        p<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// p = p+1, 一次加过 一个 int 大小（一个数组元素）。</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// p值随着循环，不断变化， 打印结束后，p指向一块无效的内存空间（野指针）</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习：使用 指针给空数组连续赋值。 再使用 “指针挪移” 方法打印出这个数组。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">// p 指向 arr[0]</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p = %p\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用 指针，给空数组连续赋值。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//arr[i] = i + 10;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> i<span class="token punctuation">;</span> <span class="token comment">// *(p + i) == arr[i]; *(p + i)中i表示步长，移动多少个单位</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 循环结束时，p指向谁？？？ 依然指向 arr[0];</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;循环结束后：p = %p\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用“指针挪移”方法打印出这个数组。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// p = p+1, 一次加过 一个 int 大小（一个数组元素）。</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 循环结束时，p指向谁？？？ 指向数组尾元素的下一个内存（野指针）。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;2 for 循环结束后：p = %p\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指针-整数" tabindex="-1"><a class="header-anchor" href="#指针-整数"><span>指针 +- 整数</span></a></h4><ol><li>普通指针变量 +-整数（步长:指针移动一次的字节个数）</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>char *p; p+1 偏过1个字节。
short *p; p+1 偏过2个字节。
int *p; p+1 偏过4个字节。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在数组中，+-整数（步长:指针移动一次的字节个数）</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">short</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>
p <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> 向后（右）偏过 <span class="token number">3</span> 个元素。 <span class="token number">6</span> 个字节。
p <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> 向前（左）偏过 <span class="token number">2</span> 个元素。 <span class="token number">4</span> 个字节。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>&amp;数组名 + 1<br> &amp;数组名 +1， 加过的是一个数组的总大小。<br><img src="https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x4345dpmj30jg08wgms.jpg" alt="24.png"></li></ol><h4 id="指针其他运算" tabindex="-1"><a class="header-anchor" href="#指针其他运算"><span>指针其他运算</span></a></h4><ul><li><p>指针 * / %：不允许！！！意义不明</p></li><li><p>指针 + 指针：不允许 error！意义不明</p></li><li><p>指针 - 指针：</p><ul><li>普通变量来说，语法允许， 但，无实际意义。</li><li>对于数组来说，得到间隔步长</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 保存数组首地址。</span>
    p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 修改p保存的地址</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p-a = %d\\n&quot;</span><span class="token punctuation">,</span> p <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ---- 3</span>
    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;q-p = %d\\n&quot;</span><span class="token punctuation">,</span> q <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ----- 5</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指针实现-strlen" tabindex="-1"><a class="header-anchor" href="#指针实现-strlen"><span>指针实现 strlen()</span></a></h3><ul><li>借助 数组 实现</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">myStrlen1</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>借助 指针 实现</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">myStrlen2</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	p<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token keyword">return</span> p <span class="token operator">-</span> str<span class="token punctuation">;</span> <span class="token comment">// 返回元素个数。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指针比较运算" tabindex="-1"><a class="header-anchor" href="#指针比较运算"><span>指针比较运算</span></a></h3><ol><li>普通变量：语法允许，但无实际意义。</li><li>数组：地址之间可以比大小。 得到元素存储的先后顺序。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&gt;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;成立\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;不成立&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;==\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>判断 NULL</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// p = NULL // 初始化空指针。</span>
p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p is not NULL\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p is NULL\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指针数组" tabindex="-1"><a class="header-anchor" href="#指针数组"><span>指针数组</span></a></h3><ol><li>指针数组的本质，是一个二级指针。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// int型指针数组，保存地址的数组。</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*arr[0] = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr[0] == *(arr+0)</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*arr[0] = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*arr[0] = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// * 结合性，自右向左。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>二维数组，是指针数组， 是二级指针。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 存地址，</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;arr[0][0] = %d\\n&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;*(*(arr+0)) = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;**arr = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 二级指针的简介引用。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多级指针" tabindex="-1"><a class="header-anchor" href="#多级指针"><span>多级指针</span></a></h3><p>多级指针不能跳跃定义。 有一级才能定义二级；有二级才能定义三级；有三级，才能定义4级。。。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 普通变量</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">// 一级指针。是变量的地址。</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span> <span class="token comment">// 二级指针。是一级指针的地址。【重点】</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>ppp <span class="token operator">=</span> <span class="token operator">&amp;</span>pp<span class="token punctuation">;</span> <span class="token comment">// 三级指针。是二级指针的地址。</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>pppp <span class="token operator">=</span> <span class="token operator">&amp;</span>ppp<span class="token punctuation">;</span><span class="token comment">// 四级指针。是三级指针的地址。</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">*</span>ppp <span class="token operator">==</span> pp <span class="token operator">==</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span>
<span class="token operator">*</span><span class="token operator">*</span>ppp <span class="token operator">==</span> <span class="token operator">*</span>pp <span class="token operator">==</span> p <span class="token operator">==</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>ppp <span class="token operator">==</span> <span class="token operator">*</span><span class="token operator">*</span>pp <span class="token operator">==</span> <span class="token operator">*</span>p <span class="token operator">==</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针和函数" tabindex="-1"><a class="header-anchor" href="#指针和函数"><span>指针和函数</span></a></h2><h3 id="栈帧" tabindex="-1"><a class="header-anchor" href="#栈帧"><span>栈帧</span></a></h3><ul><li>当函数被调用时，系统会在 stack 空间上申请一块内存，用来给函数调用提供空间。存储 形参 和局部变量（定义在函数内部的变量）。</li><li>函数调用结束时，这块内存空间，会被自动释放 (消失) 。</li></ul><h3 id="传值和传址" tabindex="-1"><a class="header-anchor" href="#传值和传址"><span>传值和传址</span></a></h3><ul><li><p>传值(值传递)：函数调用期间，实参将自己的数据值， 拷贝一份给形参。<br><img src="https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x46tvql7j30kw0b5wfi.jpg" alt="25.png"></p></li><li><p>传址 (传引用)：函数调用期间，实参将 自己的 “地址值” ，拷贝一份 赋值给形参。<br> 可以在 A 栈帧中，借助地址，修改B栈帧上的变量数据。<br><img src="https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x47cp7oqj30kf09pq45.jpg" alt="26.png"></p></li></ul><h3 id="数组做函数参数" tabindex="-1"><a class="header-anchor" href="#数组做函数参数"><span>数组做函数参数</span></a></h3><ul><li>数组做函数参数时，传递的不再是整个数组，而是数组的首地址（指针）。</li><li>定义处:arr表示的就是完整的数组</li><li>函数中的arr:只是一个变量，用来记录数组的首地址</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;main : sizeof(arr) = %u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//整个数组的大小。</span>
    <span class="token comment">// 调用 test 函数，传参 数组。</span>
    <span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实参！</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 定义函数，用数组做参数</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 形参</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test : sizeof(arr) = %u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指针的大小。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;arr[0] = %d\\n&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当整型数组做函数参数时，通常在函数定义中封装2个参数，数组首地址和元素个数。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 冒泡排序</span>
<span class="token comment">//void BubbleSort(int arr[]) 这种传参，无法在函数内，求元素个数。因为此时sizeof(arr)为计算得到的是sizeof(首地址)，而不是sizeof整个数组</span>
<span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取元素个数</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 排序</span>
    <span class="token function">BubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 打印排序后结果</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组做函数参数，也可以写成指针的形式。（本质一样）<br><code>void BubbleSort(int arr[], int n) == void BubbleSort(int *arr, int n)</code></li></ul><h3 id="指针做函数返回值" tabindex="-1"><a class="header-anchor" href="#指针做函数返回值"><span>指针做函数返回值</span></a></h3><ul><li><p>指针做函数返回值，不能返回【局部变量的地址】。</p><ul><li>当函数调用结束，栈帧空间释放，局部变量的地址，无效。</li></ul></li><li><p>数组做函数返回值，不允许！（C语言中，只能写成 指针形式）</p></li></ul><h2 id="指针和字符串" tabindex="-1"><a class="header-anchor" href="#指针和字符串"><span>指针和字符串</span></a></h2><ul><li>基本知识</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;i&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>【麻烦】 变量，可读可写。
<span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> 变量，可读可写。
<span class="token keyword">char</span> <span class="token operator">*</span>str3 <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> 常量，只读。
<span class="token keyword">char</span> <span class="token operator">*</span>str4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 错误！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>char *str2 = &quot;hello&quot; </code> 是一个常量。不允许修改。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main0401</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 相当于 {&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;\\0&#39;}</span>
    <span class="token keyword">char</span><span class="token operator">*</span> str2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    str1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;R&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 相当于 {&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;\\0&#39;}是变量，可以随意修改。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    str2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;R&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hello&quot; 是字符串常量。 不能修改！</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同一个字符串常量 ，可以给多个不同的指针赋值。<br><code>char* str2 = &quot;hello&quot;; 和 char* n = &quot;hello&quot;;</code> 地址值都相同。 都是字符串 “hello” 的地址。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 相当于 {&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;\\0&#39;}</span>
    <span class="token keyword">char</span> m<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> str2 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> n <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str1 = %p\\n&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;m = %p\\n&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组定义的 hello 地址不同。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str2 = %p\\n&quot;</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;n = %p\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指针定义的 hello 是字符串常量，是同一个地址。</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【结论】： 当字符串 (含有 \\0 字符数组)，做函数参数时，不需要提供 2个参数。因为每个字符串都有‘\\0’</p><h3 id="字符串比较-strcmp-函数" tabindex="-1"><a class="header-anchor" href="#字符串比较-strcmp-函数"><span>字符串比较（strcmp()函数）</span></a></h3><ul><li>比较 str1 和 str2， 如果相同返回0， 不同则依次比较ASCII码，str1 &gt; str2 返回1，否则返回 -1<br> 按对应的 位置，比较字符的大小。不比较ASCII 码 和。</li></ul><p>​ 分析：循环，依次比较两个 字符串 中 对应位字符。\\0 结束。都相同 ---&gt; 0，对应位不同， 比较字符的 ASCII 码。 str1 &gt; str2 ---&gt; 1, str1 &lt; str2 ----&gt; -1</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 数组的实现方式</span>
<span class="token keyword">int</span> <span class="token function">myStrcmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// *(str1+i) == *(str2+i)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 2个字符串， 一样！</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// str1 和 str2 有字符不同。</span>
    <span class="token keyword">return</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 指针的实现方式</span>
<span class="token keyword">int</span> <span class="token function">myStrcmp2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> str2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str1 <span class="token operator">==</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span> <span class="token comment">// *(str1+i) == *(str2+i)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str1 <span class="token operator">==</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 2个字符串，一样！</span>
        <span class="token punctuation">}</span>
        str1<span class="token operator">++</span><span class="token punctuation">;</span>
        str2<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// str1 和 str2 有字符不同。</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>str1 <span class="token operator">&gt;</span> <span class="token operator">*</span>str2 <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串拷贝-strcpy-函数" tabindex="-1"><a class="header-anchor" href="#字符串拷贝-strcpy-函数"><span>字符串拷贝(strcpy()函数)</span></a></h3><ul><li>将一个字符串中的所有字符，依次拷贝存放到另个一空字符数组中。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 数组版：</span>
<span class="token keyword">void</span> <span class="token function">myStrcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> dst<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token comment">// while(src[i] != 0) while(strc[i])</span>
    <span class="token punctuation">{</span>
    	dst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    	i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	dst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> <span class="token comment">//main中的 dst 初始化为0， 此步可以省略。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 指针版</span>
<span class="token keyword">void</span> <span class="token function">myStrcpy2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> dst<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token comment">// while(src[i] != 0) while(strc[i])</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token punctuation">;</span>
        src<span class="token operator">++</span><span class="token punctuation">;</span>
        dst<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> <span class="token comment">//main中的 dst 初始化为0， 此步可以省略。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在字符串中查找字符出现的位置-strchr-函数" tabindex="-1"><a class="header-anchor" href="#在字符串中查找字符出现的位置-strchr-函数"><span>在字符串中查找字符出现的位置(strchr()函数)</span></a></h3><ul><li>在字符串中查找字符出现的位置() <ul><li>“helloworld” ‘e’ ——&gt; “elloworld”</li><li>‘l’ ——&gt; “lloworld”</li><li>‘r’ ——&gt; “rld”</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 指针版</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">myStrchr</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token comment">//while (*str != &#39;\\0&#39;) == while (*str != 0)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> ch<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> str<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 在 str 中，没有找到 ch</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 数组版</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">myStrchr2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//while (str[i] != &#39;\\0&#39;) == while (str[i] != 0)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ch<span class="token punctuation">)</span> <span class="token comment">// str[i] == *(str+i)</span>
        <span class="token punctuation">{</span>
        	<span class="token keyword">return</span> <span class="token operator">&amp;</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    	i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 在 str 中，没有找到 ch</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串去空格" tabindex="-1"><a class="header-anchor" href="#字符串去空格"><span>字符串去空格</span></a></h3><ul><li>“ni chou sha ? chou ni za di !” ----&gt; “nichousha?chounizadi!”</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 封装函数，去除字符串空格 --- 数组版</span>
<span class="token keyword">void</span> <span class="token function">str_no_space</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> dst<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 遍历 src 字符串</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 记录 dst存储位置。</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token comment">// 只有不为空格，才存储到 dst中。</span>
        <span class="token punctuation">{</span>
            dst<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 不为空格，j后移。为空格，j不动。</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dst<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 封装函数，去除字符串空格 --- 指针版</span>
<span class="token keyword">void</span> <span class="token function">str_no_space2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> dst<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>src<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token comment">// 只有不为空格，才存储到 dst中。</span>
        <span class="token punctuation">{</span>
        	<span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token punctuation">;</span>
        	dst<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 不为空格，指针后移。为空格，指针不动</span>
        <span class="token punctuation">}</span>
        src<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;ni chou sha ? chou ni za di ! zai chou yi ge shi shi&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用函数 去除 str中的空格，保存到 dst 中</span>
    <span class="token comment">// str_no_space(str, dst);</span>
    <span class="token function">str_no_space2</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dst = %s\\n&quot;</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="str-中-substr-出现的次数与strstr-函数" tabindex="-1"><a class="header-anchor" href="#str-中-substr-出现的次数与strstr-函数"><span>str 中 substr 出现的次数与strstr() 函数</span></a></h3><p>str = “hellollolloabcllollollo ”<br> substr: “llo” strlen(“llo”)<br> 写函数测试， llo 在 “hellollollollollollo ” 出现了多少次。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>haystack<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span>
参<span class="token number">1</span>：原串
参<span class="token number">2</span>：子串
返回值：
成功：返回子串在原串中的位置（地址值）
失败：<span class="token constant">NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 封装函数，统计 str字符串中，substr出现的次数</span>
<span class="token keyword">int</span> <span class="token function">substr_times</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> substr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 定义变量统计substr出现的次数。</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> substr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ---&gt; &quot;llolloabclloxyzllollo&quot;;</span>
    <span class="token comment">// 循环的截取 str 串，判断剩余 str串中是否包含 substr</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">// while (p)</span>
    <span class="token punctuation">{</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        p <span class="token operator">+=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// “lloabclloxyzllollo&quot;;</span>
        p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> substr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 在 str字符串中，找子串 substr出现的次数</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hell9oqqqlloabclloxyzlmlollo&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> substr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;llo&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">substr_times</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> substr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s 串中，%s 子串 出现 %d 次\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> substr<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="求字符串非空格元素个数" tabindex="-1"><a class="header-anchor" href="#求字符串非空格元素个数"><span>求字符串非空格元素个数</span></a></h3><p><code>&quot;ni chou sha ? chou ni za di ! zai chou yi ge shi shi&quot;</code> 统计这里，除空格外 字符的个数。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 统计非空格数</span>
<span class="token keyword">int</span> <span class="token function">no_space_num</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 指针方式实现。</span>
    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello ni hao ma world?&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">no_space_num</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串逆置" tabindex="-1"><a class="header-anchor" href="#字符串逆置"><span>字符串逆置</span></a></h3><ul><li>“hello” ---&gt; “olleh”<br> 参考 “数组逆置”实现。day05</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">str_inverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> start <span class="token operator">=</span> str<span class="token punctuation">;</span> <span class="token comment">// 记录首个元素的地址</span>
    <span class="token keyword">char</span><span class="token operator">*</span> end <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 记录最后一个元素的地址</span>
    <span class="token comment">// 循环交换字符串首尾元素</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>start<span class="token punctuation">;</span> <span class="token comment">// 三杯水交换字符元素。</span>
        <span class="token operator">*</span>start <span class="token operator">=</span> <span class="token operator">*</span>end<span class="token punctuation">;</span>
        <span class="token operator">*</span>end <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        start<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 首元素指针后移</span>
        end<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 尾元素指针前移</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;this is a test&quot;</span><span class="token punctuation">;</span>
    <span class="token function">str_inverse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断字符串是回文" tabindex="-1"><a class="header-anchor" href="#判断字符串是回文"><span>判断字符串是回文</span></a></h3><p>abcba --- 是回文<br> amkilolikma --- 是回文。<br> abccba ---- 是回文。<br> abcdba --- 不是回文。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 判断字符串是否是回文</span>
<span class="token keyword">int</span> <span class="token function">str_is_abcba</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> start <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> end <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>start <span class="token operator">!=</span> <span class="token operator">*</span>end<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 不是回文</span>
        <span class="token punctuation">}</span>
        start<span class="token operator">++</span><span class="token punctuation">;</span>
        end<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;abcmnmcba&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">str_is_abcba</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 是回文</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s 是回文！\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s 不是回文！\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串处理函数" tabindex="-1"><a class="header-anchor" href="#字符串处理函数"><span>字符串处理函数：</span></a></h3><ul><li>全部是标准C库函数。 使用头文件 #include &lt;string.h&gt;</li></ul><h4 id="字符串拷贝" tabindex="-1"><a class="header-anchor" href="#字符串拷贝"><span>字符串拷贝</span></a></h4><h5 id="strcpy" tabindex="-1"><a class="header-anchor" href="#strcpy"><span>strcpy</span></a></h5><p><code>char *strcpy(char *dest, const char *src); // src:source dest: dst</code><br> 将 src 的内容，拷贝给 dest。 返回 dest。dest空间要足够大。<br> strcpy 函数，不去检查 dest 是否足够大。—— 【不安全函数】</p><p>函数调用结束，返回值 和 dest 结果一致。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 字符串拷贝</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;you will be die if you copy me!&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strcpy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dest = %s\\n&quot;</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p = %s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="strncpy" tabindex="-1"><a class="header-anchor" href="#strncpy"><span>strncpy</span></a></h5><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 安全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 src 的内容，拷贝给 dest。 只拷贝 n 个字节。dest空间要足够大。 通常n与dest的空间大小一致<br> 特性：1. n &gt; src : 只拷贝 src 大小。2. n &lt; src : 只拷贝 n 个字节。 不会自动添加 \\0</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">strncpy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//for (size_t i = 0; i &lt; 10; i++)</span>
    <span class="token comment">//{</span>
    <span class="token comment">// printf(&quot;%c\\n&quot;, p[i]);</span>
    <span class="token comment">//}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h4><h5 id="strcat" tabindex="-1"><a class="header-anchor" href="#strcat"><span>strcat</span></a></h5><p><code>char *strcat(char *dest, const char *src);</code><br> 将 src 中内容，拼接到 dest 后。 返回拼接成功的字符串。—— 需要保证 dest 空间足够大。<br> 函数调用结束后，dest 和 返回值结果相同。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;haha hoho xixi&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strcat</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p = %s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dst = %s\\n&quot;</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="strncat" tabindex="-1"><a class="header-anchor" href="#strncat"><span>strncat</span></a></h5><p><code>char *strncat(char *dest, const char *src, size_t n);</code><br> 将 src 中前 n个字符，拼接到 dest 后。 返回拼接成功的字符串。—— 需要保证 dest 空间足够大。<br> 函数调用结束后，dest 和 返回值结果相同。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;haha hoho xixi&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">strncat</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p = %s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dst = %s\\n&quot;</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串比较" tabindex="-1"><a class="header-anchor" href="#字符串比较"><span>字符串比较</span></a></h4><ul><li>字符比较可以使用 &gt; &lt; &lt;= &gt;= == != , 字符串 比较 不允许使用。</li></ul><h5 id="strcmp" tabindex="-1"><a class="header-anchor" href="#strcmp"><span>strcmp</span></a></h5><p><code>int strcmp(const char *s1, const char *s2);</code><br> 比较 s1 和 s2 两个字符串，如果相等 返回 0；<br> 如果不相等， 进一步 比 s1 和 s2 对应位上的 ASCII码值。<br> s1 &gt; s2 返回 1<br> s1 &lt; s2 返回 -1</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;helloz&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;helloaworld&quot;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不比较 ASCII 的 和</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="strncmp" tabindex="-1"><a class="header-anchor" href="#strncmp"><span>strncmp</span></a></h5><p><code>int strncmp(const char *s1, const char *s2, size_t n);</code><br> 比较 s1 和 s2 两个字符串的前n个字符，如果相等 返回 0；<br> 如果不相等， 进一步 比 s1 和 s2 对应位上的 ASCII码值。（不比较 ASCII 的 和）</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;helloz&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;helloaworld&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串格式化输入、输出" tabindex="-1"><a class="header-anchor" href="#字符串格式化输入、输出"><span>字符串格式化输入、输出</span></a></h4><h5 id="sprintf" tabindex="-1"><a class="header-anchor" href="#sprintf"><span>sprintf</span></a></h5><p><code>int sprintf(char *str, const char *format, ...);// ... 代表 这是一个参数可变的函数。</code><br> 对应 printf记忆。 作用将 原来输出到屏幕的 “格式化字符串”， 写到 参1 的 str 中。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// printf(&quot;%d + %d = %d\\n&quot;, 10, 24, 10+24);</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 保证空间足够大</span>
<span class="token function">sprintf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;%d + %d = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写到 str 中。不打印屏幕</span>
<span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;---%s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="sscanf" tabindex="-1"><a class="header-anchor" href="#sscanf"><span>sscanf</span></a></h5><p><code>int sscanf(const char *str, const char *format, ...);</code><br> 对应 scanf 记忆。 作用 将 原来 从键盘获取到的 “格式化字符串”， 从 参1 的 str 中获取。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
<span class="token comment">// scanf(&quot;%d+%d=%d&quot;, &amp;a, &amp;b, &amp;c); // 从键盘 stdin 读取。</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;10+20=30&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 提供给 sscanf 参1 使用。</span>
<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">sscanf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;%d+%d=%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %d\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c = %d\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串查找字符、子串" tabindex="-1"><a class="header-anchor" href="#字符串查找字符、子串"><span>字符串查找字符、子串</span></a></h4><h5 id="strchr" tabindex="-1"><a class="header-anchor" href="#strchr"><span>strchr</span></a></h5><p><code>char *strchr(const char *s, int c);</code><br> 在 字符串s 中，找 字符 c 出现的位置。 返回 字符在字符串中的地址。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span><span class="token function">strchr</span><span class="token punctuation">(</span><span class="token string">&quot;hellohehexixihoho&quot;</span><span class="token punctuation">,</span><span class="token char">&#39;i&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="strrchr" tabindex="-1"><a class="header-anchor" href="#strrchr"><span>strrchr</span></a></h5><p>r: right<br><code>char *strrchr(const char *s, int c);</code><br> 自右向左，在 字符串s 中，找 字符 c 出现的位置。 返回 字符在字符串中的地址。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//printf(&quot;%s\\n&quot;,strchr(&quot;hellohehexixihoho&quot;&#39;i&#39;))</span>
  <span class="token comment">// printf(&quot;%s\\n”,strchr(&quot;hellohehexixihoho&quot;,&quot;i&quot;);</span>
  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="strstr" tabindex="-1"><a class="header-anchor" href="#strstr"><span>strstr</span></a></h5><p><code>char *strstr(const char *str, const char *substr);</code><br> 在字符串 str 中， 找寻子串 substr 第一次出现的位置。 返回地址。</p><h4 id="字符串分割" tabindex="-1"><a class="header-anchor" href="#字符串分割"><span>字符串分割</span></a></h4><h5 id="strtok" tabindex="-1"><a class="header-anchor" href="#strtok"><span>strtok</span></a></h5>`,619),d=s("code",null,"char *strtok(char *str, const char *delim);",-1),v=s("br",null,null,-1),m=s("br",null,null,-1),b={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},h={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},g=p(`<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 测试1：</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;www.itcast.cn&quot;</span><span class="token punctuation">;</span> <span class="token comment">// ---》 &quot;www\\0itcast.cn&quot;;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// strtok调用完成，会将 分割符用 \\0 替换。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p = %s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用一次 strtok 分割之后，再去打印原串 str</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//printf(&quot;%c\\n&quot;, str[i]);</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印每个字符的 ASCII码</span>
    <span class="token punctuation">}</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：<br> strtok() 函数，直接在原串上对字符串分割。 不能分割字符串常量。 char *str = “hello”；<br> strtok() 函数调用结束， 会将 分割符，替换成 ’\\0‘<br> 第一次用 strtok 拆分， 参1 传待拆分的原串。 第 1+ 次拆分，参1 传 NULL。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token operator">/</span>字符串分割 strtok
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;www.itcast.cn.net.com&quot;</span><span class="token punctuation">;</span><span class="token comment">//---》&quot;www\\0itcast.cn&quot;;</span>
    <span class="token comment">//char *str=&quot;www.itcast.cn.com.net&quot;;// 字符串常量。</span>
    <span class="token comment">// strtok调用完成，会将 分割符用\\0 替换。</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>str，<span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// strtok调用完成，会将 分割符用 \\0 替换。</span>
	
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;P = %s\\n&quot;</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 循环按&quot;.”拆分 剩余 字符串</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        p <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>	
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p=号s\\n&quot;</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习：<br> 拆分 字符串 “”, 按 分割符 “. $”···</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;www.itcast.cn$This is a test$for strtok&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用第一次</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>str，<span class="token string">&quot;. $&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 分割符有3个:&#39;.’/&#39;$’/’·空格</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p = %\\n&quot;</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token comment">//后续 N+1次调用。while循环，参1传NULL</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		p<span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">&quot;. $&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;循环中 p = %\\n&quot;</span>，p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串转换" tabindex="-1"><a class="header-anchor" href="#字符串转换"><span>字符串转换</span></a></h4><p>a : 代表字符串 string。<br> 将字符串转整数、小数、长整数、长长整型。<br> 使用这类函数进行转换时， 要求：原串必须是可转换的字符串。<br> 错误使用 ： “abc123”、“xyac123”、“1245dke89” 不能正确转换。</p><h2 id="atoi" tabindex="-1"><a class="header-anchor" href="#atoi"><span>atoi</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">atof</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token function">atol</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">atoll</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;12abc3456&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %d\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;3.14&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num2 = %lf\\n&quot;</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;34568490354&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> num3 <span class="token operator">=</span> <span class="token function">atoll</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num3 = %lld\\n&quot;</span><span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理"><span>内存管理</span></a></h2><h3 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量"><span>局部变量</span></a></h3><ul><li>概念：定义在函数内部的变量。</li><li>作用域：从定义位置开始，到包裹该变量的第一个右大括号结束。（ 函数作用域、块作用域。）</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
    	<span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量。 --- 块作用域。出了 } 不能使用。</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;---m = %d\\n&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//int i = 0;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
   	 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;m = %d\\n&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">//printf(&quot;i = %d\\n&quot;, i);	</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量"><span>全局变量</span></a></h3><ul><li>概念：定义在函数外部的变量。</li><li>作用域：从定义位置开始，默认到本文件内部。 其他文件如果想使用，可以通过 “声明” 的方式，将作用域导出。</li></ul><h3 id="static变量" tabindex="-1"><a class="header-anchor" href="#static变量"><span>static变量</span></a></h3><h4 id="static全局变量" tabindex="-1"><a class="header-anchor" href="#static全局变量"><span>static全局变量</span></a></h4><ul><li>定义语法：在全局变量定义之前，添加 static 关键字。 如：<code> static int a = 10；</code></li><li>作用域：被限制在本文件内部，不允许通过 “声明” 方式导出作用域。（java不同）</li></ul><h4 id="static局部变量" tabindex="-1"><a class="header-anchor" href="#static局部变量"><span>static局部变量</span></a></h4><ul><li>定义语法：在局部变量定义之前，添加 static 关键字。</li><li>作用域：从定义位置开始，到包裹该变量的第一个右大括号结束。</li><li>特性： s静态局部变量，只定义一次。相当于，在全局位置定义。通常用来做计数器。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//静态局部变量</span>
    <span class="token function">printf</span><span class="token punctuation">(</span>&quot;<span class="token operator">%</span>d\\n”<span class="token punctuation">,</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用 test08 10 次。</span>
    <span class="token punctuation">}</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="static-函数" tabindex="-1"><a class="header-anchor" href="#static-函数"><span>static 函数</span></a></h3><ul><li>全局函数：就是 “函数”。定义语法：函数原型 + 函数体。</li><li>static函数： <ul><li>定义语法：static 函数原型 + 函数体。</li><li>特性：只能在 本文件内使用。其他文件即使声明也无法使用。</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>A<span class="token punctuation">.</span>c 文件中有如下代码
<span class="token comment">// static 关键字能将 test09 函数限制在本文件内。 外部文件，不能访问</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test09</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;i = %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
B<span class="token punctuation">.</span>c 文件中调用上述函数。由于 <span class="token keyword">static</span> ， B<span class="token punctuation">.</span>c 不能使用 test09函数，会报错！
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>
<span class="token comment">// void test09(void); //声明函数</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">test09</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//声明函数</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">test09</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h3><ol><li>局部变量：定一位置开始，函数调用结束（存储在栈stack上）。 —— 函数被调用期间。</li><li>全局变量：从程序启动开始（早于 main() 函数），程序终止结束 。—— 程序执行期间。</li><li>static局部变量：从程序启动开始，程序终止结束（定义在全局位置）。—— 程序执行期间。</li><li>static全局变量：从程序启动开始，程序终止结束。—— 程序执行期间。</li><li>全局函数：从程序启动开始，程序终止结束。—— 程序执行期间。</li><li>static函数：从程序启动开始，程序终止结束。—— 程序执行期间。</li></ol><h3 id="命名冲突" tabindex="-1"><a class="header-anchor" href="#命名冲突"><span>命名冲突</span></a></h3><p>如果全局变量和局部变量命名冲突。采用就近原则。<br> 强烈不推荐！</p><h3 id="内存4区模型" tabindex="-1"><a class="header-anchor" href="#内存4区模型"><span>内存4区模型</span></a></h3><ol><li>代码段：.text段。 存储程序源码（二进形式）</li><li>数据段：只读数据段 .rodata。 初始化数据段 .data。未初始化数据段 .bss。</li><li>stack：栈。在其之上开辟栈帧。（较小：windows：1M--10M， Linux：8M---16M）<br> 存储特性：后进先出 FILO (LIFO)</li><li>heap：堆。 给用户自定义提供空间。（较大：约1.3G+-）<br><img src="https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x4xyte00j30kt0bzt9o.jpg" alt="28.png"></li></ol><figure><img src="https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3z8y6achrj30uv0de3zz.jpg" alt="44.png" tabindex="0"><figcaption>44.png</figcaption></figure><h3 id="heap堆空间" tabindex="-1"><a class="header-anchor" href="#heap堆空间"><span>Heap堆空间</span></a></h3><h4 id="开辟-释放-heap-空间" tabindex="-1"><a class="header-anchor" href="#开辟-释放-heap-空间"><span>开辟/释放 heap 空间</span></a></h4><ul><li>在 heap 上开辟空间</li><li>malloc创建空间的单位是字节</li><li>malloc返回的是void类型的指针，没有步长的概念，也无法获取空间中的数据，需要强转</li><li>malloc返回的仅仅是首地址，没有总大小，最好定义一个变量记录总大小</li><li>malloc申请的空间不会自动消失，如果不能正确释放，会导致内存泄露</li><li>malloc申请的空间过多，会产生虚拟内存5</li><li>malloc申请的空间没有初始化值，需要先赋值才能使用</li><li>free释放完空间之后，空间中数据叫做脏数据，可能被清空，可能被修改为其他值</li><li>ca1loc就是在malloc的基础上多一个初始化的动作</li><li>realloc修改之后的空间，地址值有可能发生变化，也有可能不会改变，但是原本的数据不会丢失.如果内存中已经无法申请空间了，会返回NULL</li><li>realloc修改分配的内存大小之后，无需释放原来的空间，函数底层会进行处理 <ul><li>如果内存地址没变，底层在原来空间的后面接着申请的</li><li>如果内存地址变了，申请一个新的大的空间，把原来的数据拷贝到新的空间当中，再把原来的空间给free掉</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向 系统申请内存空间，在 heap 上。单位：字节。</span>
参数：申请空间的大小。
返回值：
成功：heap上内存空间的首地址。
失败：<span class="token constant">NULL</span>
<span class="token comment">// 申请成功的内存，通常拿来当成 “数组” 使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>释放 heap 申请的空间</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
参：就是 malloc 函数的返回值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// int arr[10];</span>
    <span class="token comment">// 申请能存储 10 个 int 数的空间。 40字节。</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 强转的目的，方便阅读代码。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;malloc error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 退出程序。 -1，非正常结束。</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 写 - 数据到 malloc 申请的空间</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 存 数据到 malloc 申请的空间中。</span>
        <span class="token comment">//* (p+i) = i + 10;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 从malloc申请的空间中，读数据。</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 释放malloc申请的空间。</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-heap空间注意事项" tabindex="-1"><a class="header-anchor" href="#使用-heap空间注意事项"><span>使用 heap空间注意事项</span></a></h4><ol><li>申请的heap堆内存空间连续。当成 “数组” 使用。</li><li>free 后的空间，不会立即失效。通常将 free后的地址，置为 NULL。</li><li>free 地址必须是mallo函数返回的地址。否则，报错！</li><li>如果malloc 后的地址一定会变化，通常使用临时变量 tmp 保存。</li></ol><h4 id="二级指针对应的-heap-空间" tabindex="-1"><a class="header-anchor" href="#二级指针对应的-heap-空间"><span>二级指针对应的 heap 空间</span></a></h4><p><code>int **p = int *p[3] ==&gt; [int *, int *, int *] ==&gt; [ [1, 2, 3, 54, 5] , int *, int *]</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 给外层空间malloc申请内存</span>
    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;malloc error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//给 内层指针 申请 malloc 空间</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;malloc p[i] error!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>    
    <span class="token comment">// 使用空间 -- 写</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span> <span class="token comment">// 随意初始化值。</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 使用空间 -- 读</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p[i][j] == *(p+i)[j] == *(*</span>
            <span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        <span class="token comment">// free空间时，应该先释放 内层空间，再释放外层</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 释放外层空间</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 char **p 为例</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 先申请外层指针。</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 申请内层指针</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串长度 &lt;= 10个字符。</span>
<span class="token punctuation">}</span>
<span class="token comment">// 写</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// p[i] = &quot;hello&quot;; 错误！</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 释放内层</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 释放外层</span>
<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内存操作函数" tabindex="-1"><a class="header-anchor" href="#内存操作函数"><span>内存操作函数</span></a></h4><ul><li>以下 4 个函数，专门用来操作 heap 内层。 stack 由系统自动申请，自动释放。</li></ul><h5 id="memset" tabindex="-1"><a class="header-anchor" href="#memset"><span>memset</span></a></h5><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
参<span class="token number">1</span>：内存首地址。
参<span class="token number">2</span>：置成什么。一般传 <span class="token number">0</span>
参<span class="token number">3</span><span class="token operator">:</span> 内存大小。单位：字节。
返回值：
成功：设置后的地址。
失败：<span class="token constant">NULL</span>

<span class="token function">memset</span><span class="token punctuation">(</span>首地址，<span class="token number">0</span>，空间大小<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绝大多数，memset 用来将申请好的heap 内存，置 0。 —— 单位 ： 字节。</p><p>memset 函数 按 “字节” 设置。<br> 置0 ——&gt; 每一个字节都为 0.<br> 【了解】置1 ——&gt; 每一个字节都为 1. —— 4字节 == 0x01010101 == 16843009</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;malloc error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将申请好的内存，全部置 0</span>
<span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 直接打印申请好的空间内容。</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="memcpy" tabindex="-1"><a class="header-anchor" href="#memcpy"><span>memcpy</span></a></h5><p>以字节为单元，内存拷贝。 strcpy ——&gt; 只能拷贝字符串。<br><code>void *memcpy(void *dest, const void *src, size_t n);</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 拷贝内存中的整型数据</span>
<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">memcpy</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 拷贝内存中的字符串</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> p<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//memcpy(p, str, strlen(str)+1); // 按内存拷贝</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串拷贝</span>
<span class="token function">strncpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p = %s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="memmove" tabindex="-1"><a class="header-anchor" href="#memmove"><span>memmove</span></a></h5><p>作用 完全等同于 memcpy。 以字节为单元，内存拷贝。---- 安全的！<br> 拷贝的 src 和 dest 之前如果有重叠，memcpy由于底层实现原因，有可能出错。推荐使用<br> memmove。<br><code>void *memmove(void *dest, const void *src, size_t n);</code></p><h5 id="memcmp" tabindex="-1"><a class="header-anchor" href="#memcmp"><span>memcmp</span></a></h5><p>以字节为单位，比较内存！<br> 作用可以完全参照，strncmp。<br> 规则：s1 == s2 --&gt; 0, s1 &gt; s2 ---&gt; 1 s2 &lt; s2 ---&gt; -1<br><code>int memcmp(const void *s1, const void *s2, size_t n);</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">98</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内存常见问题" tabindex="-1"><a class="header-anchor" href="#内存常见问题"><span>内存常见问题</span></a></h3><ol><li><p>申请 0字节空间<br> C 语言中，允许申请 0 字节的内存空间。<br> 0 字节的空间，不能拿来使用。</p></li><li><p>free 空指针<br> 空NULL指针，反复free， 不会报错。<br> 非空的指针，反复free，会报错！！！ —— 推荐 free 后的 指针，一定 置 NULL。</p></li><li><p>越界访问<br> 不允许！！！导致程序崩溃。</p></li><li><p>free ++ 后的地址<br> 不能正常释放。<br> 如果程序中，必须要使用 p++，定义临时变量，保存p值。以便free释放。</p></li><li><p>什么是内存?软件在运行时，用来临时存储数据的操作系统会把内存按照字节划分为N多的小格子</p></li><li><p>什么是内存地址?概念:在内存中申请空间的编号32位操作系统:以32位的二进制表示64位操作系统:以64位的二进制表示书写的时候:转成十六进制</p></li><li><p>内存地址的作用?快速的操作内存中的数据</p></li><li><p>C语言中如何获取内存地址?&amp;.变量名</p></li><li><p>数组内存地址?是第一个元素的第一个字节空间的地址，也是首地址;索引:偏移量,通过变量的首地址，就可以确定变量中存储的数据,数据=首地址+偏移量</p></li><li><p>sizeof(arr);//8 64位的操作系统当中，是以64个二进制表示内存地址值</p></li></ol><h3 id="函数内申请空间使用。" tabindex="-1"><a class="header-anchor" href="#函数内申请空间使用。"><span>函数内申请空间使用。</span></a></h3><p>注意上述 4 点。<br> A函数内申请空间，A函数使用</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>A函数内申请空间，B函数使用</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// A函数申请空间， B函数使用。</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span> <span class="token comment">// 返回的 heap 堆空间的地址值，函数调用结束，地址 有效。</span>
    <span class="token comment">//return &amp;p; // 返回的 stack 栈空间的地址值，函数调用结束，地址 无效。</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// A函数申请空间， B函数使用。</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">func2</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token number">345</span><span class="token punctuation">;</span> <span class="token comment">// 写</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读</span>
    <span class="token function">free</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token comment">// int** 是一级指针的地址。</span>
<span class="token punctuation">{</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">func3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传一级指针的地址。</span>
    <span class="token comment">// func3 函数，调用完成， ret指针，不再为 NULL ，而是指向一块有效的 heap 空间地址。</span>
    <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token number">789</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体"><span>结构体</span></a></h2><h3 id="结构体定义语法" tabindex="-1"><a class="header-anchor" href="#结构体定义语法"><span>结构体定义语法</span></a></h3><ul><li>复合类型：用户自定义类型：int [] 、int *、char **、 struct student</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 定义结构体类型</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">// 成员变量 —— 属性。不能被赋初值。</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 用结构体类型，定义变量。</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span> a<span class="token punctuation">;</span> <span class="token comment">// 定义了一个结构体类型的变量 a。</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">GirlFriend</span>
<span class="token punctuation">{</span>
	成员<span class="token number">1</span><span class="token punctuation">;</span>
    成员<span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 别名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上定义了一个结构体类型 。名字叫 struct student。<br> struct student 的地位 等同于 int、char、short、char *、int[]、long long<br> 通常 结构体类型定义在 全局位置。 或者 放到 xxx.h 头文件。<br> 头文件：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 头文件守卫</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_XXX_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_XXX_H_</span></span>
<span class="token number">4</span>种：#include、宏定义、函数声明、类型定义 <span class="token punctuation">(</span>结构体类型<span class="token punctuation">)</span>。
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="普通结构体变量" tabindex="-1"><a class="header-anchor" href="#普通结构体变量"><span>普通结构体变量</span></a></h3><h4 id="定义语法" tabindex="-1"><a class="header-anchor" href="#定义语法"><span>定义语法</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">student</span> stu1<span class="token punctuation">,</span> stu2<span class="token punctuation">,</span> stu3<span class="token punctuation">;</span> <span class="token comment">// 一次定义3个变量。没赋初值。</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Andy&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问成员方法" tabindex="-1"><a class="header-anchor" href="#访问成员方法"><span>访问成员方法</span></a></h4><ul><li>使用 “.” 访问成员。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 定义一个结构体变量，赋初值。</span>

<span class="token keyword">struct</span> <span class="token class-name">student</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Andy&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;first：age = %d, name = %s, num = %d\\n&quot;</span><span class="token punctuation">,</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>

stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">118</span><span class="token punctuation">;</span>

stu<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">119</span><span class="token punctuation">;</span>

<span class="token comment">//stu.name = &quot;cuihua&quot;; // name为地址常量，不能被赋值。</span>

<span class="token function">strcpy</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;cuihua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;last：age = %d, name = %s, num = %d\\n&quot;</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>age<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>普通变量使用 “-&gt;” 访问成员 ---- 不常用！</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>(&amp;stu)-&gt;age = 118;
(&amp;stu)-&gt;num = 119;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体指针变量" tabindex="-1"><a class="header-anchor" href="#结构体指针变量"><span>结构体指针变量</span></a></h3><h4 id="定义语法-1" tabindex="-1"><a class="header-anchor" href="#定义语法-1"><span>定义语法</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct student *p1, *p2, *P3; // 一次定义3个指针变量。 野指针！！！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="访问成员方法-1" tabindex="-1"><a class="header-anchor" href="#访问成员方法-1"><span>访问成员方法</span></a></h4><ul><li>使用 “-&gt;” 访问成员。</li><li>避免野指针、空指针：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct student stu, *p1; //一次定义两个结构体变量，一个普通变量stu，另一指针

变量p1

p1 = &amp;stu; // 给指针初始化。

struct student *p1;
p1 = (struct student *)malloc(sizeof(struct student));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指针使用 “.” 访问成员。 ---- 不常用！</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;cuihua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">119</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非常规定义语法-了解" tabindex="-1"><a class="header-anchor" href="#非常规定义语法-了解"><span>非常规定义语法（了解）</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>s1<span class="token punctuation">,</span> <span class="token operator">*</span>s2<span class="token punctuation">;</span> <span class="token comment">// 定义结构体类型的同时，定义1个结构体变量 s1，一个指针变量s2</span>
<span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment">// 匿名结构体</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>s3<span class="token punctuation">,</span> <span class="token operator">*</span>s4<span class="token punctuation">;</span> <span class="token comment">// 定义匿名结构体类型的同时，定义1个结构体变量 s3，一个指针变量s4。</span>
<span class="token comment">// 无法再定义其他变量。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体数组" tabindex="-1"><a class="header-anchor" href="#结构体数组"><span>结构体数组</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span> stu<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Andy&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Lucy&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;age=%d,num=%d,name=%s\\n&quot;</span><span class="token punctuation">,</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>struct student *stu; // 要求 指针指向能存储3个student 元素的空间，并给3个元素赋初值。访问。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token operator">*</span>stu<span class="token punctuation">;</span> <span class="token comment">// 野指针</span>
<span class="token comment">// 得到的heap堆空间，当成数组使用。</span>
stu <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 struct student stu[3];</span>
<span class="token comment">// 给数组的第1个元素赋值。</span>
stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 给数组的第2个元素赋值。</span>
stu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
stu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 给数组的第3个元素赋值。</span>
stu<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>
stu<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//int n = sizeof(stu) / sizeof(stu[0]); // 不能求元素个数。</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;age=%d,num=%d,name=%s\\n&quot;</span><span class="token punctuation">,</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">free</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
stu <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体嵌套" tabindex="-1"><a class="header-anchor" href="#结构体嵌套"><span>结构体嵌套</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">person</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 类型</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">person</span> man<span class="token punctuation">;</span> <span class="token comment">// person 类型的变量，作为 student 类型成员。</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;zhaoliu&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;北京朝阳区&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;age = %d\\n&quot;</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>man<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;name = %s\\n&quot;</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>man<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;addr = %s\\n&quot;</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 修改</span>
    stu<span class="token punctuation">.</span>man<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">119</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>man<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;张三丰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> <span class="token string">&quot;武当山&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nage = %d\\n&quot;</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>man<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;name = %s\\n&quot;</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>man<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;addr = %s\\n&quot;</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="做函数参数、返回值" tabindex="-1"><a class="header-anchor" href="#做函数参数、返回值"><span>做函数参数、返回值</span></a></h3><h4 id="结构体变量赋值" tabindex="-1"><a class="header-anchor" href="#结构体变量赋值"><span>结构体变量赋值</span></a></h4><ul><li>主要应用于，函数调用期间，实参给形参赋值。</li><li>要求：结构体变量赋值时，必须类型相同、成员个数一致，顺序一致。</li></ul><h4 id="做参数、返回值" tabindex="-1"><a class="header-anchor" href="#做参数、返回值"><span>做参数、返回值</span></a></h4><ul><li>传值：结构体变量做函数参数，将结构体变量的值(实参)，拷贝一份给 形参。形参、实参 共 2 份结构体。</li><li>传址：结构体指针变量做函数参数， 将结构体的地址值做实参，拷贝一份给形参。形参、实参 共 1 份结构体。</li><li>结论：结构体做函数参数、返回值时，通常采用 “传址” 方式，节省空间。</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>要求:
定义一个函数，修改学生中的数据
int main(){
    // 1.定义一个学生
    S stu;
    //2.给学生赋初始值
    strcpy(stu.name,&quot;aaa&quot;);stu.age = 0;
    //3.输出打印
    printf(&quot;学生的初始数据为:%s，%d\\n&quot;，stu.name，stu.age);
    //4.调用函数修改学生中的数据
    method(stu);
    //5.输出打印printf(&quot;学生的信息修改为:%s，%d\\n&quot;，stu.name，stu.age);
    return 0;
}
// 细节:
//如果函数中写的是结构体类型的变量，相当于是定义了一个新的变量
//此时是把main函数中stu中的数据，传递给了method函数，并把stu中的数据赋值给了新的变量st
//我们在函数中，仅仅是修改了变量st中的值，对main函数中stu的值，是没有进行修改的
void method(s st)
{
    printf(&quot;接收到main函数中学生的初始数据为:%s，%d\\n&quot;，st.name，st.age);// aaa 8
    // 修改
    printf(&quot;请输入要修改的学生名字\\n&quot;);
    scanf(&quot;%s&quot;st.name),printf(“请输入要修改的学生年龄\\n&quot;);
    scanf(&quot;%d&quot;，&amp;(st.age));
    printf(&quot;在method函数中修改之后，学生的信息为:%s，%d\\n&quot;，st.name，st.age);//zhangsan 23
}

//如果要在函数中修改stu的值，此时就不要再定义新的变量了
//直接接收stu的内存地址，通过内存地址就可以修改stu中的数据了
//指针p里面记录的是main函数中stu的内存地址(stu 学生)
void method2(s*p){
    printf(&quot;接收到main函数中学生的初始数据为:%s，%d\\n&quot;，(*p).name，(*p).age);// aaa 0
    // 修改
    printf(&quot;请输入要修改的学生名字\\n&quot;);
    scanf(&quot;%s&quot;(*p).name);printf(&quot;请输入变修改的学生年龄\\n&quot;);
    scanf(&quot;%d&quot;&amp;((*p).age));
    printf(&quot;在method函数中修改之后，学牛的信息为:%s，%d\\n&quot;，(*p).name，(*p).age);// zhangsan 23
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">func08</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token operator">*</span><span class="token operator">*</span>m<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token operator">*</span>m <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token operator">*</span>m<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;malloc error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//p-&gt;age = 100;</span>
    <span class="token comment">//p-&gt;num = 1;</span>
    <span class="token comment">//strcpy(p-&gt;name, &quot;zyx&quot;);</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token operator">-&gt;</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token string">&quot;zyx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 空指针</span>
    <span class="token function">func08</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//p-&gt;age = 100;</span>
    <span class="token comment">//p-&gt;num = 1;</span>
    <span class="token comment">//strcpy(p-&gt;name, &quot;zyx&quot;);</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;age=%d, name=%s, num=%d\\n&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>age<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="含有指针成员的结构体" tabindex="-1"><a class="header-anchor" href="#含有指针成员的结构体"><span>含有指针成员的结构体</span></a></h3><ul><li>申请内存：先申请外层空间，再申请内层空间。</li><li>释放内存：先释放内存空间，在释放外层空间。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">// 野指针。</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token operator">*</span> p<span class="token punctuation">;</span> <span class="token comment">//野指针。</span>
    <span class="token comment">// 给 p 初始化堆空间</span>
    p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;malloc p error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 给成员变量 name 开辟堆空间</span>
    p<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> p<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;malloc p-&gt;name error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 写数据到结构体中</span>
    p<span class="token operator">-&gt;</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token string">&quot;张三丰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;age=%d, name=%s, num=%d\\n&quot;</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>age<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 先释放内层空间</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体内存对齐" tabindex="-1"><a class="header-anchor" href="#结构体内存对齐"><span>结构体内存对齐</span></a></h3><ul><li>确定变量位置:只能放在自己类型整数倍的内存地址上</li><li>最后一个补位:结构体的总大小，是最大类型的整数倍</li><li>把小的数据类型，写在最上面，大的数据类型，写在最下面(节约空间)</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">num</span>｛
    <span class="token keyword">double</span> a<span class="token punctuation">;</span><span class="token comment">//8</span>
    <span class="token keyword">char</span> b<span class="token punctuation">;</span><span class="token comment">//1+3</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//4</span>
    <span class="token keyword">char</span> d<span class="token punctuation">;</span><span class="token comment">//1+7</span>
｝
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typedef-关键字" tabindex="-1"><a class="header-anchor" href="#typedef-关键字"><span>typedef 关键字</span></a></h2><ul><li>给现有的数据类型起别名。 【注意】：不能定义新数据类型。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token class-name">size_t</span><span class="token punctuation">;</span> <span class="token comment">// 给 unsigned int 起别名叫 size_t</span>
<span class="token keyword">int</span> a<span class="token punctuation">;</span> a 是变量名。
<span class="token keyword">typedef</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span> a 变成了 类型名。 a b<span class="token punctuation">;</span> 定义一个整型变量 b。（可读性差）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通常使用 typedef 定义过的类型，添加一个 “_t” 结尾。</li><li>定义语法：typedef 旧类型名 新类型名_t ;</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">// 野指针。</span>
<span class="token punctuation">}</span> <span class="token class-name">stu_t</span><span class="token punctuation">;</span> <span class="token comment">// 新类型名：stu_t;</span>
<span class="token comment">// 定义变量</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span> stu1<span class="token punctuation">;</span> <span class="token comment">// 依然可以正常使用</span>
<span class="token class-name">stu_t</span> stu2<span class="token punctuation">;</span> <span class="token comment">// 定义一个 struct student 类型的变量。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 typedef 的好处：</p><ol><li>简化类型名。</li><li>便于代码的修改和维护。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token class-name">int32_t</span><span class="token punctuation">;</span> <span class="token comment">// int 《----》 long long</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">// 野指针。</span>
    <span class="token class-name">int32_t</span> num1<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> num2<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> num3<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> num4<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">stu_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="共用体-联合体" tabindex="-1"><a class="header-anchor" href="#共用体-联合体"><span>共用体（联合体）</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">union</span> test <span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    <span class="token keyword">short</span> sh<span class="token punctuation">;</span>
    <span class="token keyword">int</span> var<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个联合体类型。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特性：</p><ul><li>内部所有成员变量的地址一致。等同于整个联合体的地址。</li><li>联合体的大小，是内部成员变量中，最大的那个成员的大小。（也受内存对齐影响）</li><li>修改其中一个成员的值，其他成员的值也跟着变化。</li><li>每次只能给一个变量进行赋值，因为第二次赋值时会覆盖原有的数据</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">union</span> test <span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    <span class="token keyword">short</span> sh<span class="token punctuation">;</span>
    <span class="token keyword">int</span> var<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">test_t</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">test_t</span> obj<span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>var <span class="token operator">=</span> <span class="token number">0x87654321</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;obj = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;obj.ch = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;obj.sh = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">.</span>sh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;obj.var= %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">.</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sizeof(test_t) = %u\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">test_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;var = %#x\\n&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sh = %#x\\n&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>sh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %#x\\n&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token number">0xAA</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;var = %#x\\n&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sh = %#x\\n&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>sh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %#x\\n&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结构体和共用体区别" tabindex="-1"><a class="header-anchor" href="#结构体和共用体区别"><span>结构体和共用体区别</span></a></h2><ul><li>存储方式: <ul><li>结构体:各存各的</li><li>共用体:存一起，多次存会覆盖</li></ul></li><li>内存占用 <ul><li>结构体:各个变量的总和(受内存对齐影响)</li><li>共用体:最大类型(受内存对齐影响)</li></ul></li></ul><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h2><ul><li>语法：enum 枚举名 { 枚举常量 }；</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">color</span> <span class="token punctuation">{</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> black<span class="token punctuation">,</span> pink<span class="token punctuation">,</span> yellow<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>枚举常量：必须是整型常量，不允许是浮点数。可以是负值。 默认值从 0 开始。后续常量较前一个+1；可以给任意一个常量赋初值，后续常量较前一个+1。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//enum color { red, green = -5, blue, black, pink = 18, yellow };</span>
<span class="token keyword">enum</span> <span class="token punctuation">{</span> red<span class="token punctuation">,</span> green <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> blue<span class="token punctuation">,</span> black<span class="token punctuation">,</span> pink <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> yellow <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> flg <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flg <span class="token operator">==</span> blue<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;blue is -4\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
    	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bule is not %d, blue=%d\\n&quot;</span><span class="token punctuation">,</span> flg<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;red = %d, yellow = %d\\n&quot;</span><span class="token punctuation">,</span> red<span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件" tabindex="-1"><a class="header-anchor" href="#文件"><span>文件</span></a></h2><h3 id="系统文件" tabindex="-1"><a class="header-anchor" href="#系统文件"><span>系统文件</span></a></h3><ul><li>scanf -- 键盘 -- 标准输入 -- stdin -- 0</li><li>printf -- 屏幕 -- 标准输出 -- stdout -- 1</li><li>perror -- 屏幕 -- 标准错误 -- stderr -- 2</li></ul><p>以上 3 个文件，为系统文件。应用程序启动时，这3个文件被系统自动打开，程序执行结束，由系统自<br> 动关闭 ( 隐式回收 )。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭文件。</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错！！！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件分类" tabindex="-1"><a class="header-anchor" href="#文件分类"><span>文件分类</span></a></h3><ul><li>设备文件：（与硬件有直接关系）屏幕、键盘、网卡、声卡、显卡、扬声器 ......</li><li>磁盘文件： <ul><li>文本文件：文件内容为 ASCII 码</li><li>二进制文件：文件内容为 二进制编码数据。</li></ul></li></ul><h3 id="文件指针" tabindex="-1"><a class="header-anchor" href="#文件指针"><span>文件指针</span></a></h3><ul><li>普通指针</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">// 野指针。</span>
p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">// 初始化方法1</span>
p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 初始化方法2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>文件指针</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span> <span class="token comment">// 野指针。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>文件指针，借助 “文件操作函数” 来改变 fp 为空、为野的情况！</li><li>举例： fopen() ---&gt; 将 fp 变为 非野。</li><li>操作文件，可以使用的函数：fputc、fgetc、fputs、fgets、fread、fwrite 。。。</li><li>纯文本文件:r w a：windows里面的记事本能打开并且能读懂的，就是纯文本文件txt md lrc</li><li>二进制文件:rb wb ab：b:binary</li></ul><h3 id="文件操作一般步骤" tabindex="-1"><a class="header-anchor" href="#文件操作一般步骤"><span>文件操作一般步骤</span></a></h3><ol><li>打开文件：fopen() ——&gt; FILE *fp;</li><li>读写文件：fputc、fgetc、fputs、fgets、fread、fwrite 。。。</li><li>关闭文件：fclose()</li></ol><h3 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作"><span>文件操作</span></a></h3><h4 id="打开文件" tabindex="-1"><a class="header-anchor" href="#打开文件"><span>打开文件</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span> <span class="token comment">// 野指针</span>
FILE <span class="token operator">*</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
参<span class="token number">1</span>：待打开的文件名（访问路径）
参<span class="token number">2</span>：文件打开权限。（初学，值掌握前<span class="token number">3</span>个）
r：只读方式打开文件， 文件如果不存在，报错！存在，以只读方式打开。不能写
w：只写方式打开文件， 文件如果不存在，创建一个空文件。文件已经存在，清空并打开。要保证文件夹存在
w<span class="token operator">+</span>：读、写方式打开文件，文件如果不存在，创建一个空文件。文件已经存在，清空并打开。
r<span class="token operator">+</span>：读、写方式打开文件，文件如果不存在，报错！存在，以读、写方式打开。
a：以追加方式打开文件。
b：操作二进制文件使用的。（Windows）
返回值：
成功：返回打开文件的文件指针<span class="token punctuation">(</span>fp<span class="token punctuation">)</span> 【强调】：这个fp指针，不使用“解引用”操作数据。
失败：<span class="token constant">NULL</span>
    
    
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关闭文件" tabindex="-1"><a class="header-anchor" href="#关闭文件"><span>关闭文件</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
参：打开的文件的fp（ <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回值 ）
返回值：
成功：<span class="token number">0</span>
失败：<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>
    <span class="token comment">// 打开文件</span>
    <span class="token comment">//fp = fopen(&quot;C:\\itcast\\test.txt&quot;, &quot;r&quot;); // 错误传参</span>
    <span class="token comment">//fp = fopen(&quot;C:\\\\itcast\\\\test.txt&quot;, &quot;r&quot;); // 正确传参</span>
    <span class="token comment">//fp = fopen(&quot;C:/itcast/test.txt&quot;, &quot;r&quot;); // 正确传参</span>
    <span class="token comment">//fp = fopen(&quot;C:/itcast/test2.txt&quot;, &quot;r&quot;); // 指定r打开，文件不存在，报错</span>
    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;C:/itcast/test2.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指定w打开，文件不存在创建，存在，清空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// printf(&quot;fopen error\\n&quot;);</span>
    	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 读写文件。。。</span>
    <span class="token comment">// 关闭</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d, ----------finish\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="绝对、相对路径" tabindex="-1"><a class="header-anchor" href="#绝对、相对路径"><span>绝对、相对路径</span></a></h4><ul><li><p>绝对路径：从系统磁盘的盘符开始，找到待访问的文件的路径。</p><ul><li>windows下的书写方法： <ul><li>C:\\Users\\afei\\Desktop\\TTTTTT\\01-复习.avi</li><li>C:/Users/afei/Desktop/TTTTTT/01-复习.avi ---- 也 Linux 系统。</li></ul></li></ul></li><li><p>相对路径：</p><ul><li><p>如果在 VS 环境下，使用Ctrl+F5编译执行，文件的相对路径是相对于 day11.vcxproj 所在目<br> 录位置。不是相对于 .c 文件。</p></li><li><p>如果双击 .c 文件同级目录下的 Debug目录下的 xxx.exe文件，文件的相对路径是相对于<br> xxx.exe 所在的目录位置。</p></li><li><p>如果 gcc 生成的xxx.exe 文件，运行。 文件的相对路径是相对于 xxx.exe 所在的目录位置。</p></li></ul></li></ul><h4 id="按字符写文件-fputc" tabindex="-1"><a class="header-anchor" href="#按字符写文件-fputc"><span>按字符写文件 fputc</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将指定一个字符，写入指定文件</span>
参<span class="token number">1</span>：待写入的 字符
参<span class="token number">2</span>：打开的文件fp （fopen的返回值）
返回值：
成功：写入到文件中的那个字符的 ASCII
失败：<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">//练习：创建一个新文件，向该文件中写入 26 个大写英文字母。</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> filename <span class="token operator">=</span> <span class="token string">&quot;03test.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件存在，会清空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 循环写26个大写字符到 文件中。</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	ret <span class="token operator">=</span> <span class="token function">fputc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	ch<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ret <span class="token operator">=</span> <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d, ----------finish\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fputc 向文件中写字符时，文件读写指针（参照光标理解），会自动后移。</p><h4 id="按字符读文件-fgetc" tabindex="-1"><a class="header-anchor" href="#按字符读文件-fgetc"><span>按字符读文件 fgetc</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从指定文件中，读取一个字符。</span>
参：待读取的文件<span class="token function">fp</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的返回值<span class="token punctuation">)</span>
返回值：
成功：实际读到的字符的ASCII
失败：<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3yaccdxnej30kh0khtbi.jpg" alt="43.png" tabindex="0"><figcaption>43.png</figcaption></figure><p>fgetc 在读取文件时，文件读写指针（参照光标理解），会自动后移。<br> 文本文件，结尾处，系统会自动添加一个结束标记 EOF ---&gt; -1 (#define EOF -1)<br> 文件关闭时，系统自动添加。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 利用 EOF 结束标记，按字符与读文件。</span>
<span class="token keyword">void</span> <span class="token function">read_file</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> filename <span class="token operator">=</span> <span class="token string">&quot;03test.txt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 存储读到的字符</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// r方式打开现有文件。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 从文件中读 字符</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//printf(&quot;ch = %c\\n&quot;, ch);</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token comment">// 已经读到文件末尾。</span>
        <span class="token punctuation">{</span>
        	<span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写到这，不读 EOF 结束标记。</span>
    <span class="token punctuation">}</span>
    ret <span class="token operator">=</span> <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d, ----------finish\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="feof-函数" tabindex="-1"><a class="header-anchor" href="#feof-函数"><span>feof 函数</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int feof(FILE * stream); // 判断是否到达文件结尾。
参：fopen()返回值
返回值：
到达文件结尾 ---&gt; 非0【真】
没到达文件结尾 ---&gt; 0【假】
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>作用：用来判断文件是否到达结尾。既能判断文本文件，也能判断二进制文件。</p></li><li><p>特性：要想使用feof()判断到达文件结尾，在 feof() 调用之前，必须要有 读文件的函数调用。</p></li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;04test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;没有到达文件结尾\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 没有这个fgetc函数读文件，feof函数，无法正常判断到达文件结尾。</span>
    <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一次读一个字符，读到的字符直接丢弃！</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按行读文件-fgets" tabindex="-1"><a class="header-anchor" href="#按行读文件-fgets"><span>按行读文件 fgets</span></a></h4><ul><li>获取一个字符串， 以\\n 作为结束标记。 自动添加 \\0。空间足够大，读 \\n, 空间不足，舍弃\\n。一定会预留空间 存 \\0</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
参<span class="token number">1</span>：用来存储字符串的空间首地址
参<span class="token number">2</span>：空间大小
参<span class="token number">3</span>：数据来源的文件fp。
返回值：
成功：返回实际读到的字符串。
失败：<span class="token constant">NULL</span>
<span class="token comment">// 示例：</span>
<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">--</span><span class="token operator">-&gt;</span> hello\\n\\<span class="token number">0</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">&quot;helloworld&quot;</span> <span class="token operator">--</span><span class="token operator">-&gt;</span> helloworl\\<span class="token number">0</span>
    
<span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span>fi1e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按行写文件-fputs" tabindex="-1"><a class="header-anchor" href="#按行写文件-fputs"><span>按行写文件 fputs</span></a></h4><p>写出一个字符串，到文件中。如果字符串中没有 \\n, 不会写\\n</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
参<span class="token number">1</span>：待写出的字符串首地址。
参<span class="token number">2</span>：写出到的文件fp。
返回值：
成功：<span class="token number">0</span>
失败：<span class="token operator">-</span><span class="token number">1</span>
<span class="token comment">// 示例：</span>
<span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> “hello”<span class="token punctuation">;</span>
<span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> 不添加 \\n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习：</p><p>获取用户键盘输入，将所有内容，写入到文件。 规定：如果用户输入了 “:wq”, 终止接收用户输<br> 入，将之前读到的数据，保存成一个文件。</p><p>从 stdin 中读入到程序中。写出到文件 fp。<br> feof() 在本题中用不上，用 strcmp 判断 读到的句子，是不是 “:wq\\n”。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 练习：接收用户键盘输入，写入文件。遇见 :wq 停止接收，保存成文件</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 创建文件，具备写权限</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;05test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建一个空间，保存读到的数据内容</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 从键盘读</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> MAX<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 每读的一行数据，都判断是否是 &quot;:wq\\n&quot;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;:wq\\n&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 用户输入了结束标志，终止读入，保存文件。</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 写入fp 文件中</span>
        <span class="token function">fputs</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 关闭文件。</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习：文件版四则运算</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>文件中有 表达式：
//四则运算.txt
10/2=
10*3=
4+3=
8-6=
读出表达式，运算，将结果写回文件。
//四则运算.txt
10/2=5
10*3=30
4+3=7
8-6=2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：<br> 10/2= ---&gt; fgets(buf, 4096, 四则运算.txt 对应的 fp) ----&gt; “10/2=\\n” ----&gt; 10 / 2 =<br> strtok()、sscanf() ---&gt; 选sscanf() 实现 ---&gt; sscanf(buf, “%d%c%d=\\n”, &amp;a, &amp;ch, &amp;b) ---&gt;<br> a = 10, b = 2 , ch = ‘/’</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token char">&#39;/&#39;</span><span class="token operator">:</span>
    	ret <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
    	<span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token char">&#39;*&#39;</span>
    	ret <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
    	<span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fopen(“”, “w”) 清空原来只有表达式没有结果的文件。将带有结果的表达式直接覆盖。<br> 拼接上述 字符串， 使用 <code>sprintf() / strcat() --&gt; “10/2=5\\n10*3=30\\n4+3=7\\n8-6=2\\n”</code><br> 最终写出：<code>char result[] “10/2=5\\n10*3=30\\n4+3=7\\n8-6=2\\n” ----fputs(result, fp)</code> <br> 实现</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUF_MAX</span> <span class="token expression"><span class="token number">4096</span></span></span>
<span class="token comment">// 写算式到文件中</span>
<span class="token keyword">void</span> <span class="token function">write_file06</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;C:/itcast/四则运算.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 退出函数调用。</span>
    <span class="token punctuation">}</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;10/2=\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;10*3=\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;4+3=\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;10-2=\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 从文件中读算式，提取、拆分、计算、写回</span>
<span class="token keyword">void</span> <span class="token function">read_file06</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 创建存储算式的 空间</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUF_MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建空间，保存算式及运算结果</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span>BUF_MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建空间，保存 4 个带有结果的算式</span>
    <span class="token keyword">char</span> result<span class="token punctuation">[</span>BUF_MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 定义变量，保存运算数和运算符, 结果</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;C:/itcast/四则运算.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 退出函数调用。</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 循环读取文件中的算式</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> BUF_MAX<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// buf = &quot;10/2=\\n\\0&quot;</span>
        <span class="token comment">// 判断是否到达文件结尾。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	<span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 将 sscanf 的返回值强转为 void</span>
        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">sscanf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;%d%c%d=\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a:10 b:2 ch:&#39;/&#39;</span>
        <span class="token comment">// 根据不同的运算符，做不同运算</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token char">&#39;/&#39;</span><span class="token operator">:</span>
                ret <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;*&#39;</span><span class="token operator">:</span>
                ret <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span>
                ret <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span>
                ret <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span> <span class="token operator">:</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;运算符错误\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>
        <span class="token comment">// 拼接 ret 到 算式上</span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;%d%c%d=%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10/2=5</span>
        <span class="token comment">// 测试，是否能正常获取数据，拼接成带结果的表达式。</span>
        <span class="token comment">//printf(&quot;%s&quot;, str);</span>
        <span class="token comment">// 拼接 4 个子算式，到 一个 大空间中</span>
        <span class="token function">strcat</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 测试，拼接 4 个子算式，到 一个 大空间中，打印输出。</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 清空原来没有结果的算式所在的文件。</span>
    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;C:/itcast/四则运算.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 退出函数调用。</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 将既有算式，又有结果的字符串，写入到同一个文件中。</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 测试写出算式到文件。</span>
    <span class="token function">write_file06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从键盘读一个字符，如果用户不输入，程序不继续，阻塞等。</span>
    <span class="token comment">// 测试读取算式</span>
    <span class="token function">read_file06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="getchar-函数-1" tabindex="-1"><a class="header-anchor" href="#getchar-函数-1"><span>getchar() 函数</span></a></h6><p>从键盘获取 一个字符。 返回 ASCII， 如果用户不输入，程序部向后执行。</p><h6 id="putchar-函数" tabindex="-1"><a class="header-anchor" href="#putchar-函数"><span>putchar() 函数</span></a></h6><p>向屏幕输出一个字符。<br> putchar(&#39;m&#39;);</p><h4 id="格式化读写文件" tabindex="-1"><a class="header-anchor" href="#格式化读写文件"><span>格式化读写文件</span></a></h4><h5 id="fprintf-函数" tabindex="-1"><a class="header-anchor" href="#fprintf-函数"><span>fprintf()函数</span></a></h5><p>printf ---- sprintf ---- fprintf<br> 变参函数，参数列表中，有 “...”, 最后一个固定参数通常是一个模式描述串(包含格式匹配<br> 符)， 函数实际调用时传递的参数的个数、类型、顺序，由这个固参决定。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d = %d%c%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> 屏幕
<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 内存空间 <span class="token operator">--</span><span class="token operator">-</span> 缓冲区
<span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;%d = %d%c%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> buf 中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数原型</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include &lt;stdio.h&gt;
int fprintf(FILE * stream, const char * format, ...); ----&gt; 文件fp 中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径法</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token comment">// NULL == fp</span>
<span class="token punctuation">{</span>
<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&quot;%d%c%d=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="fscanf-函数" tabindex="-1"><a class="header-anchor" href="#fscanf-函数"><span>fscanf()函数</span></a></h5><p>scanf ---- sscanf ----- fscanf</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> m<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> 键盘 <span class="token operator">--</span><span class="token operator">-&gt;</span> m
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;98&quot;</span><span class="token punctuation">;</span>
<span class="token function">sscanf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> str <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> m
FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> fp指向的文件中 <span class="token operator">--</span><span class="token operator">-&gt;</span> m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数原型</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径法</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token comment">// NULL == fp</span>
<span class="token punctuation">{</span>
    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&quot;%d%c%d=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %d\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c = %d\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%c%d=%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="格式化读写特性-扩展知识" tabindex="-1"><a class="header-anchor" href="#格式化读写特性-扩展知识"><span>格式化读写特性（扩展知识）</span></a></h4><h5 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int fprintf(FILE * stream, const char * format, ...);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>fsprintf() 函数的返回值：<br> 成功：实际写入文件的字符个数。<br> 失败：-1</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int fscanf(FILE * stream, const char * format, ...);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>fscanf() 函数的返回值：</p><p>成功：正确匹配的个数。<br> 失败：-1</p><h5 id="fscanf-读取特性" tabindex="-1"><a class="header-anchor" href="#fscanf-读取特性"><span>fscanf 读取特性</span></a></h5><ol><li>边界溢出问题。存储读取数据的空间，在使用之前，应该进行清空。否则会出现边界溢出异常。<br> 清空：memset(buf, 0, sizeof(buf));</li><li>fscanf 函数，每次在调用的同时，都会判断，下一次调用是否能成功匹配参2， 如果不匹配提前结<br> 束读取文件（ feof(fp) 为真 ）</li></ol><h4 id="练习-文件版排序" tabindex="-1"><a class="header-anchor" href="#练习-文件版排序"><span>练习：文件版排序</span></a></h4><p>生成随机数，写入文件。将文件内乱序随机数读出，排好序再写回文件。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 生成随机数，写入文件</span>
<span class="token keyword">void</span> <span class="token function">write_rand</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test03.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token comment">// NULL == fp</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment">// 播种随机数种子</span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//int num = rand() % 100; // 0 -- 99</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将生成的随机数写入到文件。</span>
    <span class="token punctuation">}</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> src<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">int</span> temp <span class="token operator">=</span> src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                src<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                src<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 从文件中，读取随机数</span>
<span class="token keyword">void</span> <span class="token function">read_rand</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 定义数组，存储 10 个随机数</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test03.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token comment">// NULL == fp</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 循环读取文件内的随机数</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 先存储，后判断，防止最后一个元素丢失。</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 使用冒泡排序</span>
    <span class="token function">BubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭随机数据的文件</span>
    <span class="token comment">// 清空 随机数据的文件</span>
    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test03.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token comment">// NULL == fp</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将排好序的数组写入到文件。</span>
    <span class="token punctuation">}</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">write_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从键盘获取一个字符，如果用户不输入，就阻塞程序，不向下执行。</span>
    <span class="token function">read_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;--------------finish\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按块读写文件" tabindex="-1"><a class="header-anchor" href="#按块读写文件"><span>按块读写文件</span></a></h4><p>fgetc - fputc<br> fgets - fputs<br> fprintf - fscanf<br> 以上3组函数，默认用来处理文本文件。<br> fwrite - fread 既可以处理文本文件，也可以处理二进制文件。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 2.写出数据</span>
<span class="token comment">//fputc 一次写一个字符，返回写出的字符</span>
<span class="token comment">//a--- 97</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span>，c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//fputs 一次写一个字符串，写出成功返回非负数，一般忽略返回值</span>
<span class="token comment">//细节:因为如果写出失败，那么就会有一个E0F的错误</span>
<span class="token keyword">int</span> n<span class="token operator">=</span> <span class="token function">fputs</span><span class="token punctuation">(</span>&quot;你好你好”，file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span>&quot;<span class="token operator">%</span>d\\n”，n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//fwrite 一次读多个，返回写出的字节个数</span>
<span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">97</span>，<span class="token number">98</span>，<span class="token number">99</span>，<span class="token number">100</span>，<span class="token number">101</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="fwrite-函数" tabindex="-1"><a class="header-anchor" href="#fwrite-函数"><span>fwrite()函数</span></a></h5><p>写出数据到文件中。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
参<span class="token number">1</span>：待写出的数据的首地址。
参<span class="token number">2</span>：待写出数据的大小 （一次写多大）
参<span class="token number">3</span>：写出的个数 （写多少次） 写出数据的总大小 <span class="token operator">=</span> 参<span class="token number">2</span> x 参<span class="token number">3</span>
参<span class="token number">4</span>：文件fp
返回值：
成功：永远返回参<span class="token number">3</span>。 通常调用函数时，将参<span class="token number">2</span>传<span class="token number">1</span>，参<span class="token number">3</span>代表实际写出的字节数。
失败：<span class="token number">0</span>
<span class="token comment">// fwrite 函数，写入数据到文件中时，是按 二进制 写入。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">stu_t</span><span class="token punctuation">;</span>
<span class="token comment">// 按块写文件，fwrite</span>
<span class="token keyword">void</span> <span class="token function">write_struct</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 定义结构体数组</span>
    <span class="token class-name">stu_t</span> stu<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;afei&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;andy&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span>
        <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&quot;lily&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span>
        <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&quot;james&quot;</span><span class="token punctuation">,</span> <span class="token number">40</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test04.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token comment">// NULL == fp</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">stu_t</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fwrite error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="fread-函数" tabindex="-1"><a class="header-anchor" href="#fread-函数"><span>fread()函数</span></a></h5><ul><li>从文件fp中读取数据。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">size_t</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
参<span class="token number">1</span>：读取到的数据存放的地址。
参<span class="token number">2</span>：一次读取数据的字节数 （一次读多大）
参<span class="token number">3</span>：读多少次 读出数据的总大小 <span class="token operator">=</span> 参<span class="token number">2</span> x 参<span class="token number">3</span>
参<span class="token number">4</span>：文件fp
返回值：
成功：永远返回参<span class="token number">3</span>。 通常调用函数时，将参<span class="token number">2</span>传<span class="token number">1</span>， 参<span class="token number">3</span>代表实际读出的字节数。
<span class="token number">0</span> ： <span class="token number">1</span>） 读失败
<span class="token number">2</span>） 到达文件结尾 <span class="token operator">==</span> <span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span>为真
    
<span class="token comment">// 2.读取数据</span>
<span class="token comment">//英文的abc:占用1个字节</span>
<span class="token comment">//中文:window64位当中，默认2个字节</span>
<span class="token comment">//fread细节:</span>
<span class="token comment">//在读取的时候，每次尽可能会把数组给装满，返回当前读取到的有效字节个数</span>
<span class="token comment">// 文件:100个字节</span>
<span class="token comment">// 数组长度:30</span>
<span class="token comment">//第一到三次每次读取前面30个字节，把数组给装满，函数返回30</span>
<span class="token comment">//第四次:读取剩余的10个字节，会把数据放在数组当中，函数返回10</span>
<span class="token comment">// 第五次:没有数据可以被读取了，函数返回8</span>
<span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>nl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1.4</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>inti<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span>&quot;<span class="token operator">%</span>c”<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token comment">// char addr[100];</span>
<span class="token punctuation">}</span> <span class="token class-name">stu_t</span><span class="token punctuation">;</span>
<span class="token comment">// 按块读文件，fread, 一次读一个 stu_t 元素</span>
<span class="token keyword">void</span> <span class="token function">read_struct</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test04.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token comment">// NULL == fp</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token class-name">stu_t</span> s1<span class="token punctuation">;</span>
    <span class="token comment">// 从文件中，按块读取，</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">stu_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;age=%d, name=%s, num=%d\\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span>age<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 按块读文件，fread, 一次读所有 stu_t 元素</span>
<span class="token keyword">void</span> <span class="token function">read_struct2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test04.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token comment">// NULL == fp</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">stu_t</span> s1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// stu_t *s1 = malloc(sizeof(stu_t) * 1024);</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 从文件中，循环按块读取，</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">stu_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//if (ret == 0) // 效果一样。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 效果一样。</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;读取到文件结尾\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;age=%d, name=%s, num=%d\\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习-大文件拷贝" tabindex="-1"><a class="header-anchor" href="#练习-大文件拷贝"><span>练习：大文件拷贝</span></a></h4><p>已知一个任意类型的文件，对该文件复制，产生一个相同的新文件。<br> 实现思路：</p><ol><li>打开两个文件， 一个 “r”, 另一个 “w”</li><li>从 r 中 fread，fwrite 写到 w 文件中</li><li>循环读，判断到达文件结尾，跳出循环。</li><li>关闭2个文件。<br> 注意：在windows下，打开二进制文件（mp4、MP3、avi、jpg）读写，需要 “b”。 如：“rb”<br> 、“wb”</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 创建一个缓存区（内存空间），用来存储读到的数据。</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    FILE<span class="token operator">*</span> rfp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\afei\\\\Desktop\\\\TTTTTT\\\\11-午后回顾.avi&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rfp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    FILE<span class="token operator">*</span> wfp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;mycopy.avi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rfp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 循环从文件中读， 写到另一个文件中。</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> rfp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 读到文件末尾。</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 没有读到文件末尾，将实际读到的数据，“原封不动的”写入 wfp 中。</span>
        <span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> ret<span class="token punctuation">,</span> wfp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>rfp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>wfp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//1.打开a.wmv文件(数据源)</span>
FILE<span class="token operator">*</span> file1 <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;c:\\\\Users\\\\1\\\\Desktop\\la.wmv&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.打开copy.wmv(目的地)</span>
FILE<span class="token operator">*</span> file2 <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;c:\\\\Users\\\\1\\\\Desktop\\laaal\\copy.wmv&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3.利用循环读取数据源，读完之后，再写到目的地</span>
<span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span>file1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
｛
    <span class="token comment">//就要把读取到的数据，再写到目的地文件当中</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>
｝
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="随机位置读写文件" tabindex="-1"><a class="header-anchor" href="#随机位置读写文件"><span>随机位置读写文件</span></a></h4><p>强调：文件读写指针，在一个文件内，只有一个。读、写都使用这一个。</p><h5 id="fseek" tabindex="-1"><a class="header-anchor" href="#fseek"><span>fseek</span></a></h5><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">fseek</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改文件偏移量(文件读写指</span>
针<span class="token punctuation">)</span>
参<span class="token number">1</span>：文件fp
参<span class="token number">2</span>：偏移量（矢量：正数向后，负数向前）
参<span class="token number">3</span>：偏移的起始位置
<span class="token constant">SEEK_SET</span><span class="token operator">:</span>文件开头位置
<span class="token constant">SEEK_CUR</span><span class="token operator">:</span>当前位置
<span class="token constant">SEEK_END</span><span class="token operator">:</span>文件结尾位置
返回值：成功：<span class="token number">0</span> 失败：<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="ftell" tabindex="-1"><a class="header-anchor" href="#ftell"><span>ftell</span></a></h5><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">ftell</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取文件偏移量（文件读写指针位置）</span>
返回值：从当前读写位置，到文件起始位置的偏移量。
<span class="token comment">// 借助 ftell(fp) + fseek(fp, -50, SEEK_END) 来获取文件大小。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="rewind" tabindex="-1"><a class="header-anchor" href="#rewind"><span>rewind</span></a></h5><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回卷文件读写指针。将文件读写指针移动到起始位置。</span>
<span class="token comment">// 相当于：fseek(fp, 0, SEEK_SET);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他文件相关操作" tabindex="-1"><a class="header-anchor" href="#其他文件相关操作"><span>其他文件相关操作</span></a></h4><h5 id="linux-和-windows-文件区别" tabindex="-1"><a class="header-anchor" href="#linux-和-windows-文件区别"><span>Linux 和 Windows 文件区别</span></a></h5><p>对于 二进制文件操作，Windows 下必须要使用 “b”， Linux下 二进制文件和 文件文件操作没区别。<br> windows下的回车换行 \\r\\n，回车 \\r, 换行 \\n。 Linux 下 回车换行 \\n。</p><ol><li>对文件指针，<br> 先写后读可以直接操作。windows 和 Linux 一致。<br> 先读后写。Linux无序修改。 Windows下需要在写操作之前，添加 fseek(fp, 0,<br> SEEK_CUR) 函数调用，获取文件读写指针，再来写。才能生效。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf=%s, ptr=%s\\n&quot;</span><span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_CUR</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取文件读写指针。 如果没有这行。win下程序会崩溃。</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;AAAAA&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="获取文件状态" tabindex="-1"><a class="header-anchor" href="#获取文件状态"><span>获取文件状态</span></a></h5><p>ftell(fp) + fseek(fp, 0, SEEK_END) 可以获取文件大小。此种方法获取文件大小，必须要打开文<br> 件，文件打开、关闭操作，对于系统而言，系统资源消耗较大。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
int stat(const char *path, struct stat *buf); // status
参1：文件访问路径
参2：文件属性结构体指针（传出参数：函数调用结束时，充当函数返回值）
返回值：成功：0 失败：-1
// 示例：
struct stat buf;
stat(&quot;待打开文件&quot;， &amp;buf);
buf.st_size 获取文件的实际大小。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="获取文件大小" tabindex="-1"><a class="header-anchor" href="#获取文件大小"><span>获取文件大小</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>struct stat buf;
int ret = stat(&quot;test06.txt&quot;, &amp;buf); // buf传出参数
printf(&quot;ret = %d\\n&quot;, ret);
printf(&quot;获取文件的大小为：%d\\n&quot;, buf.st_size);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="删除、重命名文件" tabindex="-1"><a class="header-anchor" href="#删除、重命名文件"><span>删除、重命名文件</span></a></h5><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除</span>
<span class="token keyword">int</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>oldpath<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newpath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重命名</span>
<span class="token comment">// 重命名：</span>
<span class="token comment">//int ret = rename(&quot;test06.txt&quot;, &quot;哼哼哈嘿.txt&quot;);</span>
<span class="token comment">//printf(&quot;ret = %d\\n&quot;, ret);</span>
<span class="token comment">// 删除文件</span>
<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;哼哼哈嘿.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ret = %d\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="缓冲区刷新" tabindex="-1"><a class="header-anchor" href="#缓冲区刷新"><span>缓冲区刷新</span></a></h5><p>标准输出 -- stdout -- 标准输出缓冲区。<br> 写给屏幕的数据，都是先存入缓冲区中，由缓冲区一次性刷新到物理设备（屏幕）<br> 标准输入 --- stdin -- 标准输入缓冲区<br> 从键盘读取的数据，直接读到缓冲区，由缓冲区给程序提供数据。<br> 缓冲机制：</p><ol><li>行缓冲：遇到 \\n 刷新缓冲区的数据到物理设备上。printf();</li><li>全缓冲：缓冲区存满，数据才刷新到物理设备上。文件。</li><li>无缓冲：缓冲区中只要有数据，立即刷新到物理设备。perror</li></ol><p>手动刷新缓冲区的方法：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">fflush</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
参：文件fp
返回值：成功：<span class="token number">0</span> 失败：<span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当文件关闭时，会强制刷新缓冲区，写入磁盘。—— 隐式回收<br> 隐式回收：关闭文件。刷新缓冲区。释放malloc申请的内存。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test10.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fopen error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;:&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	<span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">fputc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 手动刷新缓冲区，写入物理磁盘。</span>
        <span class="token function">fflush</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当文件关闭时，会强制刷新缓冲区，写入磁盘。</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,262);function f(w,y){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,s("ul",null,[s("li",null,[n("打开微软的官方网站 "),s("a",r,[n("https://visualstudio.microsoft.com/，下载"),t(a)]),n(" Visual Studio 安装包。")])]),k,s("p",null,[d,v,n(" 参1：待拆分字符串"),m,n(' 参2：分割符组成的字符串。 strtok("'),s("a",b,[n("www.baidu.com"),t(a)]),n(`", "."); // 写成 '.' 错误！`)]),s("p",null,[n("按照（参2）既定的分割符， 来拆分字符串。 "),s("a",h,[n("www.baidu.com"),t(a)]),n(" 按 “.” 拆分。")]),g])}const j=e(i,[["render",f],["__file","c.html.vue"]]),_=JSON.parse('{"path":"/backend/c.html","title":"C语言","lang":"zh-CN","frontmatter":{"description":"C语言 计算机系统组成 1.png1.png 输⼊设备： ⿏标、键盘、⻨克⻛、扫描仪 输出设备： 显示屏、扬声器、打印机。 中央处理器（cpu）： 运算速度⾮常快。ns 级别。 运算器（算逻单元）：负责数据运算 控制器：帮助cpu获取指令交给运算器 寄存器：存储cpu⽤来运算的数据 预取器：从内存中获取程序中的指令。 MMU：虚拟内存映射。 内存储器（...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/backend/c.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"C语言"}],["meta",{"property":"og:description","content":"C语言 计算机系统组成 1.png1.png 输⼊设备： ⿏标、键盘、⻨克⻛、扫描仪 输出设备： 显示屏、扬声器、打印机。 中央处理器（cpu）： 运算速度⾮常快。ns 级别。 运算器（算逻单元）：负责数据运算 控制器：帮助cpu获取指令交给运算器 寄存器：存储cpu⽤来运算的数据 预取器：从内存中获取程序中的指令。 MMU：虚拟内存映射。 内存储器（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vuyhbjtwj30o70ggtas.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C语言\\",\\"image\\":[\\"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vuyhbjtwj30o70ggtas.jpg\\",\\"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vvbwijq4j30nb0j3tb3.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vvczzcuzj30oh0ehwfk.jpg\\",\\"https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x9xhpcicj30p70en0ut.jpg\\",\\"https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vvou58s8j30aw091aab.jpg\\",\\"https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vvou5emej30fq0efabm.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vvtz41tyj30os07kq41.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vx36qzvuj30lq0ig77e.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3xa9hxqxpj30kc0ctt9l.jpg\\",\\"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyczxss2j32k81c87tr.jpg\\",\\"https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vy88hk4aj31wp0ypdy0.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vy88hggmj31z013ydqv.jpg\\",\\"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vy88herfj31z214247c.jpg\\",\\"https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vycetg4uj31z0140qdd.jpg\\",\\"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vy88gytkj31hs0raqbg.jpg\\",\\"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vy88gpgbj31hq0rgna8.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vygg53pbj31k811itkq.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyi23s7lj30s60ir0wq.jpg\\",\\"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyj7ecurj30sg0jqq6j.jpg\\",\\"https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vynf59zqj309p0iitad.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vylbpqnxj30j407r77a.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyj7dsgfj30q50i542k.jpg\\",\\"https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyopnyvkj30hy06ktai.jpg\\",\\"https://i4.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x4f496mwj30k50cawgd.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vywthnkqj30jv07daan.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vyqqaficj312w0h30x8.jpg\\",\\"https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vz31zirmj30h90bk75m.jpg\\",\\"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vz4ibvp0j30kc07jjsb.jpg\\",\\"https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3xb3nmpz3j30ku06zt9w.jpg\\",\\"https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3w0e0vuyqj315u0egq9o.jpg\\",\\"https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x028s91fj30c3078t8t.jpg\\",\\"https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x16cu8f7j30ku0atdh2.jpg\\",\\"https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3y7m40bhpj30kv09rmy1.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x3z2e2k5j30la0c0dgf.jpg\\",\\"https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x40nn9llj30jn09d3yz.jpg\\",\\"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3y8fn6jhzj30kl07caag.jpg\\",\\"https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x4345dpmj30jg08wgms.jpg\\",\\"https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x46tvql7j30kw0b5wfi.jpg\\",\\"https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x47cp7oqj30kf09pq45.jpg\\",\\"https://i1.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3x4xyte00j30kt0bzt9o.jpg\\",\\"https://i2.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3z8y6achrj30uv0de3zz.jpg\\",\\"https://i3.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3yaccdxnej30kh0khtbi.jpg\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"计算机系统组成","slug":"计算机系统组成","link":"#计算机系统组成","children":[]},{"level":2,"title":"硬件系统","slug":"硬件系统","link":"#硬件系统","children":[{"level":3,"title":"主机部分","slug":"主机部分","link":"#主机部分","children":[]},{"level":3,"title":"外设部分","slug":"外设部分","link":"#外设部分","children":[]}]},{"level":2,"title":"软件系统","slug":"软件系统","link":"#软件系统","children":[{"level":3,"title":"系统软件","slug":"系统软件","link":"#系统软件","children":[]},{"level":3,"title":"应⽤软件","slug":"应用软件","link":"#应用软件","children":[]}]},{"level":2,"title":"编译器和语⾔","slug":"编译器和语言","link":"#编译器和语言","children":[]},{"level":2,"title":"C语⾔简述","slug":"c语言简述","link":"#c语言简述","children":[{"level":3,"title":"计算机语⾔发展史","slug":"计算机语言发展史","link":"#计算机语言发展史","children":[]},{"level":3,"title":"C语⾔标准","slug":"c语言标准","link":"#c语言标准","children":[]},{"level":3,"title":"C语⾔的优缺点","slug":"c语言的优缺点","link":"#c语言的优缺点","children":[]},{"level":3,"title":"C语⾔的应⽤领域","slug":"c语言的应用领域","link":"#c语言的应用领域","children":[]},{"level":3,"title":"C语⾔32个关键字","slug":"c语言32个关键字","link":"#c语言32个关键字","children":[]}]},{"level":2,"title":"第一个程序HelloWorld","slug":"第一个程序helloworld","link":"#第一个程序helloworld","children":[]},{"level":2,"title":"常⻅IDE","slug":"常⻅ide","link":"#常⻅ide","children":[{"level":3,"title":"VS安装","slug":"vs安装","link":"#vs安装","children":[]},{"level":3,"title":"VS2022基本使⽤","slug":"vs2022基本使用","link":"#vs2022基本使用","children":[]}]},{"level":2,"title":"HelloWorld释义","slug":"helloworld释义","link":"#helloworld释义","children":[{"level":3,"title":"代码运⾏ 4 种模式","slug":"代码运行-4-种模式","link":"#代码运行-4-种模式","children":[]}]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":2,"title":"System函数","slug":"system函数","link":"#system函数","children":[]},{"level":2,"title":"键盘录入的基本使用","slug":"键盘录入的基本使用","link":"#键盘录入的基本使用","children":[]},{"level":2,"title":"main函数种类","slug":"main函数种类","link":"#main函数种类","children":[{"level":3,"title":"main函数标准类型","slug":"main函数标准类型","link":"#main函数标准类型","children":[]},{"level":3,"title":"main函数其他类型","slug":"main函数其他类型","link":"#main函数其他类型","children":[]}]},{"level":2,"title":"代码执行流程分析/gcc编译4步骤","slug":"代码执行流程分析-gcc编译4步骤","link":"#代码执行流程分析-gcc编译4步骤","children":[{"level":3,"title":"整体过程","slug":"整体过程","link":"#整体过程","children":[]},{"level":3,"title":"预处理","slug":"预处理","link":"#预处理","children":[]},{"level":3,"title":"编译","slug":"编译","link":"#编译","children":[]},{"level":3,"title":"汇编","slug":"汇编","link":"#汇编","children":[]},{"level":3,"title":"连接/链接","slug":"连接-链接","link":"#连接-链接","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"printf格式化输出int","slug":"printf格式化输出int","link":"#printf格式化输出int","children":[]},{"level":2,"title":"程序调试","slug":"程序调试","link":"#程序调试","children":[{"level":3,"title":"程序调试流程","slug":"程序调试流程","link":"#程序调试流程","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[{"level":3,"title":"变量 3 要素","slug":"变量-3-要素","link":"#变量-3-要素","children":[]},{"level":3,"title":"变量定义：","slug":"变量定义","link":"#变量定义","children":[]},{"level":3,"title":"变量声明：","slug":"变量声明","link":"#变量声明","children":[]},{"level":3,"title":"变量的注意事项","slug":"变量的注意事项","link":"#变量的注意事项","children":[]}]},{"level":2,"title":"常量","slug":"常量","link":"#常量","children":[]},{"level":2,"title":"标识符","slug":"标识符","link":"#标识符","children":[{"level":3,"title":"硬性要求","slug":"硬性要求","link":"#硬性要求","children":[]},{"level":3,"title":"命名规范","slug":"命名规范","link":"#命名规范","children":[]}]},{"level":2,"title":"sizeof关键字","slug":"sizeof关键字","link":"#sizeof关键字","children":[]},{"level":2,"title":"整型","slug":"整型","link":"#整型","children":[{"level":3,"title":"有符号整型","slug":"有符号整型","link":"#有符号整型","children":[]},{"level":3,"title":"无符号整型","slug":"无符号整型","link":"#无符号整型","children":[]}]},{"level":2,"title":"输出常量","slug":"输出常量","link":"#输出常量","children":[]},{"level":2,"title":"char类型","slug":"char类型","link":"#char类型","children":[{"level":3,"title":"ASCII码","slug":"ascii码","link":"#ascii码","children":[]},{"level":3,"title":"转义字符","slug":"转义字符","link":"#转义字符","children":[]}]},{"level":2,"title":"实型（浮点型）【了解】","slug":"实型-浮点型-【了解】","link":"#实型-浮点型-【了解】","children":[]},{"level":2,"title":"bool 类型","slug":"bool-类型","link":"#bool-类型","children":[]},{"level":2,"title":"进制和转换","slug":"进制和转换","link":"#进制和转换","children":[{"level":3,"title":"8进制","slug":"_8进制","link":"#_8进制","children":[]},{"level":3,"title":"16进制","slug":"_16进制","link":"#_16进制","children":[]},{"level":3,"title":"小结","slug":"小结-1","link":"#小结-1","children":[]},{"level":3,"title":"常用的格式匹配符","slug":"常用的格式匹配符","link":"#常用的格式匹配符","children":[]}]},{"level":2,"title":"编码和存储","slug":"编码和存储","link":"#编码和存储","children":[{"level":3,"title":"无符号存储","slug":"无符号存储","link":"#无符号存储","children":[]},{"level":3,"title":"有符号存储","slug":"有符号存储","link":"#有符号存储","children":[]}]},{"level":2,"title":"数据溢出","slug":"数据溢出","link":"#数据溢出","children":[{"level":3,"title":"无符号数","slug":"无符号数","link":"#无符号数","children":[]},{"level":3,"title":"有符号数","slug":"有符号数","link":"#有符号数","children":[]},{"level":3,"title":"小结","slug":"小结-2","link":"#小结-2","children":[]}]},{"level":2,"title":"不常用关键字（了解）","slug":"不常用关键字-了解","link":"#不常用关键字-了解","children":[]},{"level":2,"title":"输入输出函数","slug":"输入输出函数","link":"#输入输出函数","children":[{"level":3,"title":"输出函数","slug":"输出函数","link":"#输出函数","children":[]},{"level":3,"title":"输入函数","slug":"输入函数","link":"#输入函数","children":[]}]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"算数运算符","slug":"算数运算符","link":"#算数运算符","children":[]},{"level":3,"title":"自增自减运算符","slug":"自增自减运算符","link":"#自增自减运算符","children":[]},{"level":3,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":3,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"运算符优先级","slug":"运算符优先级","link":"#运算符优先级","children":[]},{"level":3,"title":"逗号运算符","slug":"逗号运算符","link":"#逗号运算符","children":[]},{"level":3,"title":"三目运算符","slug":"三目运算符","link":"#三目运算符","children":[]}]},{"level":2,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":2,"title":"if 分支语句","slug":"if-分支语句","link":"#if-分支语句","children":[]},{"level":2,"title":"switch 分支语句","slug":"switch-分支语句","link":"#switch-分支语句","children":[{"level":3,"title":"case穿透","slug":"case穿透","link":"#case穿透","children":[]}]},{"level":2,"title":"while 循环语句","slug":"while-循环语句","link":"#while-循环语句","children":[]},{"level":2,"title":"do while 循环语句","slug":"do-while-循环语句","link":"#do-while-循环语句","children":[{"level":3,"title":"配置 VS2019 快捷导入代码","slug":"配置-vs2019-快捷导入代码","link":"#配置-vs2019-快捷导入代码","children":[]}]},{"level":2,"title":"for 循环","slug":"for-循环","link":"#for-循环","children":[{"level":3,"title":"嵌套 for 循环","slug":"嵌套-for-循环","link":"#嵌套-for-循环","children":[]}]},{"level":2,"title":"for 和 while 的区别","slug":"for-和-while-的区别","link":"#for-和-while-的区别","children":[]},{"level":2,"title":"跳转语句","slug":"跳转语句","link":"#跳转语句","children":[{"level":3,"title":"break","slug":"break","link":"#break","children":[]},{"level":3,"title":"continue","slug":"continue","link":"#continue","children":[]},{"level":3,"title":"goto","slug":"goto","link":"#goto","children":[]}]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]},{"level":2,"title":"二维数组","slug":"二维数组","link":"#二维数组","children":[]},{"level":2,"title":"多维数组(了解)","slug":"多维数组-了解","link":"#多维数组-了解","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[{"level":3,"title":"字符数组和字符串的区别","slug":"字符数组和字符串的区别","link":"#字符数组和字符串的区别","children":[]},{"level":3,"title":"字符串输出","slug":"字符串输出","link":"#字符串输出","children":[]},{"level":3,"title":"其他格式匹配符","slug":"其他格式匹配符","link":"#其他格式匹配符","children":[]},{"level":3,"title":"scanf 获取字符串","slug":"scanf-获取字符串","link":"#scanf-获取字符串","children":[]},{"level":3,"title":"字符串操作函数","slug":"字符串操作函数","link":"#字符串操作函数","children":[]},{"level":3,"title":"字符串追加","slug":"字符串追加","link":"#字符串追加","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"函数的作用","slug":"函数的作用","link":"#函数的作用","children":[]},{"level":3,"title":"函数分类","slug":"函数分类","link":"#函数分类","children":[]},{"level":3,"title":"使用函数","slug":"使用函数","link":"#使用函数","children":[]},{"level":3,"title":"exit 函数","slug":"exit-函数","link":"#exit-函数","children":[]}]},{"level":2,"title":"多文件编程","slug":"多文件编程","link":"#多文件编程","children":[]},{"level":2,"title":"指针","slug":"指针","link":"#指针","children":[{"level":3,"title":"指针和内存单元","slug":"指针和内存单元","link":"#指针和内存单元","children":[]},{"level":3,"title":"指针的作用","slug":"指针的作用","link":"#指针的作用","children":[]},{"level":3,"title":"指针的定义和使用","slug":"指针的定义和使用","link":"#指针的定义和使用","children":[]},{"level":3,"title":"野指针","slug":"野指针","link":"#野指针","children":[]},{"level":3,"title":"空指针","slug":"空指针","link":"#空指针","children":[]},{"level":3,"title":"泛型指针 (万能指针 void *)","slug":"泛型指针-万能指针-void","link":"#泛型指针-万能指针-void","children":[]},{"level":3,"title":"数组指针和指针数组","slug":"数组指针和指针数组","link":"#数组指针和指针数组","children":[]},{"level":3,"title":"函数指针","slug":"函数指针","link":"#函数指针","children":[]}]},{"level":2,"title":"const关键字","slug":"const关键字","link":"#const关键字","children":[]},{"level":2,"title":"指针和数组","slug":"指针和数组","link":"#指针和数组","children":[{"level":3,"title":"数组名","slug":"数组名","link":"#数组名","children":[]},{"level":3,"title":"取数组元素","slug":"取数组元素","link":"#取数组元素","children":[]},{"level":3,"title":"指针和数组名区别","slug":"指针和数组名区别","link":"#指针和数组名区别","children":[]},{"level":3,"title":"指针的算数运算","slug":"指针的算数运算","link":"#指针的算数运算","children":[]},{"level":3,"title":"指针实现 strlen()","slug":"指针实现-strlen","link":"#指针实现-strlen","children":[]},{"level":3,"title":"指针比较运算","slug":"指针比较运算","link":"#指针比较运算","children":[]},{"level":3,"title":"指针数组","slug":"指针数组","link":"#指针数组","children":[]},{"level":3,"title":"多级指针","slug":"多级指针","link":"#多级指针","children":[]}]},{"level":2,"title":"指针和函数","slug":"指针和函数","link":"#指针和函数","children":[{"level":3,"title":"栈帧","slug":"栈帧","link":"#栈帧","children":[]},{"level":3,"title":"传值和传址","slug":"传值和传址","link":"#传值和传址","children":[]},{"level":3,"title":"数组做函数参数","slug":"数组做函数参数","link":"#数组做函数参数","children":[]},{"level":3,"title":"指针做函数返回值","slug":"指针做函数返回值","link":"#指针做函数返回值","children":[]}]},{"level":2,"title":"指针和字符串","slug":"指针和字符串","link":"#指针和字符串","children":[{"level":3,"title":"字符串比较（strcmp()函数）","slug":"字符串比较-strcmp-函数","link":"#字符串比较-strcmp-函数","children":[]},{"level":3,"title":"字符串拷贝(strcpy()函数)","slug":"字符串拷贝-strcpy-函数","link":"#字符串拷贝-strcpy-函数","children":[]},{"level":3,"title":"在字符串中查找字符出现的位置(strchr()函数)","slug":"在字符串中查找字符出现的位置-strchr-函数","link":"#在字符串中查找字符出现的位置-strchr-函数","children":[]},{"level":3,"title":"字符串去空格","slug":"字符串去空格","link":"#字符串去空格","children":[]},{"level":3,"title":"str 中 substr 出现的次数与strstr() 函数","slug":"str-中-substr-出现的次数与strstr-函数","link":"#str-中-substr-出现的次数与strstr-函数","children":[]},{"level":3,"title":"求字符串非空格元素个数","slug":"求字符串非空格元素个数","link":"#求字符串非空格元素个数","children":[]},{"level":3,"title":"字符串逆置","slug":"字符串逆置","link":"#字符串逆置","children":[]},{"level":3,"title":"判断字符串是回文","slug":"判断字符串是回文","link":"#判断字符串是回文","children":[]},{"level":3,"title":"字符串处理函数：","slug":"字符串处理函数","link":"#字符串处理函数","children":[]}]},{"level":2,"title":"atoi","slug":"atoi","link":"#atoi","children":[]},{"level":2,"title":"内存管理","slug":"内存管理","link":"#内存管理","children":[{"level":3,"title":"局部变量","slug":"局部变量","link":"#局部变量","children":[]},{"level":3,"title":"全局变量","slug":"全局变量","link":"#全局变量","children":[]},{"level":3,"title":"static变量","slug":"static变量","link":"#static变量","children":[]},{"level":3,"title":"static 函数","slug":"static-函数","link":"#static-函数","children":[]},{"level":3,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":3,"title":"命名冲突","slug":"命名冲突","link":"#命名冲突","children":[]},{"level":3,"title":"内存4区模型","slug":"内存4区模型","link":"#内存4区模型","children":[]},{"level":3,"title":"Heap堆空间","slug":"heap堆空间","link":"#heap堆空间","children":[]},{"level":3,"title":"内存常见问题","slug":"内存常见问题","link":"#内存常见问题","children":[]},{"level":3,"title":"函数内申请空间使用。","slug":"函数内申请空间使用。","link":"#函数内申请空间使用。","children":[]}]},{"level":2,"title":"结构体","slug":"结构体","link":"#结构体","children":[{"level":3,"title":"结构体定义语法","slug":"结构体定义语法","link":"#结构体定义语法","children":[]},{"level":3,"title":"普通结构体变量","slug":"普通结构体变量","link":"#普通结构体变量","children":[]},{"level":3,"title":"结构体指针变量","slug":"结构体指针变量","link":"#结构体指针变量","children":[]},{"level":3,"title":"非常规定义语法（了解）","slug":"非常规定义语法-了解","link":"#非常规定义语法-了解","children":[]},{"level":3,"title":"结构体数组","slug":"结构体数组","link":"#结构体数组","children":[]},{"level":3,"title":"结构体嵌套","slug":"结构体嵌套","link":"#结构体嵌套","children":[]},{"level":3,"title":"做函数参数、返回值","slug":"做函数参数、返回值","link":"#做函数参数、返回值","children":[]},{"level":3,"title":"含有指针成员的结构体","slug":"含有指针成员的结构体","link":"#含有指针成员的结构体","children":[]},{"level":3,"title":"结构体内存对齐","slug":"结构体内存对齐","link":"#结构体内存对齐","children":[]}]},{"level":2,"title":"typedef 关键字","slug":"typedef-关键字","link":"#typedef-关键字","children":[]},{"level":2,"title":"共用体（联合体）","slug":"共用体-联合体","link":"#共用体-联合体","children":[]},{"level":2,"title":"结构体和共用体区别","slug":"结构体和共用体区别","link":"#结构体和共用体区别","children":[]},{"level":2,"title":"枚举","slug":"枚举","link":"#枚举","children":[]},{"level":2,"title":"文件","slug":"文件","link":"#文件","children":[{"level":3,"title":"系统文件","slug":"系统文件","link":"#系统文件","children":[]},{"level":3,"title":"文件分类","slug":"文件分类","link":"#文件分类","children":[]},{"level":3,"title":"文件指针","slug":"文件指针","link":"#文件指针","children":[]},{"level":3,"title":"文件操作一般步骤","slug":"文件操作一般步骤","link":"#文件操作一般步骤","children":[]},{"level":3,"title":"文件操作","slug":"文件操作","link":"#文件操作","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":122.3,"words":36689},"filePathRelative":"backend/c.md","excerpt":"\\n<h2>计算机系统组成</h2>\\n<figure><img src=\\"https://i0.wp.com/wx4.sinaimg.cn/large/0070JETugy1i3vuyhbjtwj30o70ggtas.jpg\\" alt=\\"1.png\\" tabindex=\\"0\\"><figcaption>1.png</figcaption></figure>\\n<ul>\\n<li>输⼊设备：\\n<ul>\\n<li>⿏标、键盘、⻨克⻛、扫描仪</li>\\n</ul>\\n</li>\\n<li>输出设备：\\n<ul>\\n<li>显示屏、扬声器、打印机。</li>\\n</ul>\\n</li>\\n<li>中央处理器（cpu）： 运算速度⾮常快。ns 级别。\\n<ul>\\n<li>运算器（算逻单元）：负责数据运算</li>\\n<li>控制器：帮助cpu获取指令交给运算器</li>\\n<li>寄存器：存储cpu⽤来运算的数据</li>\\n<li>预取器：从内存中获取程序中的指令。</li>\\n<li>MMU：虚拟内存映射。</li>\\n</ul>\\n</li>\\n<li>内存储器（内存）：\\n<ul>\\n<li>ROM：（read only memory）</li>\\n<li>RAM：（随机：random access memory）</li>\\n<li>内存靠 “电信号” 来存储数据。 断电没！数据存储不能持久化。 优点：数据读写速度快。</li>\\n</ul>\\n</li>\\n<li>外存储器（硬盘）：\\n<ul>\\n<li>硬盘采⽤ “磁信号” 来存储数据。断电依然在。数据能持久化存储。 缺点：数据读写速度慢。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{j as comp,_ as data};
