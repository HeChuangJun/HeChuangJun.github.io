import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as r,e as a}from"./app-7KT7HDzT.js";const n={},p=a('<h2 id="mvc模式-√设计模式及场景-线程安全" tabindex="-1"><a class="header-anchor" href="#mvc模式-√设计模式及场景-线程安全"><span>MVC模式？√设计模式及场景？线程安全？</span></a></h2><p>Model-View-Controller 架构模式，分离了表现与交互。包括<br> Model模型：javaBean，负责处理与数据和业务逻辑<br> View视图：JSP或HTML，负责显示数据，提供用户界面。接收用户输入并传递给Controller处理<br> Controller控制器：servlet或Filter，接收用户输入，调用Model处理逻辑更新数据。根据结果选择View显示</p><p>单例\\代理模式：controller是单例\\代理产生的</p><p>Servlet、SpringMVC线程不安全，单例<br> Struts2线程安全，Action多例，每个请求都创建Action处理</p><h2 id="mvc、restful执行流程-√核心组件-handleradapter作用-√" tabindex="-1"><a class="header-anchor" href="#mvc、restful执行流程-√核心组件-handleradapter作用-√"><span>MVC、Restful执行流程？√核心组件？HandlerAdapter作用？√</span></a></h2><p>用户发送请求至前端控制器DispatcherServlet<br> DispatcherServlet收到请求调用HandlerMapping处理器映射器。~根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)并返回HandlerExecutionChain<br> DispatcherServlet调用HandlerAdapter处理器适配器根据类型调用处理器controller。中途调用拦截器的preHandle和postHandle方法，HandlerAdapter将controller结果ModelAndView返回给DispatcherServlet<br> DispatcherServlet将ModelAndView传给ViewReslover视图解析器解析后返回View<br> DispatcherServlet对View进行渲染视图（将模型数据填充至视图中）并返回给客户端</p><p>Controller返回数据对象（User）或ResponseEntity<br> DispatcherServlet通过HttpMessageConverter将数据对象序列化为JSON返回给客户端</p><figure><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQaeb1d11d0aed1c589fcb63445706eea7.png" alt="springmvcrestful.png" tabindex="0"><figcaption>springmvcrestful.png</figcaption></figure><p>DispatcherServlet：前端控制器，mvc模式中的c，负责调用其它组件处理用户的请求，降低耦合性<br> HandlerMapping：处理器映射器。负责根据用户请求url找到Handler即处理器，提供配置文件方式<br> Handler：处理器，后端控制器，处理用户请求<br> HandlerAdapter：处理器适配器，扩展适配器可以对更多类型的处理器进行执行。<br> ViewResolver：视图解析器。首先根据逻辑视图名解析页面地址再生成View视图返回给用户<br> ModelAndView：装载了模型数据和视图信息，作为Handler处理结果返回给DispatcherServlet。<br> View：支持视jstlView、freemarkerView<br> HandlerInterceptor：处理器拦截器，拦截处理接口<br> HandlerExecutionChain：处理器执行链，包括Handler和HandlerInterceptor</p><p>三大组件：处理器映射器、处理器适配器、视图解析器。handler、view需要自定义<br><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ9bf4717c3211f8a745e466349855d97a.png" alt="springmvcexecutionflow2.png"></p><h2 id="springmvc注解-requestmapping和-getmapping区别" tabindex="-1"><a class="header-anchor" href="#springmvc注解-requestmapping和-getmapping区别"><span>SpringMVC注解？@RequestMapping和@GetMapping区别？</span></a></h2><p>@RequestMapping：用于类上表示类中的响应请求的方法的父路径；方法上则映射url和http请求方法。Restful接口根据请求类型使用不同的注解@GetMapping、@PostMapping、@PutMapping、@DeleteMapping<br> @RequestBody：接收HTTP请求的json数据并转换为Java对象<br> @ResponseBody：将Controller方法返回对象转化为json对象响应给客户<br> @Controller：组合@Component，MVC的控制层C<br> @RestController：组合@ResponseBody，返回JSON数据格式，由客户端的&quot;ACCEPT&quot;请求头决定<br> @PathVariable：用于接收路径参数，@RequestMapping(&quot;/{name}&quot;)将注解放在参数前</p><h2 id="如何解决post、get请求中文乱码问题" tabindex="-1"><a class="header-anchor" href="#如何解决post、get请求中文乱码问题"><span>如何解决POST、GET请求中文乱码问题？</span></a></h2><p>POST：web.xml中配置CharacterEncodingFilter过滤器，编码utf-8<br> GET：<br> 修改tomcat配置文件<code>&lt;ConnectorURIEncoding=&quot;utf-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort&gt;</code><br> 使用拦截器解码String userName = new String(request.getParamter(&quot;x&quot;).getBytes(&quot;ISO8859-1&quot;),&quot;utf-8&quot;)</p><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><p>异常解析器HandlerExceptionResolver接口，将处理器handler的异常转换成ModelAndView结果</p><h2 id="拦截器的方法-作用-和-filter过滤器区别-√" tabindex="-1"><a class="header-anchor" href="#拦截器的方法-作用-和-filter过滤器区别-√"><span>拦截器的方法？作用？和 Filter过滤器区别？√</span></a></h2><p>preHandle方法，调用Controller方法前执行。按定义顺序调用。若返回false则不再调用Controller方法<br> postHandle方法，后。逆<br> afterCompletion方法，返回结果后执行，逆，preHandle方法返回true时就执行，无视异常</p><p>记录日志。需要登陆的请求操作，拦截未登陆的用户</p><p>拦截器基于Spring容器，Filter基于Servlet容器<br> 拦截器作用于SpringMVC请求的controller，Filter作用于匹配的路径请求包括静态资源<br> 拦截器在DispatcherServlet之后执行，Filter在DispatcherServlet 之前执行<br> 拦截器处理与业务相关的逻辑，如权限校验、日志记录；Filter处理通用的请求预处理，如编码设置、跨域</p><h2 id="http请求方法有哪些-restful操作线程安全-幂等操作及重要性-api是无状态的吗" tabindex="-1"><a class="header-anchor" href="#http请求方法有哪些-restful操作线程安全-幂等操作及重要性-api是无状态的吗"><span>http请求方法有哪些？RESTful操作线程安全？幂等操作及重要性？API是无状态的吗?</span></a></h2><p>GET、POST、PUT、DELETE检索、创建、更新、删除服务端资源</p><p>取决于是否修改服务端的资源。<br> 用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用</p><p>因此GET和HEAD是安全的，PUT，POST和DELETE不安全<br> 如果多个POST请求将在服务端创建不同的资源。多个PUT请求得到相同的结果。</p><p>是无状态的，因为基于HTTP是无状态<br> 请求应该包含所需的所有细节。它不应该依赖于以前或下一个请求或服务器端维护的一些数据，例如会话。</p><h2 id="如何支持新请求-响应" tabindex="-1"><a class="header-anchor" href="#如何支持新请求-响应"><span>如何支持新请求/响应？</span></a></h2><p>创建HttpMessageConverter自定义实现。实现AbstractHttpMessageConverter，<br> 用WebMvcConfigurerAdapter的extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)方法注册</p>',27),l=[p];function i(o,s){return t(),r("div",null,l)}const g=e(n,[["render",i],["__file","springmvc.html.vue"]]),h=JSON.parse('{"path":"/interview/framework/springmvc.html","title":"Spring MVC","lang":"zh-CN","frontmatter":{"title":"Spring MVC","date":"2023-01-01T00:00:00.000Z","tags":"java","categories":"面试","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/framework/springmvc.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"Spring MVC"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQaeb1d11d0aed1c589fcb63445706eea7.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring MVC\\",\\"image\\":[\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQaeb1d11d0aed1c589fcb63445706eea7.png\\",\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ9bf4717c3211f8a745e466349855d97a.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"MVC模式？√设计模式及场景？线程安全？","slug":"mvc模式-√设计模式及场景-线程安全","link":"#mvc模式-√设计模式及场景-线程安全","children":[]},{"level":2,"title":"MVC、Restful执行流程？√核心组件？HandlerAdapter作用？√","slug":"mvc、restful执行流程-√核心组件-handleradapter作用-√","link":"#mvc、restful执行流程-√核心组件-handleradapter作用-√","children":[]},{"level":2,"title":"SpringMVC注解？@RequestMapping和@GetMapping区别？","slug":"springmvc注解-requestmapping和-getmapping区别","link":"#springmvc注解-requestmapping和-getmapping区别","children":[]},{"level":2,"title":"如何解决POST、GET请求中文乱码问题？","slug":"如何解决post、get请求中文乱码问题","link":"#如何解决post、get请求中文乱码问题","children":[]},{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":2,"title":"拦截器的方法？作用？和 Filter过滤器区别？√","slug":"拦截器的方法-作用-和-filter过滤器区别-√","link":"#拦截器的方法-作用-和-filter过滤器区别-√","children":[]},{"level":2,"title":"http请求方法有哪些？RESTful操作线程安全？幂等操作及重要性？API是无状态的吗?","slug":"http请求方法有哪些-restful操作线程安全-幂等操作及重要性-api是无状态的吗","link":"#http请求方法有哪些-restful操作线程安全-幂等操作及重要性-api是无状态的吗","children":[]},{"level":2,"title":"如何支持新请求/响应？","slug":"如何支持新请求-响应","link":"#如何支持新请求-响应","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.21,"words":1263},"filePathRelative":"interview/framework/springmvc.md","localizedDate":"2023年1月1日","excerpt":""}');export{g as comp,h as data};
