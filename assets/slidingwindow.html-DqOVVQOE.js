import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-7KT7HDzT.js";const p={},e=t(`<h2 id="模板" tabindex="-1"><a class="header-anchor" href="#模板"><span>模板</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>所谓滑动窗口，就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果。
滑动窗口也可以理解为双指针法的一种！只不过这种解法更像是一个窗口的移动
窗口内是什么？
如何移动窗口的起始位置？
如何移动窗口的结束位置？
解题的关键在于 窗口的起始位置如何移动
//外层循环扩展右边界，内层循环扩展左边界
for (int l = 0, r = 0 ; r &lt; n ; r++) {
	//当前考虑的元素
	while (l &lt;= r &amp;&amp; check()) {//区间[left,right]不符合题意
        //扩展左边界
    }
    //区间[left,right]符合题意，统计相关信息
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3无重复字符的最长子串" tabindex="-1"><a class="header-anchor" href="#_3无重复字符的最长子串"><span>3无重复字符的最长子串</span></a></h2><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长 子串的长度。<br> 示例 1:<br> 输入: s = &quot;abcabcbb&quot;<br> 输出: 3<br> 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。<br> 示例 2:</p><p>输入: s = &quot;bbbbb&quot;<br> 输出: 1<br> 解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。<br> 示例 3:</p><p>输入: s = &quot;pwwkew&quot;<br> 输出: 3<br> 解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。<br> 请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>时间复杂度：<span class="token class-name">O</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span>，其中 <span class="token class-name">N</span> 是字符串的长度。左指针和右指针分别会遍历整个字符串一次。
空间复杂度：<span class="token class-name">O</span><span class="token punctuation">(</span>∣Σ∣<span class="token punctuation">)</span>，其中 Σ 表示字符集（即字符串中可以出现的字符），∣Σ∣ 表示字符集的大小。在本题中没有明确说明字符集，因此可以默认为所有 <span class="token constant">ASCII</span> 码在 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span> 内的字符，即 ∣Σ∣<span class="token operator">=</span><span class="token number">128</span>。我们需要用到哈希集合来存储出现过的字符，而字符最多有 ∣Σ∣ 个，因此空间复杂度为 <span class="token class-name">O</span><span class="token punctuation">(</span>∣Σ∣<span class="token punctuation">)</span>。
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//滑动窗口</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去重</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//每一轮右端点都扩一个。</span>
            <span class="token keyword">char</span> ch <span class="token operator">=</span> ss<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//right指向的元素，也是当前要考虑的元素</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//set中有ch，则缩短左边界，同时从set集合出元素</span>
                set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//别忘。将当前元素加入。</span>
            res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算当前不重复子串的长度。</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_438找到字符串中所有字母异位词" tabindex="-1"><a class="header-anchor" href="#_438找到字符串中所有字母异位词"><span>438找到字符串中所有字母异位词</span></a></h2><p>给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。<br> 异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。</p><p>示例 1:输入: s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;<br> 输出: [0,6]<br> 解释:<br> 起始索引等于 0 的子串是 &quot;cba&quot;, 它是 &quot;abc&quot; 的异位词。<br> 起始索引等于 6 的子串是 &quot;bac&quot;, 它是 &quot;abc&quot; 的异位词。<br> 示例 2:<br> 输入: s = &quot;abab&quot;, p = &quot;ab&quot;<br> 输出: [0,1,2]<br> 解释:<br> 起始索引等于 0 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。<br> 起始索引等于 1 的子串是 &quot;ba&quot;, 它是 &quot;ab&quot; 的异位词。<br> 起始索引等于 2 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>时间复杂度：<span class="token class-name">O</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token punctuation">(</span>n−m<span class="token punctuation">)</span>×Σ<span class="token punctuation">)</span>，其中 n 为字符串 s 的长度，m 为字符串 p 的长度，Σ 为所有可能的字符数。我们需要 <span class="token class-name">O</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> 来统计字符串 p 中每种字母的数量；需要 <span class="token class-name">O</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> 来初始化滑动窗口；需要判断 n−m<span class="token operator">+</span><span class="token number">1</span> 个滑动窗口中每种字母的数量是否与字符串 p 中每种字母的数量相同，每次判断需要 <span class="token class-name">O</span><span class="token punctuation">(</span>Σ<span class="token punctuation">)</span> 。因为 s 和 p 仅包含小写字母，所以 Σ<span class="token operator">=</span><span class="token number">26</span>。
空间复杂度：<span class="token class-name">O</span><span class="token punctuation">(</span>Σ<span class="token punctuation">)</span>。用于存储字符串 p 和滑动窗口中每种字母的数量。
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sLen <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pLen <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>sLen <span class="token operator">&lt;</span> pLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">++</span>sCount<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>pCount<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录26字母在s和p中出现的次数，匹配词</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sCount<span class="token punctuation">,</span> pCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sLen <span class="token operator">-</span> pLen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">--</span>sCount<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//减去上一个字符在26字母中出现的次数</span>
            <span class="token operator">++</span>sCount<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> pLen<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//增加本次字符在26字母中出现的次数</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sCount<span class="token punctuation">,</span> pCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","slidingwindow.html.vue"]]),d=JSON.parse('{"path":"/interview/algorithm/slidingwindow.html","title":"滑动窗口","lang":"zh-CN","frontmatter":{"title":"滑动窗口","icon":"circle-info","date":"2023-01-01T00:00:00.000Z","tags":"二叉平衡树","categories":"面试","description":"模板 3无重复字符的最长子串 给定一个字符串 s ，请你找出其中不含有重复字符的 最长 子串的长度。 示例 1: 输入: s = \\"abcabcbb\\" 输出: 3 解释: 因为无重复字符的最长子串是 \\"abc\\"，所以其长度为 3。 示例 2: 输入: s = \\"bbbbb\\" 输出: 1 解释: 因为无重复字符的最长子串是 \\"b\\"，所以其长度为 1。 示...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/algorithm/slidingwindow.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"滑动窗口"}],["meta",{"property":"og:description","content":"模板 3无重复字符的最长子串 给定一个字符串 s ，请你找出其中不含有重复字符的 最长 子串的长度。 示例 1: 输入: s = \\"abcabcbb\\" 输出: 3 解释: 因为无重复字符的最长子串是 \\"abc\\"，所以其长度为 3。 示例 2: 输入: s = \\"bbbbb\\" 输出: 1 解释: 因为无重复字符的最长子串是 \\"b\\"，所以其长度为 1。 示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"滑动窗口\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"模板","slug":"模板","link":"#模板","children":[]},{"level":2,"title":"3无重复字符的最长子串","slug":"_3无重复字符的最长子串","link":"#_3无重复字符的最长子串","children":[]},{"level":2,"title":"438找到字符串中所有字母异位词","slug":"_438找到字符串中所有字母异位词","link":"#_438找到字符串中所有字母异位词","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.85,"words":1155},"filePathRelative":"interview/algorithm/slidingwindow.md","localizedDate":"2023年1月1日","excerpt":"<h2>模板</h2>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>所谓滑动窗口，就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果。\\n滑动窗口也可以理解为双指针法的一种！只不过这种解法更像是一个窗口的移动\\n窗口内是什么？\\n如何移动窗口的起始位置？\\n如何移动窗口的结束位置？\\n解题的关键在于 窗口的起始位置如何移动\\n//外层循环扩展右边界，内层循环扩展左边界\\nfor (int l = 0, r = 0 ; r &lt; n ; r++) {\\n\\t//当前考虑的元素\\n\\twhile (l &lt;= r &amp;&amp; check()) {//区间[left,right]不符合题意\\n        //扩展左边界\\n    }\\n    //区间[left,right]符合题意，统计相关信息\\n}\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
