import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as i,c as p,a as e,b as t,d as c,w as s,e as r}from"./app-7KT7HDzT.js";const d={},b=r('<h2 id="怎么保证实时性-为什么不用http-2和grpc-√" tabindex="-1"><a class="header-anchor" href="#怎么保证实时性-为什么不用http-2和grpc-√"><span>怎么保证实时性？为什么不用http/2和grpc?√</span></a></h2><p>使用websocket</p><p>http/2优点：多路复用，头部压缩，流量控制和优先级；延时高，实时性差，设计初衷以请求响应为主<br> grpc优点：高效的二进制协议、多语言支持、内置负载平衡、重试机制和超时控制，认证等；延时低，实时性差，微信小程序不直接支持<br> WebSocket优点：全双工通信，低延迟:广泛支持:W3C标准，浏览器兼容性好。协议简单，适合于频繁且快速的小消息传输，如聊天消息<br> mqtt：通常基于TCP，微信小程序的网络接口（wx.request和connectSocket）无法直接操作TCP，需要适配</p><h2 id="为什么消息无序-怎么保证消息有序-怎么生成消息id-怎怎么保证幂等-√么做消息已读-用户在线" tabindex="-1"><a class="header-anchor" href="#为什么消息无序-怎么保证消息有序-怎么生成消息id-怎怎么保证幂等-√么做消息已读-用户在线"><span>为什么消息无序？怎么保证消息有序？怎么生成消息id？怎怎么保证幂等？√么做消息已读？用户在线？</span></a></h2><p>websocket本身有序<br> 应用层的并发处理：服务端或者客户端收到消息，使用异步任务解析，存储或展示消息<br> 网络延迟和分布式系统的时钟问题<br> WebSocket重连后的消息重发</p>',5),l=e("br",null,null,-1),g=e("br",null,null,-1),h=e("br",null,null,-1),m=r('<p>前端根据发送requestId（uuid），用Redis缓存校验是否已经处理过，后端生成分布式ID，</p><p>前端生成唯一id，后端用唯一id判断幂等，服务端再生成id返回服务端消息id和客户端消息id</p><p>记录每个人对群或者对人已读的最大消息ID，根据最大消息ID判断是否已读</p><p>用户每次登陆或者退出通知后台，后台根据uid使用bitmap存</p><h2 id="读扩散vs写扩散" tabindex="-1"><a class="header-anchor" href="#读扩散vs写扩散"><span>读扩散vs写扩散</span></a></h2><p>读扩散<br> A与每个聊天的人跟群都有一个信箱Timeline，A查看聊天信息时读取所有有新消息的信箱。<br> 写操作轻量，单聊\\群聊都只要写一次相应的信箱<br> 每个信箱保存两个人的聊天记录，查看和搜索方便<br> 读操作很重<br><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ854deba47b4a5daa2c4a3200e10e59ed.png" alt="read.png"></p><p>写扩散<br> 每个人都只从自己的信箱里读取消息<br> 单聊：往自己的信箱跟对方的信箱都写消息，如果要查看两人聊天历史记录的话还要再写一份（从个人信箱也能回溯出两人的聊天历史记录，但效率很低）<br> 群聊：往所有成员的信箱写消息，同时，如果要查看群的聊天历史记录的话还要再写一份<br> 读操作轻量。方便消息的多端同步<br> 写操作重，对于群聊来说<br><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ9b90b00e7fc7d3660a0fd53f354d12e6.png" alt="write.png"></p><h2 id="整体设计" tabindex="-1"><a class="header-anchor" href="#整体设计"><span>整体设计</span></a></h2><p>Netty集群 + Nginx + zookeeper：客户端接入、长连接管理、消息转发、查询目标在线状态<br> SpringCloudAlibaba集群：核心业务逻辑、服务治理、分布式事务、 RabbitMQ 进行消息解耦和异步处理存储消息 <br> Redis集群：在线状态管理、消息缓存、未读计数<br> RabbitMQ镜像集群：消息队列解耦、<strong>离线消息存储</strong>、<strong>群聊消息广播</strong><br> MySQL集群 + ProxySQL：用户信息、好友关系、消息索引存储 <br> MongoDB集群Sharding：聊天记录存储、离线消息存储、消息检索 <br> protobuf消息+json短链接交互协议：处理消息和非消息业务</p><p>单聊消息流程<br> 客户端直连Netty集群发送消息<br> Netty通过Redis查询用户是否在线，不经过springCloud<br> 在线则直接转发给目标客户端，然后调用springcloud保存到mysql<br> 不在线则转发到springCloud用rabbitmq保存离线消息到MongoDB，<br> 用户上线时会通过Netty调用springcloud查询MongoDB的离线消息，然后调用springcloud保存到mysql</p><p>群聊消息流程<br> 客户端直连Netty集发送群消息<br> Netty通过springcloud获得群成员列表，通过redis查询群员状态，在线则直接转发给目标客户端，前端确认收到后调用SpringCloud保存MysSQL<br> Netty将不在线的成员的消息转发给RabbitMQ<br> RabbitMQ使用Fanout Exchange，将消息广播群成员的消费队列<br> SpringCloud消费消息，用rabbitmq保存离线消息到MongoDB<br> ~</p><p>netty和SpringCloud隔离原因，<br> 长连接可以减少短连接连接频繁创建和断开的消耗，都需要三次握手和四次挥手，<br> 避免长短连接争抢连接资源。<br> 扩展性好，每个集群单独扩展互不影响</p><p>netty服务器x与netty服务器y之间需要路由和转发，路由结构是网状结构，转发可以转发到netty客户端或者另外一个netty服务器上<br> 一个服务器转发一万个人时有专门netty客户端做转发，只需和专门转发的netty客户端建立长连接，而netty客户端会代理转发。</p><p>为什么选protobuf协议？<br> 压缩效率高，消息体积小，传输速度快，延迟低；支持跨语言；支持嵌套复杂数据结构</p>',14);function u(y,_){const n=a("RouteLink");return i(),p("div",null,[b,e("p",null,[t("在消息中附加唯一序列号"),c(n,{to:"/interview/distributed/distributedid.html"},{default:s(()=>[t("分布式ID")]),_:1}),t("（时间戳+机器id+机器seq）"),l,t(" 服务器和客户端统一时间标准（如 NTP）。"),g,t(" 客户端对消息进行排序后再展示。"),h,t(" 在重连时请求消息历史，并按序补齐。")]),m])}const k=o(d,[["render",u],["__file","im.html.vue"]]),v=JSON.parse('{"path":"/interview/scenedesign/im.html","title":"聊天系统设计","lang":"zh-CN","frontmatter":{"title":"聊天系统设计","date":"2023-01-01T00:00:00.000Z","tags":"面试","categories":"面试","description":"怎么保证实时性？为什么不用http/2和grpc?√ 使用websocket http/2优点：多路复用，头部压缩，流量控制和优先级；延时高，实时性差，设计初衷以请求响应为主 grpc优点：高效的二进制协议、多语言支持、内置负载平衡、重试机制和超时控制，认证等；延时低，实时性差，微信小程序不直接支持 WebSocket优点：全双工通信，低延迟:广泛支持...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/scenedesign/im.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"聊天系统设计"}],["meta",{"property":"og:description","content":"怎么保证实时性？为什么不用http/2和grpc?√ 使用websocket http/2优点：多路复用，头部压缩，流量控制和优先级；延时高，实时性差，设计初衷以请求响应为主 grpc优点：高效的二进制协议、多语言支持、内置负载平衡、重试机制和超时控制，认证等；延时低，实时性差，微信小程序不直接支持 WebSocket优点：全双工通信，低延迟:广泛支持..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ854deba47b4a5daa2c4a3200e10e59ed.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"聊天系统设计\\",\\"image\\":[\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ854deba47b4a5daa2c4a3200e10e59ed.png\\",\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ9b90b00e7fc7d3660a0fd53f354d12e6.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"怎么保证实时性？为什么不用http/2和grpc?√","slug":"怎么保证实时性-为什么不用http-2和grpc-√","link":"#怎么保证实时性-为什么不用http-2和grpc-√","children":[]},{"level":2,"title":"为什么消息无序？怎么保证消息有序？怎么生成消息id？怎怎么保证幂等？√么做消息已读？用户在线？","slug":"为什么消息无序-怎么保证消息有序-怎么生成消息id-怎怎么保证幂等-√么做消息已读-用户在线","link":"#为什么消息无序-怎么保证消息有序-怎么生成消息id-怎怎么保证幂等-√么做消息已读-用户在线","children":[]},{"level":2,"title":"读扩散vs写扩散","slug":"读扩散vs写扩散","link":"#读扩散vs写扩散","children":[]},{"level":2,"title":"整体设计","slug":"整体设计","link":"#整体设计","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.42,"words":1327},"filePathRelative":"interview/scenedesign/im.md","localizedDate":"2023年1月1日","excerpt":"<h2>怎么保证实时性？为什么不用http/2和grpc?√</h2>\\n<p>使用websocket</p>\\n<p>http/2优点：多路复用，头部压缩，流量控制和优先级；延时高，实时性差，设计初衷以请求响应为主<br>\\ngrpc优点：高效的二进制协议、多语言支持、内置负载平衡、重试机制和超时控制，认证等；延时低，实时性差，微信小程序不直接支持<br>\\nWebSocket优点：全双工通信，低延迟:广泛支持:W3C标准，浏览器兼容性好。协议简单，适合于频繁且快速的小消息传输，如聊天消息<br>\\nmqtt：通常基于TCP，微信小程序的网络接口（wx.request和connectSocket）无法直接操作TCP，需要适配</p>","autoDesc":true}');export{k as comp,v as data};
