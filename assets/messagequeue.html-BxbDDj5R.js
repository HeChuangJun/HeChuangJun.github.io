import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as l,c as p,a as t,d as r,w as n,b as e,e as o}from"./app-7KT7HDzT.js";const s={},m=o('<h2 id="什么是消息队列-使用原因-优缺点-协议-消费语义" tabindex="-1"><a class="header-anchor" href="#什么是消息队列-使用原因-优缺点-协议-消费语义"><span>什么是消息队列？使用原因？优缺点？协议？消费语义？</span></a></h2><p>mq：消息队列是一种先进先出的数据结构.</p><p>解耦：假设A系统要发送数据到B,C,D系统，如果E系统需要数据然后，D系统不需要了，此时A系统需要维护下游系统的调用，耦合性太高，引入消息队列后可以减少A系统维护成本<br> 异步：同步很花费并且业务时效性不大的操作，可以使用异步来提升效果，比如发送微信通知<br> 削峰、限流：解决高并发情况</p><p>系统可用性降低、系统复杂度提高、一致性问题</p><p>AMQP、MQTT、STOMP、XMPP协议</p><p>消息至多被消费一次（At most once）：消息可能会丢失，但绝不重传。<br> 消息至少被消费一次（At least once）：消息可以重传，但绝不丢失。<br> 消息仅被消费一次（Exactly once）：每一条消息只被传递一次。</p><h2 id="kafka、activemq、rabbitmq、rocketmq-有什么优缺点" tabindex="-1"><a class="header-anchor" href="#kafka、activemq、rabbitmq、rocketmq-有什么优缺点"><span>Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？</span></a></h2><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/523ea7439c3ef3a12016b.png" alt="mq.png" tabindex="0"><figcaption>mq.png</figcaption></figure><p>中小型公司，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；大型公司，基础架构研发实力较强，用 RocketMQ 是很好的选择。<br> 如果是大数据领域的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。<br> RabbitMQ延时最低，消息可靠性高，高可用，但扩展性较差。</p><h2 id="如何保证消息的不被重复消费-幂等性-消息丢失-可靠性传输-顺序性-消息积压如何解决" tabindex="-1"><a class="header-anchor" href="#如何保证消息的不被重复消费-幂等性-消息丢失-可靠性传输-顺序性-消息积压如何解决"><span>如何保证消息的不被重复消费/幂等性？消息丢失/可靠性传输？顺序性？消息积压如何解决？</span></a></h2><p>框架层统一封装：由 Producer 生成唯一标识。使用关系型数据库，增加一个排重表，使用消息编号作为唯一主键。需要让插入记录和业务逻辑在同一个事务<br> 业务层实现：先查询数据库，判断数据是否已经被更新过。如果是，则直接返回消费完成，否则执行消费。</p>',11),b=t("p",null,[e("临时紧急扩容，具体操作步骤和思路如下："),t("br"),e(" 先修复consumer的问题，确保其恢复消费速度"),t("br"),e(" 新建一个topic，partition是原来的10倍，临时建立好原先10倍或者20倍的queue数量"),t("br"),e(" 然后写一个临时的分发数据的consumer程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的10倍数量的queue"),t("br"),e(" 接着临时征用10倍的机器来部署consumer，每一批consumer消费一个临时queue的数据"),t("br"),e(" 这种做法相当于是临时将queue资源和consumer资源扩大10倍，以正常的10倍速度来消费数据"),t("br"),e(" 等快速消费完积压数据之后，得恢复原先部署架构，重新用原先的consumer机器来消费消息")],-1),d=t("h2",{id:"如何保证消息队列的高可用",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#如何保证消息队列的高可用"},[t("span",null,"如何保证消息队列的高可用？")])],-1),u=o('<h2 id="为什么kafka最高吞吐量" tabindex="-1"><a class="header-anchor" href="#为什么kafka最高吞吐量"><span>为什么kafka最高吞吐量</span></a></h2><p>kafka采用顺序读写磁盘，写时分文件顺序写，读时按offset顺序读<br> Kafka利用了操作系统本身的Page Cache而不是JVM空间内存<br> Kafka 的生产和消费两个过程都使用了零拷贝（zero copy）：<br> 网络数据持久化到磁盘(Producer 到 Broker使用了mmap)<br> 磁盘文件通过网络发送(Broker 到 Consumer使用了sendfile+DMA采集)<br> 数据压缩<br> Kafka使用了批量压缩，即将多个消息一起压缩而不是单个消息压缩。（如果每个消息都压缩，压缩率相对较低。）<br> Kafka允许使用递归的消息集合，批量的消息可通过压缩的形式传输并且在日志中也可保持压缩格式，直到被消费者解压缩<br> Kafka支持多种压缩协议，包括Gzip、Snappy、LZ4<br> 批量传输<br> 在向Kafka发送数据时，可以启用批次发送，这样可以避免在网络上频繁传输单个消息带来的延迟和带宽开销。假设网络带宽为10MB/S，一次性传输10MB的消息比传输1KB的消息10000万次显然要快得多。<br> 并行<br> 由于不同 Partition 可位于不同机器，因此可以充分利用集群优势，实现机器间的并行处理。<br> 由于 Partition 在物理上对应一个文件夹，即使多个 Partition 位于同一个节点，也可通过配置让同一节点上的不同 Partition 置于不同的磁盘上，从而实现磁盘间的并行处理，充分发挥多磁盘的优势。</p>',2);function h(k,f){const a=c("RouteLink");return l(),p("div",null,[m,t("p",null,[r(a,{to:"/backend/mq/rabbitmq.html"},{default:n(()=>[e("rabbitmq如何防止消息丢失？可靠性传输？")]),_:1}),e("√")]),t("p",null,[r(a,{to:"/backend/mq/rocketmq.html"},{default:n(()=>[e("rocketmq如何防止消息丢失？可靠性传输？")]),_:1})]),t("p",null,[r(a,{to:"/backend/mq/rabbitmq.html"},{default:n(()=>[e("rabbitmq顺序消息")]),_:1}),e("√")]),t("p",null,[r(a,{to:"/backend/mq/rocketmq.html"},{default:n(()=>[e("rocketmq顺序消息")]),_:1})]),b,d,t("p",null,[r(a,{to:"/backend/mq/rabbitmq.html"},{default:n(()=>[e("rabbitmq高可用")]),_:1}),e("√")]),t("p",null,[r(a,{to:"/backend/mq/rocketmq.html"},{default:n(()=>[e("rocketmq高可用")]),_:1})]),u])}const _=i(s,[["render",h],["__file","messagequeue.html.vue"]]),v=JSON.parse('{"path":"/interview/mq/messagequeue.html","title":"消息队列","lang":"zh-CN","frontmatter":{"title":"消息队列","date":"2023-01-01T00:00:00.000Z","tags":"面试","categories":"面试","description":"什么是消息队列？使用原因？优缺点？协议？消费语义？ mq：消息队列是一种先进先出的数据结构. 解耦：假设A系统要发送数据到B,C,D系统，如果E系统需要数据然后，D系统不需要了，此时A系统需要维护下游系统的调用，耦合性太高，引入消息队列后可以减少A系统维护成本 异步：同步很花费并且业务时效性不大的操作，可以使用异步来提升效果，比如发送微信通知 削峰、限...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/mq/messagequeue.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"消息队列"}],["meta",{"property":"og:description","content":"什么是消息队列？使用原因？优缺点？协议？消费语义？ mq：消息队列是一种先进先出的数据结构. 解耦：假设A系统要发送数据到B,C,D系统，如果E系统需要数据然后，D系统不需要了，此时A系统需要维护下游系统的调用，耦合性太高，引入消息队列后可以减少A系统维护成本 异步：同步很花费并且业务时效性不大的操作，可以使用异步来提升效果，比如发送微信通知 削峰、限..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://290ff162.telegraph-image-eg9.pages.dev/file/523ea7439c3ef3a12016b.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息队列\\",\\"image\\":[\\"https://290ff162.telegraph-image-eg9.pages.dev/file/523ea7439c3ef3a12016b.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"什么是消息队列？使用原因？优缺点？协议？消费语义？","slug":"什么是消息队列-使用原因-优缺点-协议-消费语义","link":"#什么是消息队列-使用原因-优缺点-协议-消费语义","children":[]},{"level":2,"title":"Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？","slug":"kafka、activemq、rabbitmq、rocketmq-有什么优缺点","link":"#kafka、activemq、rabbitmq、rocketmq-有什么优缺点","children":[]},{"level":2,"title":"如何保证消息的不被重复消费/幂等性？消息丢失/可靠性传输？顺序性？消息积压如何解决？","slug":"如何保证消息的不被重复消费-幂等性-消息丢失-可靠性传输-顺序性-消息积压如何解决","link":"#如何保证消息的不被重复消费-幂等性-消息丢失-可靠性传输-顺序性-消息积压如何解决","children":[]},{"level":2,"title":"如何保证消息队列的高可用？","slug":"如何保证消息队列的高可用","link":"#如何保证消息队列的高可用","children":[]},{"level":2,"title":"为什么kafka最高吞吐量","slug":"为什么kafka最高吞吐量","link":"#为什么kafka最高吞吐量","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.2,"words":1261},"filePathRelative":"interview/mq/messagequeue.md","localizedDate":"2023年1月1日","excerpt":"<!--more-->\\n<h2>什么是消息队列？使用原因？优缺点？协议？消费语义？</h2>\\n<p>mq：消息队列是一种先进先出的数据结构.</p>\\n<p>解耦：假设A系统要发送数据到B,C,D系统，如果E系统需要数据然后，D系统不需要了，此时A系统需要维护下游系统的调用，耦合性太高，引入消息队列后可以减少A系统维护成本<br>\\n异步：同步很花费并且业务时效性不大的操作，可以使用异步来提升效果，比如发送微信通知<br>\\n削峰、限流：解决高并发情况</p>\\n<p>系统可用性降低、系统复杂度提高、一致性问题</p>\\n<p>AMQP、MQTT、STOMP、XMPP协议</p>\\n<p>消息至多被消费一次（At most once）：消息可能会丢失，但绝不重传。<br>\\n消息至少被消费一次（At least once）：消息可以重传，但绝不丢失。<br>\\n消息仅被消费一次（Exactly once）：每一条消息只被传递一次。</p>","autoDesc":true}');export{_ as comp,v as data};
