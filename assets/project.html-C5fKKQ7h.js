import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as p}from"./app-7KT7HDzT.js";const t={},e=p(`<h2 id="【技术面】场景设计-遇到不懂的地方-项目经验" tabindex="-1"><a class="header-anchor" href="#【技术面】场景设计-遇到不懂的地方-项目经验"><span>【技术面】场景设计？遇到不懂的地方？项目经验？</span></a></h2><p>先完成再完美：我想了一下可以这么做，时间有限，可能有些不合理地方，然后说方案<br> 想到多少说多少，部分也没关系<br> 不会就坦诚说还有xx部分，因为xx地方没有想到，可不可以给点提示<br> 不知道选什么方案就提出选择困难原因</p><p>没听清，不好意思你是指xxx内容还是xxx内容，把范围缩小，不会就不要说<br> 不懂，这个我不大了解，我猜是这样的或者我没怎么了解，但我知道xxxx和它差不多，也能做到zzz目的</p><ul><li>项目难点或者亮点？</li><li>项目为什么用？而不用？为什么这么设计？</li><li>项目介绍 <ul><li>1.项目的背景(这个项目解决什么问题)，1分钟以内要描述完</li><li>2.项目包含的功能/模块，简单说明每个功能的作用</li><li>3.你参与并负责的横块</li><li>4.项目采用的技术架构</li><li>5.项目中的难点、亮点和个人的成长 <ul><li>1.体现你解决问题的能力</li><li>2.体现你的学习能力</li><li>3.体现你的架构思维</li><li>4.体现你的团队协作能力</li><li>5.体现你的管理能偶</li><li>6.体现你的技术能力</li><li>也就是只要能够体现上述这些能力的，都可以去总结出来，不一定是高并发/高性能的一些事情比如独立从0到1搭建微服务架构、第一次参与线上问题的诊断和解决</li></ul></li></ul></li><li>斑猪活动圈主要为兴趣类社群活动组织者提供服务的小程序。主要用于替代传统微信群接龙的活动报名模式和微信群收款的活动收款模式，兴趣类社群组织者就是那些经常打羽毛球，玩飞盘那些俱乐部的管理人员</li><li>项目包含的模块有 <ul><li>活动模块：主要包括活动组织者发布活动，活动参与者付费参与活动，活动结束后活动组织者收款等功能</li><li>圈子模块：主要包括创建社群圈子，圈子频道聊天等功能</li><li>金蛋模块：主要包括创建金蛋，抢金蛋，金蛋提现等功能</li><li>赛事模块：主要包括各种赛事的举办</li></ul></li><li>我负责的模块主要是活动模块、圈子模块</li><li>项目采用的技术是SpringCloudAlibaba+redis+mysql+rabbitmq</li><li>项目中的亮点主要是支付模块的设计和圈子频道聊天的设计</li></ul><h2 id="面试复盘" tabindex="-1"><a class="header-anchor" href="#面试复盘"><span>面试复盘</span></a></h2><p>遇到不懂或者回答不好的问题，面试结束后要弄懂</p><h2 id="微服务高可用配置" tabindex="-1"><a class="header-anchor" href="#微服务高可用配置"><span>微服务高可用配置</span></a></h2><p>nacos + MySQL 4C 8G 3节点 4000TPS<br> gateway 4C 8G 3节点 启用HTTPS+GZIP 1wQPS<br> zookeeper 4C 8G 3节点 4000TPS<br> alibaba Sentinel + nacos + MySQL 3节点<br> rabbitmq 3节点 镜像集群模式<br> Elasticsearch 3节点<br> mysql MGR 1主2从 3节点<br> skywalking + nacos 2节点<br> XXL-JOB 2节点<br> RocketMQ 1主2从</p><p><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ42e212545d48c5fdb0f320f841f6558f.png" alt="nacos.png"><br><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ86044fb44de48c1ee9f98f6b8b910748.png" alt="gateway.png"><br><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQfe6963de019c57bf30885d5898c880a1.png" alt="zookeeper.png"></p><h2 id="项目难点" tabindex="-1"><a class="header-anchor" href="#项目难点"><span>项目难点</span></a></h2><p><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQe29516281b44fc6ea6efdc8a0094d494.png" alt="jvmadjust.png"><br> 运营后台系统，偶发性OOM异常，堆内存溢出。<br> 因为是偶发性的，所以第一次简单的认为就是堆内存不足导致，单方面的加大了堆内存从 4G 调整到 8G -Xms8g。<br> 问题依然没有解决，只能从堆内存信息下手，通过开启-XX:+HeapDumpOnOutOfMemoryError参数 获得堆内存的 dump 文件<br> 用JProfiler对堆dump文件分析，查看到占用内存最大的对象是 String 对象，本来想跟踪着 String 对象找到其引用的地方，但 dump 文件太大，跟踪进去的时候总是卡死，而 String 对象占用比较多也比较正常，最开始也没有认定就是这里的问题，于是就从线程信息里面找突破点。<br> 通过线程进行分析，先找到了几个正在运行的业务线程，然后逐一跟进业务线程看了下代码，有个方法引起了我的注意，导出订单信息<br> 因为订单信息导出这个方法可能会有几万的数据量，首先要从数据库里面查询出来订单信息，然后把订单信息生成 excel，这个过程会产生大量的 String 对象。<br> 为了验证自己的猜想，于是准备登录后台去测试下，结果在测试的过程中发现导出订单的按钮前端居然没有做点击后按钮置灰交互事件，后端也没有做防止重复提交，因为导出订单数据本来就非常慢，使用的人员可能发现点击后很久后页面都没反应，然后就一直点，结果就大量的请求进入到后台，堆内存产生了大量的订单对象和 EXCEL 对象，而且方法执行非常慢，导致这一段时间内这些对象都无法被回收，所以最终导致内存溢出。<br> 知道了问题就容易解决了，最终没有调整任何 JVM 参数，只是做了两个处理：</p><p>在前端的导出订单按钮上加上了置灰状态，等后端响应之后按钮才可以进行点击<br> 后端代码加分布式锁，做防重处理<br> 这样双管齐下，保证导出的请求不会一直打到服务端，问题解决！</p><h2 id="为什么不建议在-docker-中跑-mysql" tabindex="-1"><a class="header-anchor" href="#为什么不建议在-docker-中跑-mysql"><span>为什么不建议在 Docker 中跑 MySQL？</span></a></h2><p>在容器内部跑MySQL没有问题（我们已经用于生产环境很多年），但需要注意以下几个方面：<br> 容器关闭前，需要先关闭mysql进程，否则“一定”会造成数据损伤；<br> 数据文件的存储目录一定不能在容器内部，需要挂载出来；<br> 如果网络吞吐量很大，建议使用host网络连接，不要使用默认的容器网络；<br> 如果配置了数据库主从集群需要注意容器的启动和关闭的顺序。<br> 时间戳问题:与主机保持同步即可。</p><p>URLOS解决了这些问题</p><h2 id="如何提升单体springboot的并发数" tabindex="-1"><a class="header-anchor" href="#如何提升单体springboot的并发数"><span>如何提升单体springboot的并发数？</span></a></h2><ol><li>把springboot挂到nginx反向代理后面压测，因为tomcat等容器并不能很好的处理网络请求，在网络不好的时候会消耗大量的cpu，用了nginx后可以对流量进行缓冲整理，springboot处理吞吐量也可以大幅提高</li><li>压测时开启长链接 ，即keepalive请求头，链接可以复用，提升请求的处理时间，减少https此类的由于每次建立连接的相互鉴权建立https通道的时间。</li><li>压测时尽量使用内网环境，外网环境的网络质量会参差不齐，这个会极大的影响链接质量。从而影响rt的平均时间和p99。</li><li>请给压测机器吊到目标集群的网络链路足够的带宽，如果没有足够的带宽，即使是很小的请求参数也有可能把带宽占满，导致压测数据失真。</li><li>给你的目标server足够的cpu与内存，压测目标只测试到75%的水位，不要满载测试。（当然要测试下极限的情况下可以满测）。</li><li>优化你的tomcat的worker线程数和最大连接数，一般连接数不用优化，线程池大小可以根据cpu配置进行适当调大，经验值是1c对应200线程，比如是8核cpu，最大可以调整到1600。这个切记不是越大越好。1600线程对应 的栈大小就是1.6G，这是一个非常大的开销。<br> 可以把tomcat换成undertower，个人不建议，一般的应用如果是跑benchmark，可能替换后有收益。但是如果是真正的正儿八经的web服务， 99.99%的场景下这个替换带来的提升就是扯淡</li></ol><h2 id="难题" tabindex="-1"><a class="header-anchor" href="#难题"><span>难题</span></a></h2><p>求请求次数的难题<br> 假如你的服务端，需要调其他第三方的HTTP接口，然后你来统计外部调用调用了哪些接口以及调用的次数，然后保存到MySQL里面，所以MySQL里面，保存的是接口名、次数，两个字段。<br> 然鹅，你发现，这个数据量突然就暴涨了，一天就上千万。<br> 怎么可能呢？我们是统计的次数，同一个接口调用次数再多，在mysql数据库里面也就一条数据，怎么会出现上千万条数据？<br> 你一看，确实是有上千万个不同的URL，当然，大部分是路径参数请求，比如<br> 假设有以下一些请求路径<br> /mm/moudu/12334234/get<br> /tokyo/av/123/get<br> |/tokyo/av/345/get<br> /tokyo/av/56564/get<br> /tokyo/av/56757/get<br> /tokyo/beach/45345/get<br> /tokyo/beach/56757/get<br> /tokyo/beach/6868/get<br> /tokyo/beach/787686/get<br> 请问，你如何写个算法识别出来这些路径参数？如何聚合成下面这种形式？</p><p>/mm/moudu/{id}/get<br> /tokyo/av/{id}/get<br> /tokyo/beach/{id}/get</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>用 <span class="token class-name">Trie</span>（前缀树）<span class="token operator">+</span> 通配符替换 来识别路径参数，并进行路径模式归一化。
算法思路
<span class="token number">1.</span>构建 <span class="token class-name">Trie</span><span class="token operator">:</span> 以 <span class="token operator">/</span> 作为分隔符，将路径逐级存入 <span class="token class-name">Trie</span> 树。叶子节点存储完整路径模式，便于后续查询。
<span class="token number">2.</span>路径归一化：遍历 <span class="token class-name">Trie</span> 树时，检测某一级节点下的子节点是否都是 数字。若都是数字，则用 <span class="token punctuation">{</span>id<span class="token punctuation">}</span> 进行替换。若非数字，则继续构建层级结构。
<span class="token number">3.</span>输出聚合结果：深度遍历 <span class="token class-name">Trie</span>，输出归一化后的路径格式。

算法分析
时间复杂度<span class="token operator">:</span>插入路径到 <span class="token class-name">Trie</span>：<span class="token class-name">O</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">*</span> <span class="token class-name">M</span><span class="token punctuation">)</span>（<span class="token class-name">N</span> 是路径数，<span class="token class-name">M</span> 是路径深度）
归一化遍历 <span class="token class-name">Trie</span>：<span class="token class-name">O</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span>
空间复杂度<span class="token operator">:</span><span class="token class-name">Trie</span> 存储路径结构，最坏情况 <span class="token class-name">O</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">*</span> <span class="token class-name">M</span><span class="token punctuation">)</span>

<span class="token class-name">Trie</span> 结构高效处理路径前缀，避免重复计算。
自动检测数值路径片段，替换成 <span class="token punctuation">{</span>id<span class="token punctuation">}</span>。
输出格式化路径，支持扩展（如多个参数替换）。
你可以尝试在 <span class="token class-name">Trie</span> 上扩展支持 多个参数（如 <span class="token operator">/</span>users<span class="token operator">/</span><span class="token punctuation">{</span>userId<span class="token punctuation">}</span><span class="token operator">/</span>orders<span class="token operator">/</span><span class="token punctuation">{</span>orderId<span class="token punctuation">}</span>）。
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathAggregator</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TrieNode</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> isEndpoint <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TrieNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 插入路径到 Trie</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TrieNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> part <span class="token operator">:</span> parts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>part<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        node<span class="token punctuation">.</span>isEndpoint <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 递归归一化路径</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TrieNode</span> node<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> path<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>isEndpoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">boolean</span> allNumeric <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                allNumeric <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>allNumeric<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TrieNode</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">dfs</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取归一化路径</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAggregatedPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PathAggregator</span> aggregator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathAggregator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paths <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;/mm/moudu/12334234/get&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;/tokyo/av/123/get&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;/tokyo/av/345/get&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;/tokyo/av/56564/get&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;/tokyo/av/56757/get&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;/tokyo/beach/45345/get&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;/tokyo/beach/56757/get&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;/tokyo/beach/6868/get&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;/tokyo/beach/787686/get&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> path <span class="token operator">:</span> paths<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            aggregator<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> aggregator<span class="token punctuation">.</span><span class="token function">getAggregatedPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> normalizedPath <span class="token operator">:</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>normalizedPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java面试请谈谈您在工作中遇到过的最大挑战是什么-您是如何克服的" tabindex="-1"><a class="header-anchor" href="#java面试请谈谈您在工作中遇到过的最大挑战是什么-您是如何克服的"><span>java面试请谈谈您在工作中遇到过的最大挑战是什么?您是如何克服的?</span></a></h2><p>比如你面试的公司是做电商类型的项目，你可千万别跟面试官说最大的挑战是订单的一致性啊、数据的一致性啊、秒杀问题啊、异常回滚问题啊、分布式事务问题啊，集群主从同步问题啊，多级缓存问题啊，这样的话，你说一个死一个。那么你应该怎么说呢，你应该说你们项目中遇到的一个算法问题特别难，你们项目中遇到的个性化与通用性的权衡问题很难，项目中遇到的大量异步请求特别难，项目中的大量浮点运算CPU飙高特别难，遇到的海量数据存储、检索和异常检测问题特别难等等，凡是电商特性的你都别回答。</p><p>比如公司是做iot相关的呢，那么你就可以说电商方面的难了，比如成百上千个服务，订单的一致性如何保证特别难，比如成百上千个服务的分布式事务如何实现特别难？比如一致性的链路监控如何做特别难？比如容器与业务出现代码冲突的问题怎么破？等等问题，大部分都是物联网方面不需要考虑的。</p><p>遇到TO C的呢，你就说TOB的难点，比如个性化定制，比如业务的复杂性，比如数据的要求准确性，比如代码的相互兼容性等等都是TOB的难点。比较TOC的项目虽然并发量会比较大，但是人家的请求都是很规范的，前端的请求基本上是来自用户的点击，规范化就不容易出bug，对于架构的扩展性兼容性等要求就没那么高，更多的是考虑性能问题。</p><p>遇到TOB的呢，最好是谈一些具体业务上的挑战，因为TOB太复杂了，有些数据的量级和并发的量级都很大，而且业务还很复杂，这个时候你可以谈一些业务特性的具体问题。比如你们的项目特性，要求连接数达到上百万，如果在java系统中需要怎么处理？每台机器就五六千个连接数，如何做到异步非阻塞？什么原理？用什么工具？等等。当然，这只是我个人十多年的码农经验以及当面试官的经验吧，不一定就完全正确，如果对你有一定的启发，你就可以拿来使用。当然，如果你不仅仅觉得没用，还要来跟我杠，那就是你说的对。</p><h2 id="面试要准备。" tabindex="-1"><a class="header-anchor" href="#面试要准备。"><span>面试要准备。</span></a></h2><p>如果觉得工作不好找，大多数人会退而求其次，降薪降级别来找，这样反而把自己和茫茫多的初中级开发竞争。要反着来，一定要冲高端，冲架构师、冲技术经理、冲CTO。冲高端就要有高端的技能，没关系，学啊，如果带过团队就准备1个月学习，如果没带过就准备3个月.</p><p>技术体系化。<br> java技术体系化学习一遍，购买视频课程，双倍速播放，一边竖起耳朵听，一边画图，不要敲代码； k8s体系化学习一遍，只画图，不要敲代码；大数据体系化学习一遍，只画图，不要敲代码； 技术管理体系化学一遍，记关键字，画脑图，学完会看，其实内容没多少，一个是人，一个是事。</p><p>这些课程去付费网站找，找最贵的，总价大约2万。 肉疼就去去某宝买同款，总价百元。走路看、蹲厕看、吃饭看、喝水看、睡觉看，闭眼就回忆、梳理。</p><p>学完你会发现，以前仰视的技术，现在你可以随意把玩。以前你是雾中迷茫的小孩，现在你是指路人。</p><p>业务体系化<br> 把你做过的项目，找一个典型，从头到尾业务体系化梳理一遍，尤其是哪些用到你学到的的体系化技术，如果项目简单，就构造一个故事，一定要构造的足够详细。</p><p>管理体系化<br> 没吃过猪肉，还没见过猪跑么？ 把自己带入teamleader、技术经理、CTO的人设，结合管理知识，构造场景：开发流程、人员变动、客户变更等等场景。准备至少3个。</p><p>简历专业化<br> 总体思想：面向目标职位写简历，而非面向过往写简历。</p><p>附件简历很重要，要有针对性，维护3-5个简历：张三-架构师.pdf、张三-技术经理.pdf、张三-CTO.pdf、张三-架构师-金融.pdf、张三-架构师-IoT.pdf</p><p>不要用招聘网站默认模板，付费购买，认真做。排序大致如下：个人信息、求职意向、教育经历、工作经历、相关技能、项目经历、荣誉证书等等。</p><p>个人信息字段精炼，不要超过5个字段；</p><p>教育经历，一个一行；</p><p>工作经历，一个一行；</p><p>相关技能，根据目标职位最好覆盖岗位要求的技能，只能多、不能少，不会就去学，知道名词、懂流程就是了解，会helloworld就是熟悉，一个一行。业务在前，比如精通跨境电商业务，落地项目X个；spring 相关的一行，存储的一行，服务器的一行，CI/CD的一行。 列全接近20行了。</p><p>项目经验可能是占页数最多，找典型即可，要在这个项目中做好故事彩排。</p><p>问题故事化<br> 网上搜架构师、技术经理、CTO的面试问题，把这些问题带入你的项目、管理场景，自己脑海排练。</p><p>1、你作为架构师遇到的挑战性问题。</p><p>不要回答具体技术问题，要回答体系化的架构。比如因历史业务及技术方案造的屎山，导致性能不行、后期开发客户成本过高等，然后你设计一个架构解决了这个问题，带来了性能提升、新客户接入成本降低、周期缩短。</p><p>2、你技术经理遇到的挑战性问题。</p><p>这个时候不要回答内部的，技术点、架构、性能优化都不要回答，因为在技术经理这里，一切技术问题都不是问题。一定要回答外部的，比如客户增加需求、客户压缩工期等，答案核心点是沟通，和客户沟通、解决、效果。</p><p>3、作为CTO遇到挑战性问题。</p><p>可以回答市场变化、经济形势、资本投入等等导致研发的困难。然后如何解决、效果如何。</p><p>总之，挑战性的问题一定不是职责范围内导致的，是外部导致的，然后经过你用技术以外的东西解决的。</p><p>以上是准备工作做完。就可以挂招聘网站，要有菜场讨价还价的余地，甩掉工程师硬邦邦的思维，这些高端岗位哪个不是要沟通，讨价还价的，比如你期望20K薪资，就写25K-35K，一个是远离低价竞争，一个是吸引HR眼球。</p><p>面试过程<br> 总体思想：内心要强大，脸皮要厚，嘴要会说。</p><p>一面。自我介绍完一般会问项目，要引导面试官问你已经设计好的故事，这个故事一定要经得起深挖。八股文自己提前看。</p><p>如果没过怎么办。 不要气馁，内心要强大，这就是我通向成功的练手的。同时记录不过点，比如JVM调优，那就底层知识不牢，继续学习，同样DB底层，是否牢。学习补充一定不是单点的，要体系化。</p><p>二面。一般是比较宏观的，细节比较少，场景化的，同样引导到你预设的故事场景。</p><p>如果没过怎么办。 不要气馁，内心要强大，这就是我通向成功的练手的。这个就不是技术点的问题，一定是故事不够大，可以把项目从架构层面重新设计故事。</p><p>三面。一般是CTO或者老板，一般不会深挖细节，多是管理层面的问题。</p><p>三面心态要平和，讲客观的事情经过，不要有任何主观的话语。</p><p>如果三面过了，祝你成功。如果你自己觉得自己是水货，没关系，你已经很强了，客服心里障碍。在入职前这段时间，加紧学习就好了。</p><p>祝成功！</p><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>11月7日更新，体系化回答面试官提问</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>*******/</p><p>面试官：我们上一个teamleader长期出差和加班，家人意见较大，后离职，你可以接受出差和加班吗？</p><p>我抗压能力强，996是家常便饭，没问题！！” 这种回答是真心的吗？即使真心也很碎片化。</p><p>这个问题要跳出问题本身，为什么要加班？加班会带来什么？不加班会怎么样？怎么样才能做到交付且不加班？从这五个维度来回答：</p><ol><li><p>如何调整工作节奏和风险管控<br> 作为高端职位，你可调动资源不只是技术，还有自己的团队、兄弟团队、领导、客户，并且要参与到项目全程。从项目投标就可以介入，总体蓝图，客户规划，需求采集，开发启动，开发排期，上线规划。尤其是开发排期，做好资源规划。时间不够就打好提前量，人手不够就加人。开发过程做好规划和管控。 开发前做好风险预估，要有预案，开发过程中做好风险跟进，提前、及时感知风险。</p></li><li><p>如何激励团队及协调资源<br> 正常进度下，激励团队，提高效率，尽可能提前完成。</p></li></ol><p>风险来临，需要加班加点，如何提升团队斗志。</p><p>本团队依然无法完成，要借别的团队力量完成项目交付，涉及到领导、团队间的配合。</p><ol start="3"><li><p>如何跟客户沟通<br> 与客户真诚充分沟通，把当前计划、风险同步给客户，如果确实不能如期交付，是否可以分批次交付。</p></li><li><p>如何做好人才储备和培养<br> teamleader走了是不是对团队有很大影响，那就要有团队人才建设计划，副手培养，团队梯次建设等等。</p></li><li><p>高可用家庭建设<br> 处理好家人关系，让家人理解你的工作；</p></li></ol><p>做好异常处理，比如家里老人能否帮忙，兄弟姐妹能否帮忙，邻居能否帮忙，朋友能否帮忙。</p><p>/*****11月8日更新 关于面试如何提薪资-动态薪资法 ****/</p><p>高端岗位至少3轮以上面试，甚至到5轮，一面、二面一般是技术性的，有HR参与，三面以后一般是CTO或者总经理面试，最后一轮是人力总监面试， 不排除每一轮都会问到薪资。这里有很多道道，要灵活处理，面试前要收集该司高、中、低端岗位的招聘薪资，做好记录。</p><p>一面。 一面是海选，面试官可能参差不齐，如果问到薪资，要根据面试管的水平提薪资。如果你的表现很好，没有被面试官问倒，此时是不是信心大增，要个好价钱？ 切记要低调，给面试官打个分，此面试官如果在你这里，你会给他开多少薪资，他在这个公司薪资对应的是多少，要做好评判。如果你要太多，超过了面试官本人薪资，他心里怎么想，被我面还比我薪资高，要么给你不过，要么过了入职后给你找难题。</p><p>所以，根据一面时根据面试官评判他的薪资待遇，你提的比他稍微低一点，让他觉得觉得此人可用，成本不高。 最终确定薪资的是CTO、总经理、人力总监，你这里仅仅是为了过关，进入更后面的面试，我们无法判断面试官的心胸，我们也无法判断其他应聘者的竞争力如何，仅仅是提高一面竞争力，从茫茫人海中杀出。</p><p>二面。 一面过了，HR会安排二面，可以打听一下二面的面试官情况，尤其是职位，只要不是CTO、总经理，都是动态薪资，顺利通过二面。</p><p>三面。同理，如果是CTO，这时你可以提出你内心中真实期待的薪资，不要虚高即可。</p><p>四面，五面。这时你已经过五关斩六将了，能到这里基本是要定你这个人了，能到这里，公司已经筛选不下300人了，付出成本以万元为单位， 所以多三五千、少三五千都无所谓，在你三面的基础上再加一些。如果有问到为啥和一面、二面不一样，你大大方方的回答：1 首先贵司有薪资保密机制；2 要保护团队的稳定性； 3 便于我的工作顺利展开。你说出这三条，总经理、人力总监就理解你的意思了。</p><p>以上我称为动态薪资法。</p><p>如何判断面试官水平？根据他的问题来判断，如果问题比较离散，都是八股文的内容，为初级面试官。对应公司1-3年招聘岗位薪资中位数。</p><p>如果能进行三级深挖，一般是中级面试官。对应公司高级开发岗薪资中位数。</p><p>如果能在你的项目中看透技术要点，并依你的回答和长处进行深挖四级、甚至五级，高级面试官。 对应公司架构师岗薪资中位数。</p><p>CTO薪资一般很高，你不会超过CTO的。按招聘岗位最高薪资9折提，最后和总经理、人力总监按你最高标准要。</p><p>祝成功~~~~</p><p>/<strong><strong>11月11日更新 高端岗位面试准备</strong></strong>***/</p><p>高端岗位面试要做足准备，比如技术经理，即使以往经历中没有体系化或者全职过技术经理，或许你经历过技术经理部分职责，甚至是技术经理分配给你的任务，咱也见过技术经理是如何工作的，带入技术经理的角色，系统化、场景化技术经理的角色，做好排练，对自己是个大的提升，面试前的准备工作时进步最快的时间段。</p><p>提前准备好这些问题及场景，就像写代码前的需求分析一样(其实程序员的思维不要局限到写代码，放大升维你会打开新的世界)。 架构师、技术经理、或者高级开发从以下几个方面来准备问题：</p><p>1.技术背景：<br> 介绍一下你的技术背景和相关工作经验。</p><p>谈谈你在之前的项目中扮演的角色和取得的成就。</p><p>2.项目管理和团队领导：<br> 过去是如何领导团队的？能否分享一个成功的团队项目经验？</p><p>如何进行项目计划、任务分配和进度追踪的？</p><p>如何做风险评估解决风险？</p><p>3.技术战略和规划：<br> 如何考虑公司的技术战略？</p><p>有没有制定过技术规划或者参与过技术架构的设计？</p><p>4.创新及解决问题：<br> 能否分享一个在项目中遇到的技术难题，以及是如何解决的？</p><p>如何鼓励团队成员的创意和解决问题？</p><p>5.团队文化及领导风格：<br> 一个高效的技术团队应该是什么样的文化？</p><p>你的领导风格是怎样的？如何激励团队成员的积极性和创造力？</p><p>6.业务理解和跨职能合作：<br> 技术团队如何与业务部门紧密合作？</p><p>技术团队和其他部门之间如何建立良好的沟通和协作？</p><p>7.面对技术挑战：<br> 如何保持自己的技术知识和技能的更新和学习的？</p><p>如果在项目中遇到技术难题，但是团队无法解决，你会怎么做？</p><p>以上这些是不是和写代码都无关，但是整个项目推进离不开这些技能。这些问题各位可以想想，接下来我会持续更新这个回答，从上面这七大主干逐步深入，直到每一个叶子节点，还会提供案例。</p><p>另回答一下评论区同学：光画图不敲代码。 画图能让我们快速了解到这个新技术的what、why、where，有个技术广度，如果确定要用，再来深究即可，甚至多个同类技术方案可以做对比，如果一头扎的很深，一个是精力不足，等你把好几个方案都研究透，黄花菜早都凉了，或者头发都掉光了。</p>`,101),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","project.html.vue"]]),d=JSON.parse('{"path":"/interview/interview/project.html","title":"项目经验","lang":"zh-CN","frontmatter":{"title":"项目经验","date":"2023-01-01T00:00:00.000Z","tags":"面试","categories":"面试","description":"【技术面】场景设计？遇到不懂的地方？项目经验？ 先完成再完美：我想了一下可以这么做，时间有限，可能有些不合理地方，然后说方案 想到多少说多少，部分也没关系 不会就坦诚说还有xx部分，因为xx地方没有想到，可不可以给点提示 不知道选什么方案就提出选择困难原因 没听清，不好意思你是指xxx内容还是xxx内容，把范围缩小，不会就不要说 不懂，这个我不大了解，...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/interview/project.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"项目经验"}],["meta",{"property":"og:description","content":"【技术面】场景设计？遇到不懂的地方？项目经验？ 先完成再完美：我想了一下可以这么做，时间有限，可能有些不合理地方，然后说方案 想到多少说多少，部分也没关系 不会就坦诚说还有xx部分，因为xx地方没有想到，可不可以给点提示 不知道选什么方案就提出选择困难原因 没听清，不好意思你是指xxx内容还是xxx内容，把范围缩小，不会就不要说 不懂，这个我不大了解，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ42e212545d48c5fdb0f320f841f6558f.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目经验\\",\\"image\\":[\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ42e212545d48c5fdb0f320f841f6558f.png\\",\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ86044fb44de48c1ee9f98f6b8b910748.png\\",\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQfe6963de019c57bf30885d5898c880a1.png\\",\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQe29516281b44fc6ea6efdc8a0094d494.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"【技术面】场景设计？遇到不懂的地方？项目经验？","slug":"【技术面】场景设计-遇到不懂的地方-项目经验","link":"#【技术面】场景设计-遇到不懂的地方-项目经验","children":[]},{"level":2,"title":"面试复盘","slug":"面试复盘","link":"#面试复盘","children":[]},{"level":2,"title":"微服务高可用配置","slug":"微服务高可用配置","link":"#微服务高可用配置","children":[]},{"level":2,"title":"项目难点","slug":"项目难点","link":"#项目难点","children":[]},{"level":2,"title":"为什么不建议在 Docker 中跑 MySQL？","slug":"为什么不建议在-docker-中跑-mysql","link":"#为什么不建议在-docker-中跑-mysql","children":[]},{"level":2,"title":"如何提升单体springboot的并发数？","slug":"如何提升单体springboot的并发数","link":"#如何提升单体springboot的并发数","children":[]},{"level":2,"title":"难题","slug":"难题","link":"#难题","children":[]},{"level":2,"title":"java面试请谈谈您在工作中遇到过的最大挑战是什么?您是如何克服的?","slug":"java面试请谈谈您在工作中遇到过的最大挑战是什么-您是如何克服的","link":"#java面试请谈谈您在工作中遇到过的最大挑战是什么-您是如何克服的","children":[]},{"level":2,"title":"面试要准备。","slug":"面试要准备。","link":"#面试要准备。","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":23.76,"words":7128},"filePathRelative":"interview/interview/project.md","localizedDate":"2023年1月1日","excerpt":"<h2>【技术面】场景设计？遇到不懂的地方？项目经验？</h2>\\n<p>先完成再完美：我想了一下可以这么做，时间有限，可能有些不合理地方，然后说方案<br>\\n想到多少说多少，部分也没关系<br>\\n不会就坦诚说还有xx部分，因为xx地方没有想到，可不可以给点提示<br>\\n不知道选什么方案就提出选择困难原因</p>\\n<p>没听清，不好意思你是指xxx内容还是xxx内容，把范围缩小，不会就不要说<br>\\n不懂，这个我不大了解，我猜是这样的或者我没怎么了解，但我知道xxxx和它差不多，也能做到zzz目的</p>\\n<ul>\\n<li>项目难点或者亮点？</li>\\n<li>项目为什么用？而不用？为什么这么设计？</li>\\n<li>项目介绍\\n<ul>\\n<li>1.项目的背景(这个项目解决什么问题)，1分钟以内要描述完</li>\\n<li>2.项目包含的功能/模块，简单说明每个功能的作用</li>\\n<li>3.你参与并负责的横块</li>\\n<li>4.项目采用的技术架构</li>\\n<li>5.项目中的难点、亮点和个人的成长\\n<ul>\\n<li>1.体现你解决问题的能力</li>\\n<li>2.体现你的学习能力</li>\\n<li>3.体现你的架构思维</li>\\n<li>4.体现你的团队协作能力</li>\\n<li>5.体现你的管理能偶</li>\\n<li>6.体现你的技术能力</li>\\n<li>也就是只要能够体现上述这些能力的，都可以去总结出来，不一定是高并发/高性能的一些事情比如独立从0到1搭建微服务架构、第一次参与线上问题的诊断和解决</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>斑猪活动圈主要为兴趣类社群活动组织者提供服务的小程序。主要用于替代传统微信群接龙的活动报名模式和微信群收款的活动收款模式，兴趣类社群组织者就是那些经常打羽毛球，玩飞盘那些俱乐部的管理人员</li>\\n<li>项目包含的模块有\\n<ul>\\n<li>活动模块：主要包括活动组织者发布活动，活动参与者付费参与活动，活动结束后活动组织者收款等功能</li>\\n<li>圈子模块：主要包括创建社群圈子，圈子频道聊天等功能</li>\\n<li>金蛋模块：主要包括创建金蛋，抢金蛋，金蛋提现等功能</li>\\n<li>赛事模块：主要包括各种赛事的举办</li>\\n</ul>\\n</li>\\n<li>我负责的模块主要是活动模块、圈子模块</li>\\n<li>项目采用的技术是SpringCloudAlibaba+redis+mysql+rabbitmq</li>\\n<li>项目中的亮点主要是支付模块的设计和圈子频道聊天的设计</li>\\n</ul>","autoDesc":true}');export{k as comp,d as data};
