import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as a,c as s,a as t,b as e,d as r,w as c,e as p}from"./app-7KT7HDzT.js";const d={},l=p('<h2 id="幂等-问题-解决方案" tabindex="-1"><a class="header-anchor" href="#幂等-问题-解决方案"><span>幂等？问题？解决方案？</span></a></h2><p>多次执行同一个操作得到的结果一样<br> 订单支付成功回调通知多次应该每次结果一致</p><p>前段重复提交、接口超时重试、mq消费读到重复消息</p><p><strong>insert前先select</strong>：保存数据前先判断数据是否已存在，存在则直接返回，不存在才执行insert操作<br><strong>建防重表并加唯一索引，捕获重复插入数据抛出的异常</strong>。java捕获DuplicateKeyException异常，spring捕获MySQLIntegrityConstraintViolationException异常</p><figure><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQa3b623aaa71fa360472a6f74291be011.png" alt="mysqlduplicateremove.png" tabindex="0"><figcaption>mysqlduplicateremove.png</figcaption></figure><p><strong>加悲观锁</strong>：同一时刻只允许一个请求获得锁，获取不到锁则返回失败，难保证接口返回相同值。如锁住账户余额select * from user id=xx for update;<br><strong>加乐观锁</strong>：性能好。表添加timestamp或version字段，更新前查询数据，~作为更新条件，更新后version增加，重复更新请求失败：update user set amount=amount+1,version=version+1 where id=1 and version=1<br><strong>状态机</strong>：有状态的业务，限制状态的流动，如订单表中状态1-下单、2-已支付、3-完成、4-撤销等<br><strong>分布式锁</strong>：用Redission框架</p><figure><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ635f5a688327bcfa48661a2e8d79c3a0.png" alt="redisduplicateremove.png" tabindex="0"><figcaption>redisduplicateremove.png</figcaption></figure>',7),m=t("strong",null,"token机制",-1),g=t("br",null,null,-1),u=t("br",null,null,-1),h=t("br",null,null,-1),b=t("br",null,null,-1),f=t("p",null,"redis中是否存在token、删除token用Lua脚本保证原子性",-1),_=t("figure",null,[t("img",{src:"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ435048983c04287e35d3b2e0ddd2fa0c.png",alt:"token.png",tabindex:"0"}),t("figcaption",null,"token.png")],-1);function v(y,x){const n=i("RouteLink");return a(),s("div",null,[l,t("p",null,[m,e("："),g,e(" 客户端发送请求获取token，服务端生成"),r(n,{to:"/interview/distributed/distributedid.html"},{default:c(()=>[e("全局唯一id")]),_:1}),e("作为token保存在redis中并返回给客户端"),u,e(" 客户端调用业务请求时携带token"),h,e(" 服务端校验token是否存在，存在则执行业务并删除redis中的token"),b,e(" 不存在则表示重复操作，返回指定的结果给客户端")]),f,_])}const k=o(d,[["render",v],["__file","idempotence.html.vue"]]),j=JSON.parse('{"path":"/interview/scenedesign/idempotence.html","title":"幂等设计","lang":"zh-CN","frontmatter":{"title":"幂等设计","date":"2023-01-01T00:00:00.000Z","tags":"面试","categories":"面试","description":"幂等？问题？解决方案？ 多次执行同一个操作得到的结果一样 订单支付成功回调通知多次应该每次结果一致 前段重复提交、接口超时重试、mq消费读到重复消息 insert前先select：保存数据前先判断数据是否已存在，存在则直接返回，不存在才执行insert操作 建防重表并加唯一索引，捕获重复插入数据抛出的异常。java捕获DuplicateKeyExcep...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/scenedesign/idempotence.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"幂等设计"}],["meta",{"property":"og:description","content":"幂等？问题？解决方案？ 多次执行同一个操作得到的结果一样 订单支付成功回调通知多次应该每次结果一致 前段重复提交、接口超时重试、mq消费读到重复消息 insert前先select：保存数据前先判断数据是否已存在，存在则直接返回，不存在才执行insert操作 建防重表并加唯一索引，捕获重复插入数据抛出的异常。java捕获DuplicateKeyExcep..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQa3b623aaa71fa360472a6f74291be011.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"幂等设计\\",\\"image\\":[\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQa3b623aaa71fa360472a6f74291be011.png\\",\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ635f5a688327bcfa48661a2e8d79c3a0.png\\",\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ435048983c04287e35d3b2e0ddd2fa0c.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"幂等？问题？解决方案？","slug":"幂等-问题-解决方案","link":"#幂等-问题-解决方案","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.44,"words":432},"filePathRelative":"interview/scenedesign/idempotence.md","localizedDate":"2023年1月1日","excerpt":"<h2>幂等？问题？解决方案？</h2>\\n<p>多次执行同一个操作得到的结果一样<br>\\n订单支付成功回调通知多次应该每次结果一致</p>\\n<p>前段重复提交、接口超时重试、mq消费读到重复消息</p>\\n<p><strong>insert前先select</strong>：保存数据前先判断数据是否已存在，存在则直接返回，不存在才执行insert操作<br>\\n<strong>建防重表并加唯一索引，捕获重复插入数据抛出的异常</strong>。java捕获DuplicateKeyException异常，spring捕获MySQLIntegrityConstraintViolationException异常</p>","autoDesc":true}');export{k as comp,j as data};
