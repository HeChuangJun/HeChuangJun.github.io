import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-7KT7HDzT.js";const e={},p=t(`<h2 id="mybatis、jdbc、statement与preparedstatement区别-、-区别-√模糊查询-一对一、一对多查询-批量操作-动态sql-作用-原理" tabindex="-1"><a class="header-anchor" href="#mybatis、jdbc、statement与preparedstatement区别-、-区别-√模糊查询-一对一、一对多查询-批量操作-动态sql-作用-原理"><span>MyBatis、JDBC、Statement与PreparedStatement区别？#{}、\${}区别？ √模糊查询？一对一、一对多查询？批量操作？动态SQL？作用？原理？</span></a></h2><p>半ORM（对象关系映射）框架，封装了JDBC，开发时只关注SQL语句，不用处理加载驱动、创建连接等繁杂的过程，灵活度高。但sql语句编写工作量大，要求高，数据库移植性差</p><details><summary>Java DataBase Connectivity用于执行SQL的API接口</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//1.注册驱动</span>
<span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>“<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.获得链接</span>
connection conn <span class="token operator">=</span> <span class="token class-name">DirverManger</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ip<span class="token operator">:</span>port<span class="token operator">/</span>test<span class="token punctuation">,</span>，密码<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from t where a = ?&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">PreparedStatement</span> psmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.获得预处理对象</span>
<span class="token comment">//void setXxx(int index, Xxx xx); </span>
psmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token char">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.设置实际参数</span>
<span class="token comment">//int executeUpdate(); --执行insert update delete语句.</span>
<span class="token comment">//ResultSet executeQuery(); --执行select语句.</span>
<span class="token comment">//boolean execute(); --执行select返回true 否则返回false</span>
<span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> psmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.执行sql</span>
<span class="token keyword">while</span><span class="token punctuation">(</span> rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//6.处理结果集</span>
	<span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">/</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> 获得任意对象
	<span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">/</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> 获得字符串
	<span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">/</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> 获得整形
	<span class="token keyword">double</span> <span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">/</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> 获得双精度浮点型
<span class="token punctuation">}</span>
rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7.释放资源</span>
stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>用途：不~；支持参数化查询<br> 性能：每次都解析和编译，性能差；预编译，高性能<br> 批量操作：不支持，支持<br> 安全性：不能~；防止SQL注入</p><p><code>#{}</code>是占位符，预编译处理；<code>\${}</code>是拼接符，没有~<br><code>#{}</code>能防止SQL注入，提高系统安全性；<code>\${}</code>不能~<br><code>#{}</code>的变量替换是在DBMS中；<code>\${}</code> 的~外<br><code>#{}</code>自动转换java类型和jdbc类型。自动加上&#39;&#39;；<code>\${}</code>不~~不超过最大限制max_allowed_packet（1M）</p><p>select * from t order by \${a} limit 1,20如果a=id;select user(),database() -- 或者-1 union select database(),user() 或者-1 union select table_name,table_schema from information_schema.tables where table_schema=&#39;sue&#39;则sql注入，导致信息泄露，如果是-1;锁表语句、drop database test; -- 则导致系统瘫痪或者数据被删</p><p>LIKE CONCAT(&#39;%&#39;,#{question},&#39;%&#39;)或者&quot;%&quot;#{question}&quot;%&quot;</p><p>association一对一关联对象，collection一对多查询关联集合对象的延迟加载。</p><p>用foreach标签：属性item，index，collection，open，separator，close。<br> 用ExecutorType.BATCH</p><p>以XML标签的形式编写，完成逻辑判断和动态拼接SQL的功能。<br> 动态SQL标签：<code>&lt;if /&gt;、&lt;choose /&gt;、&lt;when /&gt;、&lt;otherwise /&gt;、&lt;trim /&gt;、&lt;where /&gt;、&lt;set /&gt;、&lt;foreach /&gt;、&lt;bind /&gt;</code><br> 原理：使用OGNL的表达式，从SQL参数对象中计算表达式的值</p><h2 id="mybatis延迟加载-原理" tabindex="-1"><a class="header-anchor" href="#mybatis延迟加载-原理"><span>Mybatis延迟加载？原理？</span></a></h2><p>配置文件：lazyLoadingEnabled=true<br> 使用CGLIB创建目标对象的代理对象，调用目标方法时进入拦截器方法，如a.getB().getName()，拦截器invoke()方法发现a.getB()是null则发送事先保存好的查询关联B对象的sql查询B并调用a.setB(b)<br> Hibernate同理</p><h2 id="mybatis事务管理形式" tabindex="-1"><a class="header-anchor" href="#mybatis事务管理形式"><span>MyBatis事务管理形式？</span></a></h2><p>使用JDBC的事务管理机制。利用java.sql.Connection对象<br> 使用MANAGED的事务管理机制。让容器如WebLogic、JBOSS</p><h2 id="mybatis一级缓存和二级缓存" tabindex="-1"><a class="header-anchor" href="#mybatis一级缓存和二级缓存"><span>MyBatis一级缓存和二级缓存？</span></a></h2><p>不推荐，因为分布式环境下缓存基于本地，会有脏数据，不如直接使用Redis、Memcached等分布式缓存<br> 都是基于PerpetualCache没有容量限定的HashMap缓存</p><p>一级缓存（默认开）：存储作用域为sqlSession或者statement，建议设为Statement。配置：<code>&lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION|STATEMENT&quot;/&gt;</code></p><p>二级缓存：~Mapper(Namespace)，可自定义存储源Ehcache。配置：<code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code>在映射XML中配置cache或者cache-ref</p><p>C/U/D操作后清除作用域下select缓存</p><h2 id="mybatis执行顺序√sqlsession-流程-核心组件" tabindex="-1"><a class="header-anchor" href="#mybatis执行顺序√sqlsession-流程-核心组件"><span>MyBatis执行顺序√SQLSession 流程，核心组件</span></a></h2><p>读取mybatis-config.xml，生成 Configuration，存储全局配置。<br> 加载 Mapper.xml 文件：生成 MappedStatement 和其他映射信息，存储到 Configuration。<br> SqlSessionFactoryBuilder 通过Configuration创建 SqlSessionFactory：<br> SqlSessionFactory创建 SqlSession 对象：用于执行SQL、处理事务<br> Executor根据MappedStatement动态生成 SQL，执行 SQL 和维护缓存：处理参数绑定、缓存管理，并调用数据库。<br> 输入参数映射：通过 MappedStatement 将传入参数映射到 SQL。<br> 输出结果映射：通过 MappedStatement 将结果集映射为 Java 对象。</p><p>调用Mapper接口方法执行SQL<br> SqlSession 根据调用的 StatementID(Mapper接口的全限定名+方法名)找到MappedStatement对象（包含 SQL 的配置信息）<br> Executor根据MappedStatement对象生成动态SQL、维护一二级缓存<br> SQL参数转化、动态SQL拼接，生成JDBC Statement 对象。<br> 使用 ParameterHandler 将参数填充到SQL占位符中，<br> 使用 StatementHandler 将参数绑定到JDBC Statement对象。<br> JDBC statement对象执行 SQL 语句。返回 ResultSet结果集。<br> ResultSetHandler 使用 MappedStatement 中的结果映射关系将ResultSet结果集映射为Java对象<br> 关闭SqlSession，释放资源</p><p>Configuration：保存全局配置信息（如jdbc数据源、SQL映射文件等）<br> SqlSession：面向用户的接口，封装了JDBC操作<br> Executor：用于和数据库交互<br> MappedStatement：用于描述SQL配置信息，存储 SQL 映射信息，如 SQL 语句、参数映射、结果映射等<br> StatementHandler：封装了对JDBC中Statement 对象的操作<br> TypeHandler：类型处理器，用于Java类型与基础类型之间的转换。<br> ParameterHandler：用于为SQL的参数占位符设置值。<br> ResultSetHandler：将结果集ResultSet对象转换为Java实体对象</p><h2 id="mapper接口与xml对应关系-mapper接口方法能重载吗-映射enum枚举类-executor执行器分类及区别" tabindex="-1"><a class="header-anchor" href="#mapper接口与xml对应关系-mapper接口方法能重载吗-映射enum枚举类-executor执行器分类及区别"><span>Mapper接口与XML对应关系？Mapper接口方法能重载吗？映射Enum枚举类？Executor执行器分类及区别？</span></a></h2><p>接口的全限名、方法名、方法参数映射文件namespace值、MappedStatement的id值、SQL的参数<br> 不能重载，因为是全限名+方法名的保存和寻找策略。</p><p>原理：select、insert、update、delete标签都解析为MappedStatement对象。Mapper接口的实现类通过使用JDK动态代理自动生成代理对象Proxy时会拦截接口方法，根据接口全限名+方法名拼接字符串作为key值，唯一定位一个对应的MappedStatement执行SQL</p><details><summary>图</summary><figure><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ6fc9b6abdff1d6b729e17adb0f9ad16c.png" alt="sqlexecutionprocedure.png" tabindex="0"><figcaption>sqlexecutionprocedure.png</figcaption></figure></details><p>EnumTypeHandler基于Enum.name枚举名称(String)。默认。<br> EnumOrdinalTypeHandler基于Enum.ordinal枚举数值(int)。<br> 设置<code>&lt;setting name=&quot;defaultEnumTypeHandler&quot; value=&quot;EnumOrdinalTypeHandler&quot; /&gt;</code></p><p>通过自定义TypeHandler类实现#setParameter()和getResult()接口完成从javaType和jdbcType双向转换</p><p>SimpleExecutor：每次执行update或select都创建Statement对象，用完后立刻关闭<br> ReuseExecutor：执行update或select时以SQL作为key查找缓存的Statement对象，存在就使用，不存在就创建；用完后放入缓存Map&lt;String, Statement&gt;内<br> BatchExecutor：执行update操作调用addBatch方法将所有SQL都添加到批处理中，等待executeBatch方法统一执行<br> CachingExecutor ：在三个执行器之上增加二级缓存功能<br><code>&lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE、REUSE、BATCH&quot;&gt;</code> 分别使用上面三个执行器<br><code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;&quot;&gt;</code> value=true时创建 CachingExecutor执行器</p><h2 id="mybatis插件原理-自定义插件-分页插件原理" tabindex="-1"><a class="header-anchor" href="#mybatis插件原理-自定义插件-分页插件原理"><span>Mybatis插件原理？自定义插件？分页插件原理？</span></a></h2><p>基于JDK动态代理，拦截ParameterHandler、ResultSetHandler、StatementHandler、Executor对象的方法</p><details><summary>实现Interceptor接口实现intercept(Invocation invocation)方法，给插件添加注解指定要拦截哪接口的方法，在配置文件中配置插件</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>
        type <span class="token operator">=</span> <span class="token class-name">StatementHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token comment">// 拦截对象类型</span>
        method <span class="token operator">=</span> <span class="token string">&quot;prepare&quot;</span><span class="token punctuation">,</span>           <span class="token comment">// 拦截方法</span>
        args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Connection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span> <span class="token comment">// 方法参数</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// 被拦截方法名</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;拦截方法: &quot;</span> <span class="token operator">+</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 执行目标方法</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法执行时间: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否需要生成代理对象</span>
        <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 读取配置文件的属性</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MyPlugin</span> myPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;param1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myPlugin<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
configuration<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>myPlugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>不推荐：使用RowBounds对象对ResultSet结果集执行内存分页，而非数据库分页<br> 推荐：手动或用分页插件给SQL添加分页参数<br> 原理：用插件接口拦截Executor的query方法添加分页参数<br> 分页插件：Mybatis-PageHelper MyBatis-Plus</p>`,34),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","mybatis.html.vue"]]),m=JSON.parse('{"path":"/interview/framework/mybatis.html","title":"MyBatis","lang":"zh-CN","frontmatter":{"title":"MyBatis","date":"2023-01-01T00:00:00.000Z","tags":"java","categories":"面试","description":"MyBatis、JDBC、Statement与PreparedStatement区别？#{}、${}区别？ √模糊查询？一对一、一对多查询？批量操作？动态SQL？作用？原理？ 半ORM（对象关系映射）框架，封装了JDBC，开发时只关注SQL语句，不用处理加载驱动、创建连接等繁杂的过程，灵活度高。但sql语句编写工作量大，要求高，数据库移植性差 Java...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/framework/mybatis.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"MyBatis"}],["meta",{"property":"og:description","content":"MyBatis、JDBC、Statement与PreparedStatement区别？#{}、${}区别？ √模糊查询？一对一、一对多查询？批量操作？动态SQL？作用？原理？ 半ORM（对象关系映射）框架，封装了JDBC，开发时只关注SQL语句，不用处理加载驱动、创建连接等繁杂的过程，灵活度高。但sql语句编写工作量大，要求高，数据库移植性差 Java..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ6fc9b6abdff1d6b729e17adb0f9ad16c.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis\\",\\"image\\":[\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ6fc9b6abdff1d6b729e17adb0f9ad16c.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"MyBatis、JDBC、Statement与PreparedStatement区别？#{}、${}区别？ √模糊查询？一对一、一对多查询？批量操作？动态SQL？作用？原理？","slug":"mybatis、jdbc、statement与preparedstatement区别-、-区别-√模糊查询-一对一、一对多查询-批量操作-动态sql-作用-原理","link":"#mybatis、jdbc、statement与preparedstatement区别-、-区别-√模糊查询-一对一、一对多查询-批量操作-动态sql-作用-原理","children":[]},{"level":2,"title":"Mybatis延迟加载？原理？","slug":"mybatis延迟加载-原理","link":"#mybatis延迟加载-原理","children":[]},{"level":2,"title":"MyBatis事务管理形式？","slug":"mybatis事务管理形式","link":"#mybatis事务管理形式","children":[]},{"level":2,"title":"MyBatis一级缓存和二级缓存？","slug":"mybatis一级缓存和二级缓存","link":"#mybatis一级缓存和二级缓存","children":[]},{"level":2,"title":"MyBatis执行顺序√SQLSession 流程，核心组件","slug":"mybatis执行顺序√sqlsession-流程-核心组件","link":"#mybatis执行顺序√sqlsession-流程-核心组件","children":[]},{"level":2,"title":"Mapper接口与XML对应关系？Mapper接口方法能重载吗？映射Enum枚举类？Executor执行器分类及区别？","slug":"mapper接口与xml对应关系-mapper接口方法能重载吗-映射enum枚举类-executor执行器分类及区别","link":"#mapper接口与xml对应关系-mapper接口方法能重载吗-映射enum枚举类-executor执行器分类及区别","children":[]},{"level":2,"title":"Mybatis插件原理？自定义插件？分页插件原理？","slug":"mybatis插件原理-自定义插件-分页插件原理","link":"#mybatis插件原理-自定义插件-分页插件原理","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.39,"words":1916},"filePathRelative":"interview/framework/mybatis.md","localizedDate":"2023年1月1日","excerpt":"<h2>MyBatis、JDBC、Statement与PreparedStatement区别？#{}、${}区别？ √模糊查询？一对一、一对多查询？批量操作？动态SQL？作用？原理？</h2>\\n<p>半ORM（对象关系映射）框架，封装了JDBC，开发时只关注SQL语句，不用处理加载驱动、创建连接等繁杂的过程，灵活度高。但sql语句编写工作量大，要求高，数据库移植性差</p>\\n<details>\\n<summary>Java DataBase Connectivity用于执行SQL的API接口</summary>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">//1.注册驱动</span>\\n<span class=\\"token class-name\\">Class</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forName</span><span class=\\"token punctuation\\">(</span>“<span class=\\"token class-name\\"><span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>mysql<span class=\\"token punctuation\\">.</span>jdbc<span class=\\"token punctuation\\">.</span></span>Driver</span>”<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//2.获得链接</span>\\nconnection conn <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">DirverManger</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getConnection</span><span class=\\"token punctuation\\">(</span>jdbc<span class=\\"token operator\\">:</span>mysql<span class=\\"token operator\\">:</span><span class=\\"token operator\\">/</span><span class=\\"token operator\\">/</span>ip<span class=\\"token operator\\">:</span>port<span class=\\"token operator\\">/</span>test<span class=\\"token punctuation\\">,</span>，密码<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> sql <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"select * from t where a = ?\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">PreparedStatement</span> psmt <span class=\\"token operator\\">=</span> conn<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">prepareStatement</span><span class=\\"token punctuation\\">(</span>sql<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//3.获得预处理对象</span>\\n<span class=\\"token comment\\">//void setXxx(int index, Xxx xx); </span>\\npsmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setString</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token char\\">\'张三\'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//4.设置实际参数</span>\\n<span class=\\"token comment\\">//int executeUpdate(); --执行insert update delete语句.</span>\\n<span class=\\"token comment\\">//ResultSet executeQuery(); --执行select语句.</span>\\n<span class=\\"token comment\\">//boolean execute(); --执行select返回true 否则返回false</span>\\n<span class=\\"token class-name\\">ResultSet</span> rs <span class=\\"token operator\\">=</span> psmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">executeQuery</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//5.执行sql</span>\\n<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span> rs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">//6.处理结果集</span>\\n\\t<span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">getObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token operator\\">/</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">)</span> 获得任意对象\\n\\t<span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getString</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token operator\\">/</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">)</span> 获得字符串\\n\\t<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getInt</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token operator\\">/</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">)</span> 获得整形\\n\\t<span class=\\"token keyword\\">double</span> <span class=\\"token function\\">getDouble</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token operator\\">/</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">)</span> 获得双精度浮点型\\n<span class=\\"token punctuation\\">}</span>\\nrs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//7.释放资源</span>\\nstmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\ncon<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></details>","autoDesc":true}');export{k as comp,m as data};
