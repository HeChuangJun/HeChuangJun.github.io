import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-7KT7HDzT.js";const p={},e=t(`<h2 id="队列介绍" tabindex="-1"><a class="header-anchor" href="#队列介绍"><span>队列介绍</span></a></h2><ul><li><p>队列是一种线性数据结构，它通过两个主要操作（即入队和出队）来模拟现实世界的队列。</p></li><li><p>队列是一个有序列表，可以用数组或是链表来实现。遵循先进先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出</p></li><li><p>优先级队列：每个元素都具有一定的优先级。并且可比较，优先级队列中元素的优先级决定了从优先级队列中移除元素的顺序。</p></li><li><p>索引优先级队列：在优先级队列上支持快速更新和删除键值对。适用于快速更新队列状态</p></li><li><p>使用场景</p><ul><li>任何等待线都可模拟队列，例如电影院/银行排队</li><li>跟踪最近添加的元素</li><li>Web 服务器请求管理，先到先得</li><li>广度优先搜索 (BFS) 图遍历</li></ul></li><li><p>优先级队列使用场景</p><ul><li>Dijkstra 最短路径算法的某些实现。</li><li>任何时候您需要动态获取下一个最佳或下一个最差元素。</li><li>用于 Huffman 编码（通常用于无损数据压缩）。</li><li>最佳优先搜索 (BFS) 算法（例如 A*）使用 PQs 连续抓取下一个最有希望的节点。</li><li>用于最小生成树 (MST) 算法。</li></ul></li><li><p>算法复杂度<br> enqueue O(1)<br> dequeue O(1)<br> peeking O(1)<br> contains O(n)<br> removal O(n)<br> isEmpty O(1)<br> contains、removal可能都需要扫描整个链表</p></li></ul><h2 id="基于单向环形带哨兵链表实现的队列-可选" tabindex="-1"><a class="header-anchor" href="#基于单向环形带哨兵链表实现的队列-可选"><span>基于<strong>单向环形带哨兵</strong>链表实现的队列(可选)</span></a></h2><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/74d9e905f1ada9f9a0508.jpg" alt="linkedlistqueue.png" tabindex="0"><figcaption>linkedlistqueue.png</figcaption></figure><ul><li>存在的问题:数组不能复用,使用算法改成环形队列取模解决</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>
        <span class="token keyword">implements</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">E</span> value<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> tail <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>

    <span class="token punctuation">{</span>
        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">LinkedListQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">LinkedListQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> added <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> added<span class="token punctuation">;</span>
        tail <span class="token operator">=</span> added<span class="token punctuation">;</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tail <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        size<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> first<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> head <span class="token operator">==</span> tail<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> size <span class="token operator">==</span> capacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> p <span class="token operator">!=</span> head<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">E</span> value <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                <span class="token keyword">return</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基于环形数组实现的队列" tabindex="-1"><a class="header-anchor" href="#基于环形数组实现的队列"><span>基于环形数组实现的队列</span></a></h2><p>循环队列不容易判断队列满和空的情况，因为此时队首指针和队尾指针都指向同一个位置，解决方法如下</p><ul><li>添加一个不存储元素的空位区分队列为满时和队列为空时的情况，当<code>( rear + 1 ) % maxSize == front</code>表示队列满，<code>front == tail</code>表示队列空(本例)</li><li>附加一个标志位tag，当head赶上tail，队列空，则令tag=0,当tail赶上head，队列满，则令tag=1</li></ul><p>有效数字的个数<code>size = (rear+maxSize-front)%maxSize</code>,推导过程,前提条件是rear - front &lt; maxSize</p><ul><li>当rear在front后面，<code>size = rear - front</code>, 取模保证size在maxSize范围内(rear - front) % maxSize + maxSize % maxSize = (rear + maxSize - front) % maxSize</li><li>当rear在front前面，<code>size = 0到rear+font到尾= (rear-0) + (maxSize - front)</code>, 取模保证size在maxSize范围内 (rear + maxSize - front) % maxSize</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//ArrayQueue与IntQueue区别是泛型和size，ArrayQueue的大小、空和满状态是根据公式计算的</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> rear<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// ArrayQueue maximum size is data.length - 1;为了留一个位置判断队满或者队空</span>
    front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">T</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Queue is full&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> elem<span class="token punctuation">;</span><span class="token comment">//将元素放入 rear 指向的位置，并将 rear 向后移动一位。</span>
    rear <span class="token operator">=</span> <span class="token function">adjustIndex</span><span class="token punctuation">(</span>rear<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Queue is empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tempFront <span class="token operator">=</span> front<span class="token punctuation">;</span>
    front <span class="token operator">=</span> <span class="token function">adjustIndex</span><span class="token punctuation">(</span><span class="token operator">++</span>front<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>tempFront<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Queue is empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">adjustIndex</span><span class="token punctuation">(</span>rear <span class="token operator">+</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> front<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span><span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> data<span class="token punctuation">.</span>length <span class="token operator">==</span> front <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">adjustIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//调整索引以保持在数组范围内,相当于取模</span>
    <span class="token keyword">return</span> index <span class="token operator">%</span> size<span class="token punctuation">;</span><span class="token comment">//index &gt;= size ? index - size : index;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","queue.html.vue"]]),d=JSON.parse('{"path":"/interview/datastructure/queue.html","title":"队列","lang":"zh-CN","frontmatter":{"title":"队列","icon":"circle-info","date":"2023-01-01T00:00:00.000Z","tags":"队列","categories":"面试","description":"队列介绍 队列是一种线性数据结构，它通过两个主要操作（即入队和出队）来模拟现实世界的队列。 队列是一个有序列表，可以用数组或是链表来实现。遵循先进先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出 优先级队列：每个元素都具有一定的优先级。并且可比较，优先级队列中元素的优先级决定了从优先级队列中移除元素的顺序。 索引优先级队列：在优先级队列上支...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/datastructure/queue.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"队列"}],["meta",{"property":"og:description","content":"队列介绍 队列是一种线性数据结构，它通过两个主要操作（即入队和出队）来模拟现实世界的队列。 队列是一个有序列表，可以用数组或是链表来实现。遵循先进先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出 优先级队列：每个元素都具有一定的优先级。并且可比较，优先级队列中元素的优先级决定了从优先级队列中移除元素的顺序。 索引优先级队列：在优先级队列上支..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://290ff162.telegraph-image-eg9.pages.dev/file/74d9e905f1ada9f9a0508.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"队列\\",\\"image\\":[\\"https://290ff162.telegraph-image-eg9.pages.dev/file/74d9e905f1ada9f9a0508.jpg\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"队列介绍","slug":"队列介绍","link":"#队列介绍","children":[]},{"level":2,"title":"基于单向环形带哨兵链表实现的队列(可选)","slug":"基于单向环形带哨兵链表实现的队列-可选","link":"#基于单向环形带哨兵链表实现的队列-可选","children":[]},{"level":2,"title":"基于环形数组实现的队列","slug":"基于环形数组实现的队列","link":"#基于环形数组实现的队列","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.43,"words":1029},"filePathRelative":"interview/datastructure/queue.md","localizedDate":"2023年1月1日","excerpt":"<h2>队列介绍</h2>\\n<ul>\\n<li>\\n<p>队列是一种线性数据结构，它通过两个主要操作（即入队和出队）来模拟现实世界的队列。</p>\\n</li>\\n<li>\\n<p>队列是一个有序列表，可以用数组或是链表来实现。遵循先进先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出</p>\\n</li>\\n<li>\\n<p>优先级队列：每个元素都具有一定的优先级。并且可比较，优先级队列中元素的优先级决定了从优先级队列中移除元素的顺序。</p>\\n</li>\\n<li>\\n<p>索引优先级队列：在优先级队列上支持快速更新和删除键值对。适用于快速更新队列状态</p>\\n</li>\\n<li>\\n<p>使用场景</p>\\n<ul>\\n<li>任何等待线都可模拟队列，例如电影院/银行排队</li>\\n<li>跟踪最近添加的元素</li>\\n<li>Web 服务器请求管理，先到先得</li>\\n<li>广度优先搜索 (BFS) 图遍历</li>\\n</ul>\\n</li>\\n<li>\\n<p>优先级队列使用场景</p>\\n<ul>\\n<li>Dijkstra 最短路径算法的某些实现。</li>\\n<li>任何时候您需要动态获取下一个最佳或下一个最差元素。</li>\\n<li>用于 Huffman 编码（通常用于无损数据压缩）。</li>\\n<li>最佳优先搜索 (BFS) 算法（例如 A*）使用 PQs 连续抓取下一个最有希望的节点。</li>\\n<li>用于最小生成树 (MST) 算法。</li>\\n</ul>\\n</li>\\n<li>\\n<p>算法复杂度<br>\\nenqueue O(1)<br>\\ndequeue O(1)<br>\\npeeking O(1)<br>\\ncontains O(n)<br>\\nremoval O(n)<br>\\nisEmpty O(1)<br>\\ncontains、removal可能都需要扫描整个链表</p>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,d as data};
