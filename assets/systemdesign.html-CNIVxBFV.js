import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as t,e as l}from"./app-7KT7HDzT.js";const r={},s=l('<h2 id="软件开发阶段及作用-敏捷开发与devops" tabindex="-1"><a class="header-anchor" href="#软件开发阶段及作用-敏捷开发与devops"><span>软件开发阶段及作用？敏捷开发与devOps？</span></a></h2><p><strong>可行性分析</strong>：评估项目的技术、经济、法律可行性。确定项目是否值得开发，以及潜在的风险和收益<br><strong>需求分析</strong>：与用户或客户沟通，明确软件需要实现的功能和需求。形成需求规格说明书，作为开发的基础<br><strong>软件设计</strong>：包括概要设计（系统架构设计）和详细设计（模块、接口等的具体实现方式）。使用各种设计文档和工具将需求转化为可实现的软件方案<br><strong>程序编码</strong>：根据设计文档编写源代码。遵循编程规范和最佳实践，保证代码的可读性和可维护性。<br><strong>软件测试</strong>：包括单元测试、集成测试、系统测试和验收测试。发现并修复缺陷，确保软件质量。测试方法有白、黑盒测试</p><p><strong>DevOps</strong>：强调组织团队(开发、运维、测试)通过自动化工具协作和沟通来完成软件生命周期管理，从而更快、更频繁地交付更稳定的软件<br><strong>敏捷开发</strong>：不追求前期完美的设计、完美编码，力求短周期内开发出产品的核心功能，尽早发布可用版本。在后续生产周期内按照新需求不断迭代升级，完善产品</p><figure><img src="https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMw01be7a81429952c68938102d050d707d.png" alt="devops.png" tabindex="0"><figcaption>devops.png</figcaption></figure><h2 id="ddd-如何建立领域模型" tabindex="-1"><a class="header-anchor" href="#ddd-如何建立领域模型"><span>DDD？如何建立领域模型？</span></a></h2><p>通过将软件的设计紧密围绕业务领域来解决复杂的软件开发问题。</p><p><strong>业务分析</strong>：项目团队的成员主要包括领域专家、设计人员、开发人员等一起梳理业务问题域以及业务期望，在业务领域中发现领域事件、领域对象及其对应的领域行为和各自的关联关系<br><strong>战略设计</strong>：通过DDD理论对业务进行领域划分构建领域模型，梳理出相应的限界上下文，通过统一的领域语言从战略层面进行领域划分以及构建领域模型。梳理出对应的聚合根、实体、以及值对象。<br><strong>战术设计</strong>：以领域模型为战术设计的输入，以限界上下文作为微服务划分的边界进行微服务拆分，在每个微服务中进行领域分层，实现领域模型对于代码的映射</p><p>实体Entity：具备唯一ID，能够持久化，对应现实世界业务对象的业务属性以及业务行为。<br> 值对象Value Object：不具有唯一ID，由对象的属性描述，一般为内存中的临时对象，用来传递参数或对实体进行补充描述。值对象以及实体都是领域模型中的领域对象，<br> 领域服务Domain Service：为上层建筑提供可操作的接口，负责对领域对象进行调度和封装，同时可以对外提供各种形式的服务。<br> 聚合根Aggregate Root：属于实体对象，具有全局唯一ID，聚合根在聚合之内采用引用依赖的方式对实体和值对象进行组织和协调，聚合根和聚合根之间通过唯一 id 进行聚合之间的协同。<br> 工厂Factories：用来创建聚合根，一般采用IOC容器来实现<br> 仓储Repository：封装了基础设施来提供查询和持久化聚合操作。<br> 聚合：有业务关联关系的实体以及值对象的集合，通过实体、值对象以及各自之间的业务逻辑聚合在一起完成某个业务节点。可以根据业务的单一职责以及高内聚的的设计原来来进行聚合的划分</p><p>业务分析：领域专家、DDD 专家、架构师、产品经理、项目经理、开发人员以及测试人员等集合在一起之后需要通过头脑风暴的方式梳理当前的业务域问题<br> 领域建模：找出实体和值对象，构建聚合，划分聚合到边界上下文</p><h2 id="java处理高并发" tabindex="-1"><a class="header-anchor" href="#java处理高并发"><span>Java处理高并发</span></a></h2><ul><li>采用分布式部署的方式，部署多台服务器，把流量分流开，让每个服务器都承担一部分的并发和流量，提升整体系统的并发能力。</li><li>微服务拆分，把一个单体的应用，按功能单一性，拆分为多个服务模块。比如一个电商系统，拆分为用户系统、订单系统、商品系统等等</li><li>分库分表</li><li>主从分离：实时性要求不高的读请求，都去读从库，写的请求或者实时性要求高的请求，才走主库</li><li>池化技术：数据库连接池、Redis 连接池、线程池</li><li>缓存：Redis缓存</li><li>CDN加速静态资源访问</li><li>消息队列，削锋</li><li>ElasticSearch：支持简单的查询搜索、统计类的操作。</li><li>降级熔断：开源组件Hystrix</li><li>限流：可以使用Guava的RateLimiter单机版限流，也可以使用Redis分布式限流，还可以使用阿里开源组件sentinel限流。</li><li>异步：后端可以借用消息队列实现。比如在海量秒杀请求过来时，先放到消息队列中，快速响应用户，告诉用户请求正在处理中，这样就可以释放资源来处理更多的请求。秒杀请求处理完后，通知用户秒杀抢购成功或者失败</li><li>接口的常规优化</li><li>压力测试确定系统瓶颈：压测完要分析整个调用链路，性能可能出现问题是网络层（如带宽）、Nginx层、服务层、还是数据路缓存等中间件等等。loadrunner是一款不错的压力测试工具，jmeter则是接口性能测试工具，都可以来做下压测。</li><li>应对突发流量峰值：扩容+切流量：扩容：比如增加从库、提升配置的方式，提升系统/组件的流量承载能力。比如增加MySQL、Redis从库来处理查询请求。<br> 切流量：服务多机房部署，如果高并发流量来了，把流量从一个机房切换到另一个机房。</li><li>HTML静态化</li><li>图片服务器分离</li><li>数据库集群，库表散列</li><li>镜像</li><li>负载均衡</li></ul><h2 id="请说出2种减少页面加载时间的方法" tabindex="-1"><a class="header-anchor" href="#请说出2种减少页面加载时间的方法"><span>请说出2种减少页面加载时间的方法</span></a></h2><ul><li><ol><li>减少重复的HTTP请求数量</li></ol></li><li><ol start="2"><li>压缩Javascript、CSS代码</li></ol></li><li><ol start="3"><li>在文件头部放置css样式的定义</li></ol></li><li><ol start="4"><li>在文件末尾放Javascript脚本</li></ol></li><li><ol start="5"><li>css、javascript改由外部调用</li></ol></li><li><ol start="6"><li>尽可能减少DCOM元素</li></ol></li><li><ol start="7"><li>避免使用CSS脚本(CSS Expressions)</li></ol></li><li><ol start="10"><li>服务器启用gzip压缩功能</li></ol></li><li><ol start="11"><li>Ajax采用缓存调用</li></ol></li><li><ol start="12"><li>Ajax调用尽量采用GET方法调用</li></ol></li><li><ol start="13"><li>养成良好的开发维护习惯，尽量避免脚本重复调用</li></ol></li><li><ol start="14"><li>缩减iframe的使用，如无必要，尽量不要使用</li></ol></li></ul><h2 id="英文字母和中文汉字在不同字符集编码下的字节数" tabindex="-1"><a class="header-anchor" href="#英文字母和中文汉字在不同字符集编码下的字节数"><span>英文字母和中文汉字在不同字符集编码下的字节数</span></a></h2><ul><li>英文字母都是1字节：GB2312，GBK，ISO-8859-1，UTF-8</li><li>中文汉字：GB2312 2字节：GBK 2字节 ；ISO-8859-1 1字节；UTF-8 3字节</li></ul><h2 id="对-高内聚-低耦合-方法理解-你在程序设计和架构设计中的经验" tabindex="-1"><a class="header-anchor" href="#对-高内聚-低耦合-方法理解-你在程序设计和架构设计中的经验"><span>对&quot;高内聚，低耦合&quot;方法理解，你在程序设计和架构设计中的经验</span></a></h2><ul><li>降低耦合度的方法 <ul><li>1、少使用类的继承，多用接口隐藏实现的细节。 Java面向对象编程引入接口除了支持多态外， 隐藏实现细节也是其中一个目的。</li><li>2、模块的功能化分尽可能的单一，道理也很简单，功能单一的模块供其它模块调用的机会就少。（其实这是高内聚的一种说法，高内聚低耦合一般同时出现）。</li><li>3、遵循一个定义只在一个地方出现。</li><li>4、少使用全局变量。</li><li>5、类属性和方法的声明少用public，多用private关键字。</li><li>6、多用设计模式，比如采用MVC的设计模式就可以降低界面与业务逻辑的耦合度。</li><li>7、尽量不用“硬编码”的方式写程序，同时也尽量避免直接用SQL语句操作数据库。</li><li>8、最后当然就是避免直接操作或调用其它模块或类（内容耦合）；如果模块间必须存在耦合，原则上尽量使用数据耦合，少用控制耦合，限制公共耦合的范围，避免使用内容耦合。</li></ul></li><li>增强内聚度方法 <ul><li>1、模块只对外暴露最小限度的接口，形成最低的依赖关系。</li><li>2、只要对外接口不变，模块内部的修改，就不得影响其他模块。</li><li>3、删除一个模块，应当只影响有依赖关系的其他模块，而不应该影响其他无关部分。</li></ul></li></ul><h2 id="讲一下对复用的几个层次-代码级-函数级-模块级-服务级的理解-以及在设计过程中的思路和原则" tabindex="-1"><a class="header-anchor" href="#讲一下对复用的几个层次-代码级-函数级-模块级-服务级的理解-以及在设计过程中的思路和原则"><span>讲一下对复用的几个层次，代码级，函数级，模块级，服务级的理解，以及在设计过程中的思路和原则</span></a></h2><h2 id="shiro组件-认证-权限怎么做-与spring-security区别-spring-security认证和鉴权-spring-security-oauth2认证" tabindex="-1"><a class="header-anchor" href="#shiro组件-认证-权限怎么做-与spring-security区别-spring-security认证和鉴权-spring-security-oauth2认证"><span>shiro组件，认证，权限怎么做？与spring security区别？spring Security认证和鉴权？spring Security oauth2认证</span></a></h2><p><code>![SpringSecurity](SpringSecurity.md/#SpringSecurity)</code></p><h2 id="_40亿qq号-1g内存-怎么去重" tabindex="-1"><a class="header-anchor" href="#_40亿qq号-1g内存-怎么去重"><span>40亿QQ号, 1G内存，怎么去重？</span></a></h2><p>每个QQ号占用4字节空间（比如32位整数），40亿x4字节=160亿字节=16GB<br> 1.bitMap进行海量数据去重，40亿个QQ号要40亿个bit。500MB的内存（40亿bit / 8 = 500MB）<br> 假设读到第一个QQ号是12345678，那我们就把位图中的第12345678个位置标记为“1”，表示这个QQ号出现了。重复的号码再次被读取时，它对应的位已经是“1”了，所以我们就知道这个QQ号已经存在，不会重复处理。<br> 适用场景有限，只能用来处理“整数”类的数据，不能处理比如字符串（例如邮箱地址）<br> 存储“稀疏”数据时效率不高<br> 位图最大值限制<br> 数据为整数型，且取值范围明确；<br> 数据量大且分布较为密集；<br> 不能容忍任何误判（需要100%准确性）；<br> 内存空间充足，可以根据数据范围分配足够的位图大小。<br> 2.布隆过滤器进行海量数据去重<br> 数据量非常大（数百万甚至数亿条）；<br> 允许少量误判（假阳性）；<br> 内存有限且需要高效存储；<br> 数据类型多样，可能是字符串、URL等非整数型数据；<br> 数据规模不固定，或者数据分布比较稀疏。</p>',22),a=[s];function n(o,p){return e(),t("div",null,a)}const g=i(r,[["render",n],["__file","systemdesign.html.vue"]]),h=JSON.parse('{"path":"/interview/scenedesign/systemdesign.html","title":"系统设计","lang":"zh-CN","frontmatter":{"title":"系统设计","date":"2023-01-01T00:00:00.000Z","tags":"面试","categories":"面试","description":"软件开发阶段及作用？敏捷开发与devOps？ 可行性分析：评估项目的技术、经济、法律可行性。确定项目是否值得开发，以及潜在的风险和收益 需求分析：与用户或客户沟通，明确软件需要实现的功能和需求。形成需求规格说明书，作为开发的基础 软件设计：包括概要设计（系统架构设计）和详细设计（模块、接口等的具体实现方式）。使用各种设计文档和工具将需求转化为可实现的软...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/scenedesign/systemdesign.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"系统设计"}],["meta",{"property":"og:description","content":"软件开发阶段及作用？敏捷开发与devOps？ 可行性分析：评估项目的技术、经济、法律可行性。确定项目是否值得开发，以及潜在的风险和收益 需求分析：与用户或客户沟通，明确软件需要实现的功能和需求。形成需求规格说明书，作为开发的基础 软件设计：包括概要设计（系统架构设计）和详细设计（模块、接口等的具体实现方式）。使用各种设计文档和工具将需求转化为可实现的软..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMw01be7a81429952c68938102d050d707d.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统设计\\",\\"image\\":[\\"https://b.bdstatic.com/comment/Y_bZHaS27NSYIAE9PqRzMw01be7a81429952c68938102d050d707d.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"软件开发阶段及作用？敏捷开发与devOps？","slug":"软件开发阶段及作用-敏捷开发与devops","link":"#软件开发阶段及作用-敏捷开发与devops","children":[]},{"level":2,"title":"DDD？如何建立领域模型？","slug":"ddd-如何建立领域模型","link":"#ddd-如何建立领域模型","children":[]},{"level":2,"title":"Java处理高并发","slug":"java处理高并发","link":"#java处理高并发","children":[]},{"level":2,"title":"请说出2种减少页面加载时间的方法","slug":"请说出2种减少页面加载时间的方法","link":"#请说出2种减少页面加载时间的方法","children":[]},{"level":2,"title":"英文字母和中文汉字在不同字符集编码下的字节数","slug":"英文字母和中文汉字在不同字符集编码下的字节数","link":"#英文字母和中文汉字在不同字符集编码下的字节数","children":[]},{"level":2,"title":"对\\"高内聚，低耦合\\"方法理解，你在程序设计和架构设计中的经验","slug":"对-高内聚-低耦合-方法理解-你在程序设计和架构设计中的经验","link":"#对-高内聚-低耦合-方法理解-你在程序设计和架构设计中的经验","children":[]},{"level":2,"title":"讲一下对复用的几个层次，代码级，函数级，模块级，服务级的理解，以及在设计过程中的思路和原则","slug":"讲一下对复用的几个层次-代码级-函数级-模块级-服务级的理解-以及在设计过程中的思路和原则","link":"#讲一下对复用的几个层次-代码级-函数级-模块级-服务级的理解-以及在设计过程中的思路和原则","children":[]},{"level":2,"title":"shiro组件，认证，权限怎么做？与spring security区别？spring Security认证和鉴权？spring Security oauth2认证","slug":"shiro组件-认证-权限怎么做-与spring-security区别-spring-security认证和鉴权-spring-security-oauth2认证","link":"#shiro组件-认证-权限怎么做-与spring-security区别-spring-security认证和鉴权-spring-security-oauth2认证","children":[]},{"level":2,"title":"40亿QQ号, 1G内存，怎么去重？","slug":"_40亿qq号-1g内存-怎么去重","link":"#_40亿qq号-1g内存-怎么去重","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":8.9,"words":2671},"filePathRelative":"interview/scenedesign/systemdesign.md","localizedDate":"2023年1月1日","excerpt":"<!-- more -->\\n<h2>软件开发阶段及作用？敏捷开发与devOps？</h2>\\n<p><strong>可行性分析</strong>：评估项目的技术、经济、法律可行性。确定项目是否值得开发，以及潜在的风险和收益<br>\\n<strong>需求分析</strong>：与用户或客户沟通，明确软件需要实现的功能和需求。形成需求规格说明书，作为开发的基础<br>\\n<strong>软件设计</strong>：包括概要设计（系统架构设计）和详细设计（模块、接口等的具体实现方式）。使用各种设计文档和工具将需求转化为可实现的软件方案<br>\\n<strong>程序编码</strong>：根据设计文档编写源代码。遵循编程规范和最佳实践，保证代码的可读性和可维护性。<br>\\n<strong>软件测试</strong>：包括单元测试、集成测试、系统测试和验收测试。发现并修复缺陷，确保软件质量。测试方法有白、黑盒测试</p>","autoDesc":true}');export{g as comp,h as data};
