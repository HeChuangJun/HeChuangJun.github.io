import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as a,e as n}from"./app-7KT7HDzT.js";const l={},t=n(`<p>uml</p><ul><li><a href="#1-umlunified-modeling-language-uml-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80">1. UML——Unified modeling language UML (统一建模语言)</a></li><li><a href="#2-uml%E5%9B%BE%E4%BE%8B">2. UML图例</a></li><li><a href="#3-uml%E5%9B%BE%E5%88%86%E7%B1%BB">3. UML图分类</a></li><li><a href="#4-%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB">4. 依赖关系</a></li></ul><h1 id="_1-uml——unified-modeling-language-uml-统一建模语言" tabindex="-1"><a class="header-anchor" href="#_1-uml——unified-modeling-language-uml-统一建模语言"><span>1. UML——Unified modeling language UML (统一建模语言)</span></a></h1><ul><li>UML是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果</li><li>UML本身是一套符号的规定，用于描述软件模型中的各个元素和他们之间的关系，比如类、接口、实现、泛化、依赖、组合、聚合等</li><li>使用UML来建模，常用的工具有 Rational Rose , 也可以使用一些插件来建模</li><li>用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系。</li><li>类之间的关系：依赖、泛化（继承）、实现、关联、聚合与组合</li></ul><h1 id="_2-uml图例" tabindex="-1"><a class="header-anchor" href="#_2-uml图例"><span>2. UML图例</span></a></h1><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/6195768fe18cf19f843db.png" alt="1.png" tabindex="0"><figcaption>1.png</figcaption></figure><h1 id="_3-uml图分类" tabindex="-1"><a class="header-anchor" href="#_3-uml图分类"><span>3. UML图分类</span></a></h1><ul><li>用例图(use case)</li><li>静态结构图：类图(类图是描述类与类之间的关系的，是UML图中最核心的)、对象图、包图、组件图、部署图</li><li>动态行为图：交互图（时序图与协作图）、状态图、活动图</li></ul><h1 id="_4-依赖关系" tabindex="-1"><a class="header-anchor" href="#_4-依赖关系"><span>4. 依赖关系</span></a></h1><ul><li><p>类图—依赖关系（Dependence） 类中用到了对方\\类的成员属性\\方法的返回类型\\方法接收的参数类型\\方法中使用到</p></li><li><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/7708aae05861181588a42.png" alt="2.png" tabindex="0"><figcaption>2.png</figcaption></figure></li><li><p>类图—泛化关系(generalization) 泛化关系实际上就是继承关系，他是依赖关系的特例 如果A类继承了B类，我们就说A和B存在泛化关系</p></li><li><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/ca768a81e42990feb878d.png" alt="3.png" tabindex="0"><figcaption>3.png</figcaption></figure></li><li><p>类图—实现关系（Implementation） 实现关系实际上就是A类实现B接口，他是依赖关系的特例<br><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/a9fc5d4edbe85d76da51a.png" alt="4.png"></p></li><li><p>类图—关联关系（Association） 类与类之间的联系，他是依赖关系的特例、关联具有导航性：即双向关系或单向关系</p></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    单向一对一关系
    public class Person {
        private IDCard card;
    }
    public class IDCard{}
    
    双向一对一关系
    public class Person {
        private IDCard card;
    }
    public class IDCard{
        private Person person
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/6e369a8ab9c2ba242a992.png" alt="5.png" tabindex="0"><figcaption>5.png</figcaption></figure><ul><li>类图—聚合关系（Aggregation） 表示的是整体和部分的关系，整体与部分可以分开</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    public class Computer {
        private Mouse mouse; //鼠标可以和computer分离
        private Moniter moniter;//显示器可以和Computer分离
        public void setMouse(Mouse mouse) {
            this.mouse = mouse;
        }
        public void setMoniter(Moniter moniter) {
            this.moniter = moniter;
        }
        
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/7a5b0e2215fb163368219.png" alt="6.png" tabindex="0"><figcaption>6.png</figcaption></figure><ul><li>类图—组合关系（Composition） 也是整体与部分的关系，但是整体与部分不可以分开<br><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/22e5d55432836886fc309.png" alt="1.png"></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    public class Person{
    private IDCard card;
    private Head head = new Head();
    }
    public class IDCard{}
    public class Head{}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/cdd20c73318764930990c.png" alt="7.png" tabindex="0"><figcaption>7.png</figcaption></figure>`,18),d=[t];function s(r,g){return i(),a("div",null,d)}const m=e(l,[["render",s],["__file","uml.html.vue"]]),u=JSON.parse('{"path":"/backend/cs/uml.html","title":"UML","lang":"zh-CN","frontmatter":{"title":"UML","date":"2023-01-01T00:00:00.000Z","tags":"设计模式","categories":"理论","description":"uml 1. UML——Unified modeling language UML (统一建模语言) 2. UML图例 3. UML图分类 4. 依赖关系 1. UML——Unified modeling language UML (统一建模语言) UML是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果 UML本身...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/backend/cs/uml.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"UML"}],["meta",{"property":"og:description","content":"uml 1. UML——Unified modeling language UML (统一建模语言) 2. UML图例 3. UML图分类 4. 依赖关系 1. UML——Unified modeling language UML (统一建模语言) UML是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果 UML本身..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://290ff162.telegraph-image-eg9.pages.dev/file/6195768fe18cf19f843db.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-07T01:56:33.000Z"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-07T01:56:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UML\\",\\"image\\":[\\"https://290ff162.telegraph-image-eg9.pages.dev/file/6195768fe18cf19f843db.png\\",\\"https://290ff162.telegraph-image-eg9.pages.dev/file/7708aae05861181588a42.png\\",\\"https://290ff162.telegraph-image-eg9.pages.dev/file/ca768a81e42990feb878d.png\\",\\"https://290ff162.telegraph-image-eg9.pages.dev/file/a9fc5d4edbe85d76da51a.png\\",\\"https://290ff162.telegraph-image-eg9.pages.dev/file/6e369a8ab9c2ba242a992.png\\",\\"https://290ff162.telegraph-image-eg9.pages.dev/file/7a5b0e2215fb163368219.png\\",\\"https://290ff162.telegraph-image-eg9.pages.dev/file/22e5d55432836886fc309.png\\",\\"https://290ff162.telegraph-image-eg9.pages.dev/file/cdd20c73318764930990c.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-07T01:56:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[],"git":{"createdTime":1733536593000,"updatedTime":1733536593000,"contributors":[{"name":"HeChuangJun","email":"1105128664@qq.com","commits":1}]},"readingTime":{"minutes":2.3,"words":689},"filePathRelative":"backend/cs/uml.md","localizedDate":"2023年1月1日","excerpt":"<p>uml</p>\\n<!--more-->\\n<!-- TOC -->\\n<ul>\\n<li><a href=\\"#1-umlunified-modeling-language-uml-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80\\">1. UML——Unified modeling language UML (统一建模语言)</a></li>\\n<li><a href=\\"#2-uml%E5%9B%BE%E4%BE%8B\\">2. UML图例</a></li>\\n<li><a href=\\"#3-uml%E5%9B%BE%E5%88%86%E7%B1%BB\\">3. UML图分类</a></li>\\n<li><a href=\\"#4-%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB\\">4. 依赖关系</a></li>\\n</ul>","autoDesc":true}');export{m as comp,u as data};
