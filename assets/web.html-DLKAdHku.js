import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as r,c as v,a as e,b as t,d as n,e as l}from"./app-7KT7HDzT.js";const o={},u=l('<p>web</p><ul><li><a href="#1-web%E4%B8%89%E5%A4%A7%E8%A7%84%E8%8C%83">1. WEB三大规范</a></li><li><a href="#2-javaxservletservlet-servlet">2. javax.servlet.Servlet servlet</a></li><li><a href="#3-javaxservlethttphttpservlet">3. javax.servlet.http.HttpServlet</a></li><li><a href="#4-javaxservletservletrequest">4. javax.servlet.ServletRequest</a></li><li><a href="#5-javaxservlethttphttpservletrequest">5. javax.servlet.http.HttpServletRequest</a></li><li><a href="#6-javaxservletservletresponse">6. javax.servlet.ServletResponse</a></li><li><a href="#7-javaxservlethttphttpservletresponse">7. javax.servlet.http.HttpServletResponse</a></li><li><a href="#8-javaxservletservletcontext">8. javax.servlet.ServletContext</a></li><li><a href="#9-javaxservletservletconfig">9. javax.servlet.ServletConfig</a></li><li><a href="#10-javaxservlethttpcookie">10. javax.servlet.http.Cookie</a></li><li><a href="#11-javaxservlethttphttpsession">11. javax.servlet.http.HttpSession</a></li><li><a href="#12-javautileventlistener">12. java.util.EventListener</a></li><li><a href="#13-javaxservletservletcontextlistener">13. javax.servlet.ServletContextListener</a></li><li><a href="#14-javaxservlethttphttpsessionlistener">14. javax.servlet.http.HttpSessionListener</a></li><li><a href="#15-javaxservletservletrequestlistener">15. javax.servlet.ServletRequestListener</a></li><li><a href="#16-javaxservletservletcontextattributelistener">16. javax.servlet.ServletContextAttributeListener</a></li><li><a href="#17-javaxservlethttphttpsessionattributelistener">17. javax.servlet.http.HttpSessionAttributeListener</a></li><li><a href="#18-javaxservletservletrequestattributelistener">18. javax.servlet.ServletRequestAttributeListener</a></li><li><a href="#19-javaxservlethttphttpsessionbindinglistener">19. javax.servlet.http.HttpSessionBindingListener</a></li><li><a href="#20-javaxservlethttphttpsessionactivationlistener">20. javax.servlet.http.HttpSessionActivationListener</a></li><li><a href="#21-javaxservletfilter">21. javax.servlet.Filter</a></li><li><a href="#22-webxml%E9%85%8D%E7%BD%AE">22. web.xml配置</a></li><li><a href="#23-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD">23. 文件下载</a></li><li><a href="#24-mail">24. mail</a></li><li><a href="#25-%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB">25. 转发与重定向的区别</a></li><li><a href="#26-javaee%E5%AF%B9%E8%B1%A1%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">26. javaee对象生命周期</a></li></ul><h1 id="_1-web三大规范" tabindex="-1"><a class="header-anchor" href="#_1-web三大规范"><span>1. WEB三大规范</span></a></h1><ul><li>servlet、filter、listener</li><li>request客户端发送的参数 到服务器端都是字符串</li></ul><h1 id="_2-javax-servlet-servlet-servlet" tabindex="-1"><a class="header-anchor" href="#_2-javax-servlet-servlet-servlet"><span>2. javax.servlet.Servlet servlet</span></a></h1><ul><li>用于获取请求数据、处理请求、完成响应</li><li>使用servlet可以实现servlet接口并配置web.xml，但是不推荐</li><li>init(ServletConfig config);//servlet对象创建的时候执行ServletConfig:代表的是该servlet对象的配置信息</li><li>service(ServletRequest request,ServletResponse response);//每次请求都会执行</li><li>destroy();//servlet销毁的时候执行</li></ul><h1 id="_3-javax-servlet-http-httpservlet" tabindex="-1"><a class="header-anchor" href="#_3-javax-servlet-http-httpservlet"><span>3. javax.servlet.http.HttpServlet</span></a></h1><ul><li>使用servlet可以继承HttpServlet并复写HttpServlet类的doGet、doPost方法并配置web.xml</li><li>init();//servlet对象创建的时候执行</li><li>doGet(HttpServletRequest request,HttpServletResponse response);//每次get请求都会执行</li><li>doPost(HttpServletRequest request,HttpServletResponse response);//每次post请求都会执行</li><li>destroy();//servlet销毁的时候执行</li></ul><h1 id="_4-javax-servlet-servletrequest" tabindex="-1"><a class="header-anchor" href="#_4-javax-servlet-servletrequest"><span>4. javax.servlet.ServletRequest</span></a></h1><h1 id="_5-javax-servlet-http-httpservletrequest" tabindex="-1"><a class="header-anchor" href="#_5-javax-servlet-http-httpservletrequest"><span>5. javax.servlet.http.HttpServletRequest</span></a></h1>',10),d=e("li",null,"String getContextPath()获得”/“+web应用名称,例如/WEB15_request",-1),c=e("li",null,"String getMethod()",-1),h=e("li",null,"String getRequestURI()获得相对web应用地址/WEB15_request/line",-1),p={href:"http://localhost:8080/WEB15_request/line",target:"_blank",rel:"noopener noreferrer"},g=l("<li>String getRemoteAddr()获得访问的客户端IP地址</li><li>String getQueryString()get提交url地址后的参数字符串username=lisi&amp;password=123</li><li>String getProtocol();获取请求行中的协议名和版本</li><li>String getServletPath();</li><li>String getRemotePort();</li><li>String getRemoteHost();</li><li>String getLocalAddr();</li><li>String getLocalName();</li><li>String getLocalHost();</li><li>int getLocalPort();</li><li>String getServerName();</li><li>int getServerPort();</li><li>String getScheme();//获取请求协议名</li><li>StringBuffer getRequestURL();</li>",14),m=l("<li>获得请求头 <ul><li>String getHeader（String name）</li><li>Enumeration getHeaders(String name)</li><li>Enumeration getHeaderNames()</li><li>Long getDateHeader(String name)</li><li>int getIntHeader(String name)</li><li>String getContentType()</li><li>int getContentLength()</li><li>String getCharacterEncoding()</li></ul></li><li>获得请求体 <ul><li>String getParameter(String name) 多个只获得一个，没有则返回null</li><li>Map&lt;String,String[]&gt; getParameterMap()获得指定参数名对应的所有键值</li><li>String[] getParameterValues(String name)获得指定参数名对应的所有值（少用）</li><li>Enumeration getParameterNames()</li></ul></li><li>乱码：浏览器的中文用UTF-8编码，而HTTP协议使用iSO8859-1编码。不同的浏览器接收和发送数据取决于浏览器类型，通过Http请求体中的User-Agent属性可以辨别 <ul><li>post乱码 request.setCharacterEncoding(&quot;UTF-8&quot;);</li><li>get乱码 String parameter=new String(parameter.getbytes(&quot;iso8859-1&quot;),&quot;utf-8&quot;);</li></ul></li><li>转发 request.getRequestDispatcher(”/?”).forward(req,resp);</li><li>域对象 <ul><li>Object setAttribute (String name, Object o)set注意名字相同时则覆盖</li><li>String getAttribute(String name)</li><li>void removeAttribute(String name)</li></ul></li>",5),x=e("h1",{id:"_6-javax-servlet-servletresponse",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-javax-servlet-servletresponse"},[e("span",null,"6. javax.servlet.ServletResponse")])],-1),S=e("h1",{id:"_7-javax-servlet-http-httpservletresponse",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_7-javax-servlet-http-httpservletresponse"},[e("span",null,"7. javax.servlet.http.HttpServletResponse")])],-1),b=e("li",null,[t("设置响应行 "),e("ul",null,[e("li",null,"void setStatus(int sc)"),e("li",null,"void sendError(int sc,[String messge])")])],-1),j=e("li",null,[t("设置响应头(值不重复) "),e("ul",null,[e("li",null,"void addHeader(String name, String value)"),e("li",null,"void setHeader(String name, String value);")])],-1),f={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},E=e("ul",null,[e("li",null,"void addIntHeader(String name, int value)"),e("li",null,"void setIntHeader(String name, int value)"),e("li",null,"void addDateHeader(String name, long date)"),e("li",null,"void setDateHeader(String name, long date)"),e("li",null,"void setContentLength(int len)"),e("li",null,"void setContentType(String type)"),e("li",null,"void setLocale(Locale loc)"),e("li",null,"void setCharacterEncoding(String charset)")],-1),q=e("li",null,[t("设置响应体 "),e("ul",null,[e("li",null,'getWriter().write("")字符串，可以插入标签'),e("li",null,"getOutputStream().write(byte[] bytes) 因为getWriter()之前已调用getOutputStream(),故两者不能同时使用"),e("li",null,'setHeader("content-Type","text/html;charset=utf-8");中文乱码'),e("li",null,'sendRedirect("/WEB14/servlet2");重定向'),e("li",null,'setStatus(302);setHeader("Location", "/WEB14/servlet2");')])],-1),_=l(`<h1 id="_8-javax-servlet-servletcontext" tabindex="-1"><a class="header-anchor" href="#_8-javax-servlet-servletcontext"><span>8. javax.servlet.ServletContext</span></a></h1><ul><li>获得ServletContext <ul><li>ServletConfig.getServletContext();</li><li>this.getServletContext();（推荐）</li></ul></li><li>获得web.xml全局的初始化参数 getInitParameter(String name);</li><li>域对象(整个web应用) <ul><li>void setAtrribute(String name,Object obj);</li><li>Object getAttribute(String name);</li><li>void removeAttribute(String name);</li></ul></li><li>WebContext目录内任何资源绝对路径 <ul><li>String getRealPath(String path);//:/WEB-INF/</li><li>InputStream getResourceAsStream(String path); 以/开头path相对WebContext目录InputStream</li></ul></li></ul><h1 id="_9-javax-servlet-servletconfig" tabindex="-1"><a class="header-anchor" href="#_9-javax-servlet-servletconfig"><span>9. javax.servlet.ServletConfig</span></a></h1><ul><li>获得该servlet在web.xml上的name String getServletName();</li><li>获得该servlet的初始化的参数 <ul><li>String getInitParameter(String name);</li><li>Enumeration getInitParameterNames();</li></ul></li><li>获得Servletcontext对象 ServletContext getServletContext();</li></ul><h1 id="_10-javax-servlet-http-cookie" tabindex="-1"><a class="header-anchor" href="#_10-javax-servlet-http-cookie"><span>10. javax.servlet.http.Cookie</span></a></h1><ul><li>cookie会以响应头的形式发送给客户端：set-cookie:”name=zhengsan”</li><li>cookie不能存储中文、它是浏览器缓存的一部分。</li><li>cookie数据存储在客户端本地，减少服务器端的存储的压力，安全性不好，客户端可以清除cookie,有大小和个数的限制</li><li>会话级别cookie：不设置cookie会存储在浏览器的内存中，随浏览器关闭销毁</li><li>持久级别cookie：设置cookie信息会被持久化到浏览器的磁盘文件里，过期浏览器自动删除</li><li>创建CookieCookie cookie = new Cookie(name,value)</li><li>持久化时间cookie.setMaxAge(秒);</li><li>请求时cookie被携带路径 <ul><li>cookie.setPath();不设置，cookie信息会在访问产生该cookie的web资源所在的路径都携带cookie信息，会覆盖</li><li>cookie.setPath(&quot;/WEB&quot;);访问WEB应用中的任何资源都携带cookie</li><li>cookie.setPath(&quot;/WEB/cookieServlet&quot;);访问WEB16中的cookieServlet时才携带cookie信息</li><li>cookie.setPath(&quot;/&quot;);代表访问tomcat下所有的web项目的cookie信息</li></ul></li><li>向客户端发送cookie response.addCookie(Cookie cookie);//如果路径和名称一样，两次add会覆盖</li><li>获得客户端的cookie Cookie[] cookies = request.getCookies();</li><li>获得cookie的键值 cookie.getName();cookie.getValue();</li><li>删除cookie <ul><li>Cookie cookie = new Cookie(&quot;name&quot;,&quot;&quot;);//将cookie的name设置与删除的cookie一致</li><li>cookie.setPath(&quot;/WEB16&quot;);//将path设置成与要删除cookie的path一致</li><li>cookie.setMaxAge(0);//设置时间是0;</li><li>response.addCookie(cookie);</li></ul></li></ul><h1 id="_11-javax-servlet-http-httpsession" tabindex="-1"><a class="header-anchor" href="#_11-javax-servlet-http-httpsession"><span>11. javax.servlet.http.HttpSession</span></a></h1><ul><li>session将数据存储到服务器端，安全性相对好，增加服务器的压力，没有大小和个数限制</li><li>session会为每个客户端都创建一块内存空间存储客户的数据,但客户端需要每次都携带一个标识ID去服务器中寻找属于自己的内存空间。</li><li>所以说Session的实现是基于Cookie，Session需要借助于Cookie存储客户的唯一性标识JSESSIONID来辨别是哪个客户端</li><li>获得Session request.getSession([boolean create])</li><li>获得sessionid String getId()</li><li>设置session空闲时间 void setMaxInactiveInterval(int interval)</li><li>获得servletcontext ServletContext getServletContext()</li><li>session域 <ul><li>void setAttribute(String name,Object obj);</li><li>Object getAttribute(String name);</li><li>void removeAttribute(String name);</li></ul></li><li>销毁session void invalidate();</li></ul><h1 id="_12-java-util-eventlistener" tabindex="-1"><a class="header-anchor" href="#_12-java-util-eventlistener"><span>12. java.util.EventListener</span></a></h1><h1 id="_13-javax-servlet-servletcontextlistener" tabindex="-1"><a class="header-anchor" href="#_13-javax-servlet-servletcontextlistener"><span>13. javax.servlet.ServletContextListener</span></a></h1><ul><li>contextInitialized(ServlertContextEvent sre)</li><li>contextDestroyed(ServlertContextEvent sre)</li><li>ServletContext context = ServlertContextEvent.getServletContext(); <ul><li>①初始化：对象、数据、加载数据库驱动，连接池的初始化</li><li>②加载一些初始化的配置文件 --- spring的配置文件</li><li>③任务调度----定时器----Timer/TimerTask</li><li>需要web.xml注册</li></ul></li></ul><h1 id="_14-javax-servlet-http-httpsessionlistener" tabindex="-1"><a class="header-anchor" href="#_14-javax-servlet-http-httpsessionlistener"><span>14. javax.servlet.http.HttpSessionListener</span></a></h1><ul><li>sessionCreated(HttpSessionEvent se);</li><li>sessionDestroyed(HttpSessionEvent se);<br></li><li>Session session = HttpSessionEvent.getSession();</li><li>需要web.xml注册</li></ul><h1 id="_15-javax-servlet-servletrequestlistener" tabindex="-1"><a class="header-anchor" href="#_15-javax-servlet-servletrequestlistener"><span>15. javax.servlet.ServletRequestListener</span></a></h1><ul><li>requestInitialized(ServlertRequestEvent sre);</li><li>requestDestroyed(ServlertRequestEvent sre);</li><li>ServletContext context = ServlertRequestEvent.getServletContext();</li><li>ServlertReque request = ServlertRequestEvent.getServletRequest();</li><li>需要web.xml注册</li></ul><h1 id="_16-javax-servlet-servletcontextattributelistener" tabindex="-1"><a class="header-anchor" href="#_16-javax-servlet-servletcontextattributelistener"><span>16. javax.servlet.ServletContextAttributeListener</span></a></h1><ul><li>attributeAdded(ServletContextAttributeEvent event);</li><li>attributeRemoved(ServletContextAttributeEvent event);</li><li>attributeReplaced(ServletContextAttributeEvent event);</li><li>String name = ServletContextAttributeEvent.getName()</li><li>String value = ServletContextAttributeEvent.getValue()</li><li>SevletContext context = ServletContextAttributeEvent.getSevletContext()</li><li>需要web.xml注册</li></ul><h1 id="_17-javax-servlet-http-httpsessionattributelistener" tabindex="-1"><a class="header-anchor" href="#_17-javax-servlet-http-httpsessionattributelistener"><span>17. javax.servlet.http.HttpSessionAttributeListener</span></a></h1><ul><li>attributeAdded(HttpSessionBindingEvent event);</li><li>attributeRemoved(HttpSessionBindingEvent event);</li><li>attributeReplaced(HttpSessionBindingEvent event);</li><li>String name = HttpSessionBindingEvent.getName()</li><li>String value = HttpSessionBindingEvent.getValue()</li><li>Session session = HttpSessionBindingEvent.getSession()</li><li>需要web.xml注册</li></ul><h1 id="_18-javax-servlet-servletrequestattributelistener" tabindex="-1"><a class="header-anchor" href="#_18-javax-servlet-servletrequestattributelistener"><span>18. javax.servlet.ServletRequestAttributeListener</span></a></h1><ul><li>attributeAdded(ServletRequestAttributEvent srae);</li><li>attributeRemoved(ServletRequestAttributEvent srae);</li><li>attributeReplaced(ServletRequestAttributEvent srae);</li><li>String name = ServletRequestAttributEvent.getName()</li><li>String value = ServletRequestAttributEvent.getValue()</li><li>SevletContext context = ServletRequestAttributEvent.getSevletContext()</li><li>ServletRequest request = ServletRequestAttributEvent.getServletRequest()</li><li>需要web.xml注册</li></ul><h1 id="_19-javax-servlet-http-httpsessionbindinglistener" tabindex="-1"><a class="header-anchor" href="#_19-javax-servlet-http-httpsessionbindinglistener"><span>19. javax.servlet.http.HttpSessionBindingListener</span></a></h1><ul><li>javaBean实现HttpSessionBindingListener接口,不需web.xml配置</li><li>valueBound(HttpSessionBindingEvent event)绑定:对象被放到session域</li><li>valueUnbound(HttpSessionBindingEvent event)解绑:对象从session域中移除</li><li>String name = HttpSessionBindingEvent.getName()</li><li>String value = HttpSessionBindingEvent.getValue()</li><li>Session session = HttpSessionBindingEvent.getSession()</li></ul><h1 id="_20-javax-servlet-http-httpsessionactivationlistener" tabindex="-1"><a class="header-anchor" href="#_20-javax-servlet-http-httpsessionactivationlistener"><span>20. javax.servlet.http.HttpSessionActivationListener</span></a></h1><ul><li>javaBean实现HttpSessionActivationListener接口,在META-INF创建context.xml文件,不需web.xml配置</li><li>Session钝化：当服务器正常关闭时,还存活着的session(在设置时间内没有销毁) 会随着服务器的关闭被以文件(“SESSIONS.ser”)的形式存储在tomcat的work目录下</li><li>Session活化：当服务器再次正常开启时,服务器会找到之前的“SESSIONS.ser” 文件，从中恢复之前保存起来的Session 对象</li><li>sessionWillPassivate(HttpSessionEvent se); session钝化前执行（session从内存到硬盘）</li><li>sessionDidActivate(HttpSessionEvent se); session活化后执行（session从硬盘到内存）</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;Context&gt;
    &lt;Manager className=&quot;org.apache.catalina.session.PersistentManager&quot; maxIdleSwap=&quot;1&quot;&gt;钝化时间
        &lt;Store className=&quot;org.apache.catalina.session.FileStore&quot; directory=&quot;test&quot; /&gt;
        配置钝化的对象文件在%tomcat%/work/catalina/localhost/项目名称/钝化文件名.ser(test)
    &lt;/Manager&gt;
&lt;/Context&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_21-javax-servlet-filter" tabindex="-1"><a class="header-anchor" href="#_21-javax-servlet-filter"><span>21. javax.servlet.Filter</span></a></h1><ul><li>filter是对客户端访问资源的过滤，符合条件放行，不符合条件不放行，并且可以对目标资源访问前后进行逻辑处理，运行在服务器端的程序，先于与之相关的Servlet或jsp前运行，对请求资源过滤的功能,可以处理请求和响应 <ul><li>公共代码的提取</li><li>对request和response中的方法进行增强(装饰者模式/动态代理)</li><li>进行权限控制</li><li>自动登录，解决全局乱码，屏蔽非法文字，响应数据压缩</li></ul></li><li>实现Filter接口并实现所有方法,配置web.xml <ul><li>init(Filterconfig filterconfig);过滤器初始化方法</li><li>doFilter(ServletRequest,SevletResponse,FilterChain)每次访问这个资源都会执行该方法</li><li>destory()：销毁方法 关闭服务器时</li></ul></li><li>Filterconfig方法 <ul><li>getFilterName返回 <code>&lt;filter-name&gt;</code> 元素的设置值</li><li>getServletContext返回ServletContext对象的引用</li><li>getInitParameter返回在web.xml中Filter初始化的参数值</li><li>getInitParameterNames返回一个 Enumeration 集合对象</li></ul></li><li>FilterChain方法 <ul><li>放行请求chain.doFilter(request, response);</li></ul></li></ul><h1 id="_22-web-xml配置" tabindex="-1"><a class="header-anchor" href="#_22-web-xml配置"><span>22. web.xml配置</span></a></h1><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;servlet&gt;
    &lt;servlet-name&gt;QuickStartServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;xxx.xxx&lt;/servlet-class&gt;
    &lt;load-on-startup&gt;3&lt;/load-on-startup&gt;启动先后 正整数，越小被创建的优先级越高
    &lt;init-param&gt;
        &lt;param-name&gt;url&lt;/param-name&gt;servlet的初始化参数
        &lt;param-value&gt;xxx&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;QuickStartServlet&lt;/servlet-name&gt;
    完全匹配:访问的资源与配置的资源完全相同&lt;url-pattern&gt;/LoginServlet&lt;/url-pattern&gt;
    目录匹配:./当前路径 ../上一级 格式：/虚拟的目录../\\* \\*代表任意&lt;url-pattern&gt;/LoginServlet/\\*&lt;/url-pattern&gt;
    扩展名匹配:\\*.扩展名 &lt;url-pattern&gt;\\*.jsp&lt;/url-pattern&gt;
    （默认）缺省Servlet：将url-pattern配置一个/，代表该servlet是缺省的servlet(默认访问的路径)
    客户端地址添加web应用的名称，重定向,而服务器端的地址不需添加web应用的名称 转发
    &lt;url-pattern&gt;/quickStartServlet&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
主页设置
&lt;welcome-file-list&gt;
    &lt;welcome-file&gt;login.html&lt;/welcome-file&gt;
&lt;/welcome-file-list&gt;
serveletcofig和servletContext的初始化参数
&lt;context-param&gt;
    &lt;param-name&gt;driver&lt;/param-name&gt;
    &lt;param-value&gt;com.mysql.jdbc.Driver&lt;/param-value&gt;
&lt;/context-param&gt;
    session时间
&lt;session-config&gt;
    &lt;session-timeout&gt;30&lt;/session-timeout&gt;
&lt;/session-config&gt;
&lt;filter&gt;
    &lt;filter-name&gt;EncodingFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;com.ithiema.web.filter.EncodingFilter&lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;EncodingFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
注意：url-pattern可以使用servlet-name替代，也可以混用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_23-文件下载" tabindex="-1"><a class="header-anchor" href="#_23-文件下载"><span>23. 文件下载</span></a></h1><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>前端配置
&lt;a href=&quot;/WEB14/downloadServlet?filename=a.flv&quot;&gt;a.flv&lt;/a&gt;
服务器端
//1.接收参数
String filename = request.getParameter(&quot;filename&quot;);//a.flv
\\[filename = new String(filename.getBytes(&quot;ISO8859-1&quot;),&quot;UTF-8&quot;);//美女.jpg\\]
//2.要下载的这个文件的类型-----客户端通过文件的MIME类型去区分类型
response.setContentType(this.getServletContext().getMimeType(filename));
//3.获取文件的绝对路径&lt;br&gt;
String path = this.getServletContext().getRealPath(&quot;/download/&quot;+filename);

\\[//获得请求头中的User-Agent
String agent = request.getHeader(&quot;User-Agent&quot;);
//根据不同浏览器进行不同的编码
String filenameEncoder = &quot;&quot;;
if (agent.contains(&quot;MSIE&quot;)) {
// IE浏览器
    filename = URLEncoder.encode(filename, &quot;utf-8&quot;);
    filename = filename.replace(&quot;+&quot;, &quot; &quot;);
} else if (agent.contains(&quot;Firefox&quot;)) {
// 火狐浏览器
    BASE64Encoder base64Encoder = new BASE64Encoder();
    filename = &quot;=?utf-8?B?&quot; + base64Encoder.encode(filename.getBytes(&quot;utf-8&quot;)) + &quot;?=&quot;;
} else {
// 其它浏览器
    filename = URLEncoder.encode(filename, &quot;utf-8&quot;);
}
其中agent就是请求头User-Agent的值\\]
//4.告诉客户端该文件不是直接解析 而是以附件形式打开(下载)
response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot;+filename);
//5.获得该文件的输入流
InputStream in = new FileInputStream(path);
//6.获得输出流---通过response获得的输出流 用于向客户端写内容
ServletOutputStream out = response.getOutputStream();
int len = 0;
byte[] buffer = new byte[1024];
while((len=in.read(buffer))&gt;0){
    out.write(buffer, 0, len);
}
in.close();
//out.close();
中文文件乱码：不同的浏览器默认对下载文件的编码方式不同，
ie是UTF-8编码方式，而火狐浏览器是Base64编码方式。
解决浏览器兼容性问题的首要任务是要辨别访问者是ie还是火狐（其他），
通过Http请求体中的User-Agent属性可以辨别
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_24-mail" tabindex="-1"><a class="header-anchor" href="#_24-mail"><span>24. mail</span></a></h1><ul><li>邮件的客户端：可以只安装在电脑上的也可以是网页形式的</li><li>邮件服务器：起到邮件的接受与推送的作用</li><li>接受邮件的协议POP3邮局协议:邮件客户端软件与POP3服务器通讯规则 IMAP 端口号110</li><li>发送邮件的协议SMTP邮件协议:邮件客户端软件与SMTP服务及两台SMTP服务器之间的通讯规则，端口号25</li></ul><h1 id="_25-转发与重定向的区别" tabindex="-1"><a class="header-anchor" href="#_25-转发与重定向的区别"><span>25. 转发与重定向的区别</span></a></h1><ul><li>重定向:可以访问外部网站 地址变化 两次请求 路径加工程名 性能较好</li><li>转发:只能访问内部资源 地址不变 一次请求 路径不加工程名 性能较弱</li></ul><h1 id="_26-javaee对象生命周期" tabindex="-1"><a class="header-anchor" href="#_26-javaee对象生命周期"><span>26. javaee对象生命周期</span></a></h1><ul><li>servlet:(多个)、init第一次访问servlet创建、service每次请求都会执行、destory服务器关闭、项目被移除</li><li>request:(多个)、访问sevlet时创建、销毁：响应结束、域的作用范围:一次请求中</li><li>ServletContext:(一个)、web应用被加载、web应用被卸载、域的作用范围:整个web应用</li><li>session:(多个)，第一次执行getsession获得session、没有则创建、非正常关闭服务器（正常关闭session被序列化） <ul><li>session过期，默认时间30分钟，调用invalidate方法，域的作用范围:一次会话中</li></ul></li><li>filer:(多个)服务器启动、服务器关闭、每次访问被拦截目标资源，过滤器doFilter方法执行</li></ul>`,38);function C(A,w){const i=s("ExternalLinkIcon");return r(),v("div",null,[u,e("ul",null,[e("li",null,[t("获得请求行 "),e("ul",null,[d,c,h,e("li",null,[t("String getRequestURL()获得绝对路径"),e("a",p,[t("http://localhost:8080/WEB15_request/line"),n(i)])]),g])]),m]),x,S,e("ul",null,[b,j,e("li",null,[t('设置定时刷新的头:setHeader("refresh", "5;url='),e("a",f,[t("http://www.baidu.com"),n(i)]),t('"); '),E]),q]),_])}const k=a(o,[["render",C],["__file","web.html.vue"]]),R=JSON.parse('{"path":"/backend/j2ee/web.html","title":"web","lang":"zh-CN","frontmatter":{"title":"web","date":"2023-01-01T00:00:00.000Z","tags":"web","categories":"后端","description":"web 1. WEB三大规范 2. javax.servlet.Servlet servlet 3. javax.servlet.http.HttpServlet 4. javax.servlet.ServletRequest 5. javax.servlet.http.HttpServletRequest 6. javax.servlet.Servl...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/backend/j2ee/web.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"web"}],["meta",{"property":"og:description","content":"web 1. WEB三大规范 2. javax.servlet.Servlet servlet 3. javax.servlet.http.HttpServlet 4. javax.servlet.ServletRequest 5. javax.servlet.http.HttpServletRequest 6. javax.servlet.Servl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-07T01:56:33.000Z"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-07T01:56:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"web\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-07T01:56:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[],"git":{"createdTime":1733536593000,"updatedTime":1733536593000,"contributors":[{"name":"HeChuangJun","email":"1105128664@qq.com","commits":1}]},"readingTime":{"minutes":10.66,"words":3199},"filePathRelative":"backend/j2ee/web.md","localizedDate":"2023年1月1日","excerpt":"<p>web</p>\\n<!--more-->\\n<!-- TOC -->\\n<ul>\\n<li><a href=\\"#1-web%E4%B8%89%E5%A4%A7%E8%A7%84%E8%8C%83\\">1. WEB三大规范</a></li>\\n<li><a href=\\"#2-javaxservletservlet-servlet\\">2. javax.servlet.Servlet servlet</a></li>\\n<li><a href=\\"#3-javaxservlethttphttpservlet\\">3. javax.servlet.http.HttpServlet</a></li>\\n<li><a href=\\"#4-javaxservletservletrequest\\">4. javax.servlet.ServletRequest</a></li>\\n<li><a href=\\"#5-javaxservlethttphttpservletrequest\\">5. javax.servlet.http.HttpServletRequest</a></li>\\n<li><a href=\\"#6-javaxservletservletresponse\\">6. javax.servlet.ServletResponse</a></li>\\n<li><a href=\\"#7-javaxservlethttphttpservletresponse\\">7. javax.servlet.http.HttpServletResponse</a></li>\\n<li><a href=\\"#8-javaxservletservletcontext\\">8. javax.servlet.ServletContext</a></li>\\n<li><a href=\\"#9-javaxservletservletconfig\\">9. javax.servlet.ServletConfig</a></li>\\n<li><a href=\\"#10-javaxservlethttpcookie\\">10. javax.servlet.http.Cookie</a></li>\\n<li><a href=\\"#11-javaxservlethttphttpsession\\">11. javax.servlet.http.HttpSession</a></li>\\n<li><a href=\\"#12-javautileventlistener\\">12. java.util.EventListener</a></li>\\n<li><a href=\\"#13-javaxservletservletcontextlistener\\">13. javax.servlet.ServletContextListener</a></li>\\n<li><a href=\\"#14-javaxservlethttphttpsessionlistener\\">14. javax.servlet.http.HttpSessionListener</a></li>\\n<li><a href=\\"#15-javaxservletservletrequestlistener\\">15. javax.servlet.ServletRequestListener</a></li>\\n<li><a href=\\"#16-javaxservletservletcontextattributelistener\\">16. javax.servlet.ServletContextAttributeListener</a></li>\\n<li><a href=\\"#17-javaxservlethttphttpsessionattributelistener\\">17. javax.servlet.http.HttpSessionAttributeListener</a></li>\\n<li><a href=\\"#18-javaxservletservletrequestattributelistener\\">18. javax.servlet.ServletRequestAttributeListener</a></li>\\n<li><a href=\\"#19-javaxservlethttphttpsessionbindinglistener\\">19. javax.servlet.http.HttpSessionBindingListener</a></li>\\n<li><a href=\\"#20-javaxservlethttphttpsessionactivationlistener\\">20. javax.servlet.http.HttpSessionActivationListener</a></li>\\n<li><a href=\\"#21-javaxservletfilter\\">21. javax.servlet.Filter</a></li>\\n<li><a href=\\"#22-webxml%E9%85%8D%E7%BD%AE\\">22. web.xml配置</a></li>\\n<li><a href=\\"#23-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\\">23. 文件下载</a></li>\\n<li><a href=\\"#24-mail\\">24. mail</a></li>\\n<li><a href=\\"#25-%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB\\">25. 转发与重定向的区别</a></li>\\n<li><a href=\\"#26-javaee%E5%AF%B9%E8%B1%A1%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\\">26. javaee对象生命周期</a></li>\\n</ul>","autoDesc":true}');export{k as comp,R as data};
