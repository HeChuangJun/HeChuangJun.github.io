import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,e as n}from"./app-7KT7HDzT.js";const l={},a=n(`<h1 id="分治算法" tabindex="-1"><a class="header-anchor" href="#分治算法"><span>分治算法</span></a></h1><ul><li>分治法就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)……</li><li>分治算法可以求解的一些经典问题:二分搜索\\大整数乘法\\棋盘覆盖\\合并排序\\快速排序\\线性时间选择\\最接近点对问题\\循环赛日程表\\汉诺塔</li><li>分治算法的基本步骤,分治法在每一层递归上都有三个步骤： <ul><li>分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题</li><li>解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</li><li>合并：将各个子问题的解合并为原问题的解。</li></ul></li></ul><h2 id="汉诺塔" tabindex="-1"><a class="header-anchor" href="#汉诺塔"><span>汉诺塔</span></a></h2><ul><li>汉诺塔问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class Hanoitower {

	public static void main(String[] args) {
		hanoiTower(10, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;);
	}
	public static void hanoiTower(int num, char a, char b, char c) {
		//如果是有一个盘， A-&gt;C 
		if(num == 1) {
			System.out.println(&quot;第1个盘从 &quot; + a + &quot;-&gt;&quot; + c);
		} else {
			//盘数 n &gt;= 2 情况，可以看做是两个盘 1.最下边的盘 2. 上面的盘
			//1. 先把 最上面的所有盘 A-&gt;B， 移动过程会使用到 c
			hanoiTower(num - 1, a, c, b);
			//2. 把最下边的盘 A-&gt;C
			System.out.println(&quot;第&quot; + num + &quot;个盘从 &quot; + a + &quot;-&gt;&quot; + c);
			//3. 把B塔的所有盘 从 B-&gt;C , 移动过程使用到 a塔  
			hanoiTower(num - 1, b, a, c);
		}
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),r=[a];function d(c,s){return t(),i("div",null,r)}const m=e(l,[["render",d],["__file","divideandconquer.html.vue"]]),v=JSON.parse('{"path":"/interview/algorithm/divideandconquer.html","title":"分治算法","lang":"zh-CN","frontmatter":{"title":"分治算法","icon":"circle-info","date":"2023-01-01T00:00:00.000Z","tags":"分治算法","categories":"面试","description":"分治算法 分治法就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)…… 分治算法可以求解的一些经典问题:二分搜索\\\\大整数乘法\\\\棋盘覆盖\\\\合并排序\\\\快速排序\\\\线性时...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/algorithm/divideandconquer.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"分治算法"}],["meta",{"property":"og:description","content":"分治算法 分治法就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)…… 分治算法可以求解的一些经典问题:二分搜索\\\\大整数乘法\\\\棋盘覆盖\\\\合并排序\\\\快速排序\\\\线性时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分治算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"汉诺塔","slug":"汉诺塔","link":"#汉诺塔","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.93,"words":578},"filePathRelative":"interview/algorithm/divideandconquer.md","localizedDate":"2023年1月1日","excerpt":"\\n<ul>\\n<li>分治法就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)……</li>\\n<li>分治算法可以求解的一些经典问题:二分搜索\\\\大整数乘法\\\\棋盘覆盖\\\\合并排序\\\\快速排序\\\\线性时间选择\\\\最接近点对问题\\\\循环赛日程表\\\\汉诺塔</li>\\n<li>分治算法的基本步骤,分治法在每一层递归上都有三个步骤：\\n<ul>\\n<li>分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题</li>\\n<li>解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</li>\\n<li>合并：将各个子问题的解合并为原问题的解。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{m as comp,v as data};
