import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as l,e as n}from"./app-7KT7HDzT.js";const i={},t=n('<h1 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h1><h2 id="什么是jvm" tabindex="-1"><a class="header-anchor" href="#什么是jvm"><span>什么是JVM？</span></a></h2><h2 id="jvm主要组成部分及其作用" tabindex="-1"><a class="header-anchor" href="#jvm主要组成部分及其作用"><span>JVM主要组成部分及其作用？</span></a></h2><h2 id="运行时数据区域的组成及其作用" tabindex="-1"><a class="header-anchor" href="#运行时数据区域的组成及其作用"><span>运行时数据区域的组成及其作用</span></a></h2><h2 id="堆和栈区别" tabindex="-1"><a class="header-anchor" href="#堆和栈区别"><span>堆和栈区别？</span></a></h2><h2 id="jdk678内存区域的变化" tabindex="-1"><a class="header-anchor" href="#jdk678内存区域的变化"><span>JDK678内存区域的变化？</span></a></h2><h2 id="java普通对象-不包括数组和class对象等-创建、销毁过程" tabindex="-1"><a class="header-anchor" href="#java普通对象-不包括数组和class对象等-创建、销毁过程"><span>java普通对象（不包括数组和Class对象等）创建、销毁过程？</span></a></h2><h2 id="java内存分配的方法-怎么保证线程安全" tabindex="-1"><a class="header-anchor" href="#java内存分配的方法-怎么保证线程安全"><span>java内存分配的方法，怎么保证线程安全？</span></a></h2><h2 id="对象在内存中的存储布局" tabindex="-1"><a class="header-anchor" href="#对象在内存中的存储布局"><span>对象在内存中的存储布局</span></a></h2><h2 id="一个java对象、对象引用占用多大内存" tabindex="-1"><a class="header-anchor" href="#一个java对象、对象引用占用多大内存"><span>一个java对象、对象引用占用多大内存？</span></a></h2><h2 id="对象访问定位" tabindex="-1"><a class="header-anchor" href="#对象访问定位"><span>对象访问定位？</span></a></h2><h2 id="内存溢出和内存泄漏概念、举例、解决方案" tabindex="-1"><a class="header-anchor" href="#内存溢出和内存泄漏概念、举例、解决方案"><span>内存溢出和内存泄漏概念、举例、解决方案？</span></a></h2><h2 id="jvm垃圾回收机制及垃圾判断算法" tabindex="-1"><a class="header-anchor" href="#jvm垃圾回收机制及垃圾判断算法"><span>jvm垃圾回收机制及垃圾判断算法</span></a></h2><h2 id="强软弱虚引用-为什么这么设计" tabindex="-1"><a class="header-anchor" href="#强软弱虚引用-为什么这么设计"><span>强软弱虚引用？为什么这么设计？</span></a></h2><h2 id="被标记为垃圾的对象一定会被回收吗-finalize-方法作用" tabindex="-1"><a class="header-anchor" href="#被标记为垃圾的对象一定会被回收吗-finalize-方法作用"><span>被标记为垃圾的对象一定会被回收吗？finalize()方法作用？</span></a></h2><h2 id="java-堆的内存分区" tabindex="-1"><a class="header-anchor" href="#java-堆的内存分区"><span>Java 堆的内存分区</span></a></h2><h2 id="常用的垃圾回收算法-jvm中的垃圾回收了解吗-为什么新生代不用标记整理-√" tabindex="-1"><a class="header-anchor" href="#常用的垃圾回收算法-jvm中的垃圾回收了解吗-为什么新生代不用标记整理-√"><span>常用的垃圾回收算法，JVM中的垃圾回收了解吗？为什么新生代不用标记整理？√</span></a></h2><h2 id="minor-young-gc、major-old-gc、mixed-gc、full-gc概念、触发条件" tabindex="-1"><a class="header-anchor" href="#minor-young-gc、major-old-gc、mixed-gc、full-gc概念、触发条件"><span>Minor/Young GC、Major/Old GC、Mixed GC、Full GC概念、触发条件？</span></a></h2><h2 id="对象什么时候会进入老年代" tabindex="-1"><a class="header-anchor" href="#对象什么时候会进入老年代"><span>对象什么时候会进入老年代？</span></a></h2><h2 id="分代收集算法-generational-collection" tabindex="-1"><a class="header-anchor" href="#分代收集算法-generational-collection"><span>分代收集算法(Generational Collection)</span></a></h2><h2 id="jvm垃圾回收器有哪些-作用是什么" tabindex="-1"><a class="header-anchor" href="#jvm垃圾回收器有哪些-作用是什么"><span>jvm垃圾回收器有哪些？作用是什么？</span></a></h2><h2 id="对象逃逸分析技术" tabindex="-1"><a class="header-anchor" href="#对象逃逸分析技术"><span>对象逃逸分析技术</span></a></h2><h2 id="类加载器分类-是如何加载class文件-类的生命周期" tabindex="-1"><a class="header-anchor" href="#类加载器分类-是如何加载class文件-类的生命周期"><span>类加载器分类？是如何加载Class文件？类的生命周期？</span></a></h2><h2 id="tomcat-的类加载机制了解吗" tabindex="-1"><a class="header-anchor" href="#tomcat-的类加载机制了解吗"><span>Tomcat 的类加载机制了解吗？</span></a></h2>',24),h=[t];function s(r,c){return e(),l("div",null,h)}const v=a(i,[["render",s],["__file","javavirtualmachinemap.html.vue"]]),p=JSON.parse('{"path":"/interview/java/javavirtualmachine/javavirtualmachinemap.html","title":"JVM","lang":"zh-CN","frontmatter":{"description":"JVM 什么是JVM？ JVM主要组成部分及其作用？ 运行时数据区域的组成及其作用 堆和栈区别？ JDK678内存区域的变化？ java普通对象（不包括数组和Class对象等）创建、销毁过程？ java内存分配的方法，怎么保证线程安全？ 对象在内存中的存储布局 一个java对象、对象引用占用多大内存？ 对象访问定位？ 内存溢出和内存泄漏概念、举例、解决...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/java/javavirtualmachine/javavirtualmachinemap.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"JVM"}],["meta",{"property":"og:description","content":"JVM 什么是JVM？ JVM主要组成部分及其作用？ 运行时数据区域的组成及其作用 堆和栈区别？ JDK678内存区域的变化？ java普通对象（不包括数组和Class对象等）创建、销毁过程？ java内存分配的方法，怎么保证线程安全？ 对象在内存中的存储布局 一个java对象、对象引用占用多大内存？ 对象访问定位？ 内存溢出和内存泄漏概念、举例、解决..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"什么是JVM？","slug":"什么是jvm","link":"#什么是jvm","children":[]},{"level":2,"title":"JVM主要组成部分及其作用？","slug":"jvm主要组成部分及其作用","link":"#jvm主要组成部分及其作用","children":[]},{"level":2,"title":"运行时数据区域的组成及其作用","slug":"运行时数据区域的组成及其作用","link":"#运行时数据区域的组成及其作用","children":[]},{"level":2,"title":"堆和栈区别？","slug":"堆和栈区别","link":"#堆和栈区别","children":[]},{"level":2,"title":"JDK678内存区域的变化？","slug":"jdk678内存区域的变化","link":"#jdk678内存区域的变化","children":[]},{"level":2,"title":"java普通对象（不包括数组和Class对象等）创建、销毁过程？","slug":"java普通对象-不包括数组和class对象等-创建、销毁过程","link":"#java普通对象-不包括数组和class对象等-创建、销毁过程","children":[]},{"level":2,"title":"java内存分配的方法，怎么保证线程安全？","slug":"java内存分配的方法-怎么保证线程安全","link":"#java内存分配的方法-怎么保证线程安全","children":[]},{"level":2,"title":"对象在内存中的存储布局","slug":"对象在内存中的存储布局","link":"#对象在内存中的存储布局","children":[]},{"level":2,"title":"一个java对象、对象引用占用多大内存？","slug":"一个java对象、对象引用占用多大内存","link":"#一个java对象、对象引用占用多大内存","children":[]},{"level":2,"title":"对象访问定位？","slug":"对象访问定位","link":"#对象访问定位","children":[]},{"level":2,"title":"内存溢出和内存泄漏概念、举例、解决方案？","slug":"内存溢出和内存泄漏概念、举例、解决方案","link":"#内存溢出和内存泄漏概念、举例、解决方案","children":[]},{"level":2,"title":"jvm垃圾回收机制及垃圾判断算法","slug":"jvm垃圾回收机制及垃圾判断算法","link":"#jvm垃圾回收机制及垃圾判断算法","children":[]},{"level":2,"title":"强软弱虚引用？为什么这么设计？","slug":"强软弱虚引用-为什么这么设计","link":"#强软弱虚引用-为什么这么设计","children":[]},{"level":2,"title":"被标记为垃圾的对象一定会被回收吗？finalize()方法作用？","slug":"被标记为垃圾的对象一定会被回收吗-finalize-方法作用","link":"#被标记为垃圾的对象一定会被回收吗-finalize-方法作用","children":[]},{"level":2,"title":"Java 堆的内存分区","slug":"java-堆的内存分区","link":"#java-堆的内存分区","children":[]},{"level":2,"title":"常用的垃圾回收算法，JVM中的垃圾回收了解吗？为什么新生代不用标记整理？√","slug":"常用的垃圾回收算法-jvm中的垃圾回收了解吗-为什么新生代不用标记整理-√","link":"#常用的垃圾回收算法-jvm中的垃圾回收了解吗-为什么新生代不用标记整理-√","children":[]},{"level":2,"title":"Minor/Young GC、Major/Old GC、Mixed GC、Full GC概念、触发条件？","slug":"minor-young-gc、major-old-gc、mixed-gc、full-gc概念、触发条件","link":"#minor-young-gc、major-old-gc、mixed-gc、full-gc概念、触发条件","children":[]},{"level":2,"title":"对象什么时候会进入老年代？","slug":"对象什么时候会进入老年代","link":"#对象什么时候会进入老年代","children":[]},{"level":2,"title":"分代收集算法(Generational Collection)","slug":"分代收集算法-generational-collection","link":"#分代收集算法-generational-collection","children":[]},{"level":2,"title":"jvm垃圾回收器有哪些？作用是什么？","slug":"jvm垃圾回收器有哪些-作用是什么","link":"#jvm垃圾回收器有哪些-作用是什么","children":[]},{"level":2,"title":"对象逃逸分析技术","slug":"对象逃逸分析技术","link":"#对象逃逸分析技术","children":[]},{"level":2,"title":"类加载器分类？是如何加载Class文件？类的生命周期？","slug":"类加载器分类-是如何加载class文件-类的生命周期","link":"#类加载器分类-是如何加载class文件-类的生命周期","children":[]},{"level":2,"title":"Tomcat 的类加载机制了解吗？","slug":"tomcat-的类加载机制了解吗","link":"#tomcat-的类加载机制了解吗","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1,"words":301},"filePathRelative":"interview/java/javavirtualmachine/javavirtualmachinemap.md","excerpt":"\\n<h2>什么是JVM？</h2>\\n<h2>JVM主要组成部分及其作用？</h2>\\n<h2>运行时数据区域的组成及其作用</h2>\\n<h2>堆和栈区别？</h2>\\n<h2>JDK678内存区域的变化？</h2>\\n<h2>java普通对象（不包括数组和Class对象等）创建、销毁过程？</h2>\\n<h2>java内存分配的方法，怎么保证线程安全？</h2>\\n<h2>对象在内存中的存储布局</h2>\\n<h2>一个java对象、对象引用占用多大内存？</h2>\\n<h2>对象访问定位？</h2>\\n<h2>内存溢出和内存泄漏概念、举例、解决方案？</h2>\\n<h2>jvm垃圾回收机制及垃圾判断算法</h2>","autoDesc":true}');export{v as comp,p as data};
