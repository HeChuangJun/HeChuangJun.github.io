import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-7KT7HDzT.js";const o={},p=t(`<h2 id="spring-boot优缺点" tabindex="-1"><a class="header-anchor" href="#spring-boot优缺点"><span>Spring Boot优缺点？</span></a></h2><p>快速构建项目：通过IDEA或者官方的Spring Initializr<br> 自动配置：提供Starter，对主流框架的无配置集成<br> 项目独立运行：内嵌servlet容器，Tomcat、Jetty、Undertow</p><h2 id="spring-boot如何解决跨域问题" tabindex="-1"><a class="header-anchor" href="#spring-boot如何解决跨域问题"><span>Spring Boot如何解决跨域问题？</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-boot自动配置原理、-enableautoconfiguration实现原理-如何自定义starter" tabindex="-1"><a class="header-anchor" href="#spring-boot自动配置原理、-enableautoconfiguration实现原理-如何自定义starter"><span>Spring Boot自动配置原理、@EnableAutoConfiguration实现原理？如何自定义Starter?</span></a></h2><p>@SpringBootApplication注解包含@EnableAutoConfiguration，@Configuration（指定类是Bean定义的配置类），@ComponentScan(扫描指定包下的Bean)<br> @EnableAutoConfiguration(开启自动配置功能)使用@Import({AutoConfigurationImportSelector.class}) AutoConfigurationImportSelector使用ImportSelector接口的selectImports方法加载META-INF/spring.factories文件的信息org.springframework.boot.autoconfigure.EnableAutoConfiguration=，封装成beanName，加载到IOC容器中，实现自动配置功能<br> SpringBoot在启动时扫描项目所依赖的jar包，寻找包含spring.factories文件的jar<br> 根据spring.factories配置加载AutoConfigure类<br> 根据@Conditional等条件注解进行自动配置并将Bean注入Spring IOC容器中</p><details><summary>pom.xml引入SpringBoot依赖</summary><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>编写配置文件定义属性配置的前缀</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">//getter、setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>自动装配</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">HelloProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloPropertiesConfigure</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>配置自动类:在/resources/META-INF/spring.factories文件中添加自动配置类路径</summary><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\
    cn.fighter3.demo.starter.configure.HelloPropertiesConfigure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="spring-boot-启动原理-为什么spring-boot启动时能够找到main方法上的-springbootapplication注解-默认的包扫描路径是什么" tabindex="-1"><a class="header-anchor" href="#spring-boot-启动原理-为什么spring-boot启动时能够找到main方法上的-springbootapplication注解-默认的包扫描路径是什么"><span>Spring Boot 启动原理？为什么Spring Boot启动时能够找到main方法上的@SpringBootApplication注解？默认的包扫描路径是什么？</span></a></h2><p>SpringApplication类<br> 推断应用的类型是普通的项目还是 Web 项目<br> 查找并加载所有可用初始化器 ， 设置到 initializers 属性中<br> 找出所有的应用程序监听器，设置到 listeners 属性中<br> 推断并设置 main 方法的定义类，找到运行的主类<br><img src="https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ80ff04acc6d71609e6534357b00f0590.png" alt="springbootstart.png"></p><p>因为SpringApplication.run(Class&lt;?&gt;primarySource,String...args)方法接收主应用类（包含main方法的类），命令行参数。SpringBoot利用反射机制来读取传递给run方法的类MyApplication.class并检查注解，包括@SpringBootApplication</p><p>启动类@SpringBootApplication类所在包及其子包下的所有类</p>`,14),e=[p];function i(c,l){return a(),s("div",null,e)}const d=n(o,[["render",i],["__file","springboot.html.vue"]]),g=JSON.parse('{"path":"/interview/framework/springboot.html","title":"Spring Boot","lang":"zh-CN","frontmatter":{"title":"Spring Boot","date":"2023-01-01T00:00:00.000Z","tags":"java","categories":"面试","description":"Spring Boot优缺点？ 快速构建项目：通过IDEA或者官方的Spring Initializr 自动配置：提供Starter，对主流框架的无配置集成 项目独立运行：内嵌servlet容器，Tomcat、Jetty、Undertow Spring Boot如何解决跨域问题？ Spring Boot自动配置原理、@EnableAutoConfigu...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/interview/framework/springboot.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"Spring Boot"}],["meta",{"property":"og:description","content":"Spring Boot优缺点？ 快速构建项目：通过IDEA或者官方的Spring Initializr 自动配置：提供Starter，对主流框架的无配置集成 项目独立运行：内嵌servlet容器，Tomcat、Jetty、Undertow Spring Boot如何解决跨域问题？ Spring Boot自动配置原理、@EnableAutoConfigu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ80ff04acc6d71609e6534357b00f0590.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot\\",\\"image\\":[\\"https://b.bdstatic.com/comment/I4MgmLj55Sgosm2EdtLMDQ80ff04acc6d71609e6534357b00f0590.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"Spring Boot优缺点？","slug":"spring-boot优缺点","link":"#spring-boot优缺点","children":[]},{"level":2,"title":"Spring Boot如何解决跨域问题？","slug":"spring-boot如何解决跨域问题","link":"#spring-boot如何解决跨域问题","children":[]},{"level":2,"title":"Spring Boot自动配置原理、@EnableAutoConfiguration实现原理？如何自定义Starter?","slug":"spring-boot自动配置原理、-enableautoconfiguration实现原理-如何自定义starter","link":"#spring-boot自动配置原理、-enableautoconfiguration实现原理-如何自定义starter","children":[]},{"level":2,"title":"Spring Boot 启动原理？为什么Spring Boot启动时能够找到main方法上的@SpringBootApplication注解？默认的包扫描路径是什么？","slug":"spring-boot-启动原理-为什么spring-boot启动时能够找到main方法上的-springbootapplication注解-默认的包扫描路径是什么","link":"#spring-boot-启动原理-为什么spring-boot启动时能够找到main方法上的-springbootapplication注解-默认的包扫描路径是什么","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.87,"words":562},"filePathRelative":"interview/framework/springboot.md","localizedDate":"2023年1月1日","excerpt":"<h2>Spring Boot优缺点？</h2>\\n<p>快速构建项目：通过IDEA或者官方的Spring Initializr<br>\\n自动配置：提供Starter，对主流框架的无配置集成<br>\\n项目独立运行：内嵌servlet容器，Tomcat、Jetty、Undertow</p>\\n<h2>Spring Boot如何解决跨域问题？</h2>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Configuration</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">CorsConfig</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">WebMvcConfigurer</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token annotation punctuation\\">@Override</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">addCorsMappings</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">CorsRegistry</span> registry<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    registry<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addMapping</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/**\\"</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">allowedOrigins</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"*\\"</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">allowCredentials</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">allowedMethods</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"GET\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"POST\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"PUT\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"DELETE\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"OPTIONS\\"</span><span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">maxAge</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3600</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,g as data};
