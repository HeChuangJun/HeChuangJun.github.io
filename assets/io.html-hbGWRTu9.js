import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as a,e as t}from"./app-7KT7HDzT.js";const r={},l=t(`<p>io</p><ul><li><a href="#1-io%E6%A6%82%E8%BF%B0">1. IO概述</a></li><li><a href="#2-io%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB">2. IO的继承体系</a></li><li><a href="#3-javaiofilejava%E4%B8%AD%E6%8A%8A%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%BD%E5%B0%81%E8%A3%85%E6%88%90file%E5%AF%B9%E8%B1%A1">3. java.io.File：Java中把文件或者目录（文件夹）都封装成File对象</a></li><li><a href="#4-javaiooutputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E8%A1%A8%E7%A4%BA%E8%BE%93%E5%87%BA%E5%AD%97%E8%8A%82%E6%B5%81%E7%9A%84%E6%89%80%E6%9C%89%E7%B1%BB%E7%9A%84%E8%B6%85%E7%B1%BB">4. java.io.OutputStream: 抽象类，表示输出字节流的所有类的超类</a></li><li><a href="#5-javaioflieoutputstream">5. java.io.FlieOutputStream</a></li><li><a href="#6-javaioobjectoutputstream%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%81">6. java.io.ObjectOutputStream操作对象的流</a></li><li><a href="#7-javaiofilteroutputstream">7. java.io.FilterOutputStream</a></li><li><a href="#8-javaioprintstream">8. java.io.PrintStream</a></li><li><a href="#9-javaiobufferedoutputstream">9. java.io.BufferedOutputStream</a></li><li><a href="#10-javaioinputstream">10. java.io.InputStream</a></li><li><a href="#11-javaiofileinputstream">11. java.io.FileInputStream</a></li><li><a href="#12-javaioobjectinputstream-%E5%AF%B9%E8%B1%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E4%BB%8E%E6%B5%81%E4%B8%AD%E8%AF%BB%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%93%8D%E4%BD%9C%E6%B5%81">12. java.io.ObjectInputStream 对象反序列化流，从流中读取对象的操作流</a></li><li><a href="#13-javaiofilterinputstream">13. java.io.FilterInputStream</a></li><li><a href="#14-javaiobufferedinputstream">14. java.io.BufferedInputStream</a></li><li><a href="#15-javaiowriter-%E5%86%99%E5%85%A5%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB">15. java.io.Writer 写入字符流的抽象类</a></li><li><a href="#16-javaiobufferedwriter-%E5%AD%97%E7%AC%A6%E7%BC%93%E5%86%B2%E8%BE%93%E5%87%BA%E6%B5%81%E6%8F%90%E9%AB%98%E4%BA%86io%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6">16. java.io.BufferedWriter 字符缓冲输出流，提高了IO读写速度</a></li><li><a href="#17-javaioprintwriter">17. java.io.PrintWriter</a></li><li><a href="#18-javaiooutputstreamwriter">18. java.io.OutputStreamWriter</a></li><li><a href="#19-javaiofilewriter">19. java.io.FileWriter</a></li><li><a href="#20-javaioreader-%E8%AF%BB%E5%8F%96%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E6%8A%BD%E8%B1%A1%E8%B6%85%E7%B1%BB">20. java.io.Reader 读取字符流的抽象超类</a></li><li><a href="#21-javaiobufferedreader-%E5%AD%97%E7%AC%A6%E7%BC%93%E5%86%B2%E8%BE%93%E5%85%A5%E6%B5%81%E6%8F%90%E9%AB%98%E4%BA%86io%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6">21. java.io.BufferedReader 字符缓冲输入流，提高了IO读写速度</a></li><li><a href="#22-javaioinputstreamreader-%E5%AD%97%E8%8A%82%E6%B5%81%E9%80%9A%E5%90%91%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E6%A1%A5%E6%A2%81%E5%AE%83%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%A1%A8%E8%AF%BB%E5%8F%96%E5%AD%97%E8%8A%82%E5%B9%B6%E5%B0%86%E5%85%B6%E8%A7%A3%E7%A0%81%E4%B8%BA%E5%AD%97%E7%AC%A6">22. java.io.InputStreamReader 字节流通向字符流的桥梁：它使用指定的字符编码表读取字节并将其解码为字符</a></li><li><a href="#23-javaiofilereader">23. java.io.FileReader</a></li><li><a href="#24-flush%E5%92%8Cclose%E7%9A%84%E5%8C%BA%E5%88%AB">24. flush()和close()的区别？</a></li><li><a href="#25-%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6">25. 文件复制</a></li></ul><h1 id="_1-io概述" tabindex="-1"><a class="header-anchor" href="#_1-io概述"><span>1. IO概述</span></a></h1><ul><li>IO就是将内存中的数据持久化存储到持久化设备上，使用的时候从持久化设备上读入内存</li><li>IO操作:当需要把内存中的数据存储到持久化设备上这个动作称为输出（写）Output操作。 <ul><li>当把持久设备上的数据读取到内存中的这个动作称为输入（读）Input操作。</li></ul></li><li>IOExcption异常</li></ul><h1 id="_2-io的继承体系" tabindex="-1"><a class="header-anchor" href="#_2-io的继承体系"><span>2. IO的继承体系</span></a></h1><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/3e02a33c786b280333be7.png" alt="IO.jpg" tabindex="0"><figcaption>IO.jpg</figcaption></figure><h1 id="_3-java-io-file-java中把文件或者目录-文件夹-都封装成file对象" tabindex="-1"><a class="header-anchor" href="#_3-java-io-file-java中把文件或者目录-文件夹-都封装成file对象"><span>3. java.io.File：Java中把文件或者目录（文件夹）都封装成File对象</span></a></h1><ul><li>File(&quot;e:\\a\\hello.java&quot;);将给定路径名称字符串转换为抽象路径名创建File对象，(包括不存在文件或者文件夹)</li><li>boolean createNewFile()创建不存在的文件并返回true，存在false</li><li>boolean mkdir()创建不存在的单层文件夹并返回true，存在false</li><li>boolean mkdirs()创建多层文件夹</li><li>boolean delete()删除此抽象路径名表示的文件或空目录</li><li>boolean isFile()判断此抽象路径名表示的文件是否为标准文件</li><li>boolean isDirectory()判断此抽象路径名表示的文件是否是目录（文件夹）</li><li>String getAbsolutePath()获取当前File对象的绝对路径名字符串</li><li>String getPath()将此抽象路径名转换为一个路径名字符串</li><li>String getName()获取当前File对象的文件或目录的名称</li><li>long length()获取当前File对象的文件或文件夹的大小（字节）</li><li>boolean exists() 判断File对象对应的文件或目录是否存在</li><li>String[] list()获得抽象路径名目录的文件和目录的字符串数组，指定的目录必须是存在的目录。否则数组为null</li><li>File[] listFiles()获取抽象路径名目录中的File对象数组，指定的目录必须是存在的目录。否则数组为null</li><li>File[] listFiles(FilenameFilter filter)返回File的目录中满足过滤器的文件和目录抽象路径名数组</li><li>File[] listFiles(FileFilter filter)返回File的目录中满足过滤器的文件和目录抽象路径名数组</li><li>FilenameFilter接口:过滤文件名</li><li>boolean accept(FIle dir,String name)测试指定路径名是否包含在某个路径列表中中</li><li>FileFilter接口:过滤文件或者文件夹</li><li>boolean accept(File pathname)测试指定抽象路径名是否应该包含在某个路径名列表中</li></ul><h1 id="_4-java-io-outputstream-抽象类-表示输出字节流的所有类的超类" tabindex="-1"><a class="header-anchor" href="#_4-java-io-outputstream-抽象类-表示输出字节流的所有类的超类"><span>4. java.io.OutputStream: 抽象类，表示输出字节流的所有类的超类</span></a></h1><ul><li>void close()关闭输出流并释放与此流有关的所有系统资源</li><li>void flush()刷新此输出流并强制写出所有输出字节</li><li>void write(byte[] b)将b.length个字节从指定的byte数组写入此输出流</li><li>void write(byte[] b,int off,int len)将制定byte数组从偏移量off开始的len个字节写入此输出流</li></ul><h1 id="_5-java-io-flieoutputstream" tabindex="-1"><a class="header-anchor" href="#_5-java-io-flieoutputstream"><span>5. java.io.FlieOutputStream</span></a></h1><ul><li>FlieOutputStream(File file)创建Flie对象表示文件中写入数据的输出流（文件存在则覆盖）</li><li>FlieOutputStream(String name)创建指向指定名称文件中写入数据的输出流(文件存在则覆盖)</li><li>FileOutputStream(File file,boolean append)true在文件末尾继续添加，“\\r\\n”换行</li><li>FlieOutputStream(String name,boolean append)true就表示可以在文件末尾继续添加</li></ul><h1 id="_6-java-io-objectoutputstream操作对象的流" tabindex="-1"><a class="header-anchor" href="#_6-java-io-objectoutputstream操作对象的流"><span>6. java.io.ObjectOutputStream操作对象的流</span></a></h1><ul><li>ObjectOutputStream(OutputStream out)传入OutputStream的实现类如FileOutputStream即可</li><li>void writeObject(Object obj)将指定对象写入ObjectOutputStream</li><li>①被序列化的对象所属的类必须实现Serializable接口。否则会发生异常NotSerializableException异常。</li><li>②反序列化对象时，如果对象所属的class文件在序列化之后被修改了，那么会发生异常InvalidClassException。</li><li>Serializable标记接口，给需要序列化的类，提供了一个序列版本号serialVersionUID. private static final long serialVersionUID = 1L;该版本号的目的在于验证序列化的对象和对应类是否版本匹配</li><li>③transient修饰的属性不会琲序列化</li><li>④静态修饰也不会被序列化，因为序列化是把对象数据进行持久化存储，而静态的属于类加载时的数据，不会被序列化</li></ul><h1 id="_7-java-io-filteroutputstream" tabindex="-1"><a class="header-anchor" href="#_7-java-io-filteroutputstream"><span>7. java.io.FilterOutputStream</span></a></h1><ul><li>FilterOutputStream(OutputStream out)传入OutputStream的实现类如FileOutputStream即可</li></ul><h1 id="_8-java-io-printstream" tabindex="-1"><a class="header-anchor" href="#_8-java-io-printstream"><span>8. java.io.PrintStream</span></a></h1><ul><li>PrintStream(OutputStream out, boolean autoFlush)开启文件自动刷新</li><li>void print(String str)输出任意类型的数据</li><li>void println(String str)输出任意类型的数据，自动写入换行操作</li></ul><h1 id="_9-java-io-bufferedoutputstream" tabindex="-1"><a class="header-anchor" href="#_9-java-io-bufferedoutputstream"><span>9. java.io.BufferedOutputStream</span></a></h1><ul><li>BufferedOutputStream(OutputStream out)字节缓冲输出流提高了IO的读写速度</li></ul><h1 id="_10-java-io-inputstream" tabindex="-1"><a class="header-anchor" href="#_10-java-io-inputstream"><span>10. java.io.InputStream</span></a></h1><ul><li>InputStream此抽象类，是表示字节输入流的所有类的超类。</li><li>int read()读取一个字节并返回，没有字节返回-1.//速度慢</li><li>int read(byte[] b)读取一定量的字节数，并存储到字节(推荐1024整数倍字节)数组中</li></ul><h1 id="_11-java-io-fileinputstream" tabindex="-1"><a class="header-anchor" href="#_11-java-io-fileinputstream"><span>11. java.io.FileInputStream</span></a></h1><ul><li>FileInputStream(File file)通过File对象来创建一个FileInputStream</li><li>FileInputStream(String name)通过文件系统中的路径名name来创建一个FileInputStream</li></ul><h1 id="_12-java-io-objectinputstream-对象反序列化流-从流中读取对象的操作流" tabindex="-1"><a class="header-anchor" href="#_12-java-io-objectinputstream-对象反序列化流-从流中读取对象的操作流"><span>12. java.io.ObjectInputStream 对象反序列化流，从流中读取对象的操作流</span></a></h1><ul><li>ObjectInputStream(InputStream in)传入InputStream的实现类如FileInputStream即可</li><li>Object readObject()从ObjectInputStream读取对象</li><li>①被序列化的对象所属的类必须实现Serializable接口。否则会发生异常NotSerializableException异常。</li><li>②反序列化对象时，如果对象所属的class文件在序列化之后被修改了，那么会发生异常InvalidClassException。</li><li>Serializable标记接口给需要序列化的类提供了一个序列版本号serialVersionUID. private static final long serialVersionUID = 1L;该版本号的目的在于验证序列化的对象和对应类是否版本匹配</li><li>③transient修饰的属性不会琲序列化</li><li>④静态修饰也不会被序列化，因为序列化是把对象数据进行持久化存储，而静态的属于类加载时的数据，不会被序列化</li></ul><h1 id="_13-java-io-filterinputstream" tabindex="-1"><a class="header-anchor" href="#_13-java-io-filterinputstream"><span>13. java.io.FilterInputStream</span></a></h1><ul><li>FilterInputStream(OutputStream out)传入OutputStream的实现类如FileOutputStream即可</li></ul><h1 id="_14-java-io-bufferedinputstream" tabindex="-1"><a class="header-anchor" href="#_14-java-io-bufferedinputstream"><span>14. java.io.BufferedInputStream</span></a></h1><ul><li>BufferedInputStream(InputStream in)字节缓冲输入流，提高了IO的读写速度</li></ul><h1 id="_15-java-io-writer-写入字符流的抽象类" tabindex="-1"><a class="header-anchor" href="#_15-java-io-writer-写入字符流的抽象类"><span>15. java.io.Writer 写入字符流的抽象类</span></a></h1><ul><li>void write(String str)写入字符串</li><li>void write(String str,int off,int len)写入字符串的某一部分</li><li>void write(char[] cbuf)写入字符数组</li><li>abstract void write(char[] cbuf,int off,int len)写入字符数组的某一部分</li><li>void write(int c)写入单个字符字节流转成字符流，将字符串按照指定的编码表转成字节</li></ul><h1 id="_16-java-io-bufferedwriter-字符缓冲输出流-提高了io读写速度" tabindex="-1"><a class="header-anchor" href="#_16-java-io-bufferedwriter-字符缓冲输出流-提高了io读写速度"><span>16. java.io.BufferedWriter 字符缓冲输出流，提高了IO读写速度</span></a></h1><ul><li>BufferedWriter(Writer out)使用默认大小输出缓冲区,传入Writer实现类如FileWriter</li><li>void newLine()根据当前的系统，写入一个换行符</li></ul><h1 id="_17-java-io-printwriter" tabindex="-1"><a class="header-anchor" href="#_17-java-io-printwriter"><span>17. java.io.PrintWriter</span></a></h1><ul><li>public PrintWriter(OutputStream out, boolean autoFlush)//开启文件自动刷新</li><li>PrintWriter(Writer out, boolean autoFlush)//开启文件自动刷新</li><li>void println(String str): 输出任意类型的数据，自动写入换行操作</li><li>void print(String str)输出任意类型的数据</li></ul><h1 id="_18-java-io-outputstreamwriter" tabindex="-1"><a class="header-anchor" href="#_18-java-io-outputstreamwriter"><span>18. java.io.OutputStreamWriter</span></a></h1><ul><li>OutputStreamWriter类字符流转成字节流，将字符串按照指定的编码表转成字节</li><li>OutputStreamWriter(OutputStream out Charset cs)创建使用给定字符集的编码对象</li></ul><h1 id="_19-java-io-filewriter" tabindex="-1"><a class="header-anchor" href="#_19-java-io-filewriter"><span>19. java.io.FileWriter</span></a></h1><ul><li>FileWriter假定默认字符编码GBK和默认字节缓冲区大小都是可接受的。</li><li>FileWriter(File file)根据File对象构造一个FileWriter对象(覆盖)</li><li>FileWriter(String FileName)根据文件名创建FileWriter对象</li><li>FileWriter(File file,boolean append)File对象构造FileWriter对象(true继续写)</li><li>FileWriter(String FileName,boolean append)文件名创建FileWriter对象(true继续写)</li></ul><h1 id="_20-java-io-reader-读取字符流的抽象超类" tabindex="-1"><a class="header-anchor" href="#_20-java-io-reader-读取字符流的抽象超类"><span>20. java.io.Reader 读取字符流的抽象超类</span></a></h1><ul><li>int read()读取单个字符并返回，若没有则返回-1</li><li>int read(char[] cbuf)将字符读入数组，并返回读取的个数</li></ul><h1 id="_21-java-io-bufferedreader-字符缓冲输入流-提高了io读写速度" tabindex="-1"><a class="header-anchor" href="#_21-java-io-bufferedreader-字符缓冲输入流-提高了io读写速度"><span>21. java.io.BufferedReader 字符缓冲输入流，提高了IO读写速度</span></a></h1><ul><li>BufferedReader(Reader in)默认大小输入缓冲区</li><li>String readLine()返回文本行内容字符串，不包含任何行终止符，到达流的末尾返回null</li></ul><h1 id="_22-java-io-inputstreamreader-字节流通向字符流的桥梁-它使用指定的字符编码表读取字节并将其解码为字符" tabindex="-1"><a class="header-anchor" href="#_22-java-io-inputstreamreader-字节流通向字符流的桥梁-它使用指定的字符编码表读取字节并将其解码为字符"><span>22. java.io.InputStreamReader 字节流通向字符流的桥梁：它使用指定的字符编码表读取字节并将其解码为字符</span></a></h1><ul><li>InputStreamReader(InputStream in Charset cs)创建使用给定字符集的解码对象</li></ul><h1 id="_23-java-io-filereader" tabindex="-1"><a class="header-anchor" href="#_23-java-io-filereader"><span>23. java.io.FileReader</span></a></h1><ul><li>读取字符文件的便捷类，假定默认字符编码GBK和默认字节缓冲区大小都是适当的</li><li>FileReader(File file)从file对象创建一个新的FileReader</li><li>FileReader(String fileName)从读取数据的文件名创建一个新的FileReader</li></ul><h1 id="_24-flush-和close-的区别" tabindex="-1"><a class="header-anchor" href="#_24-flush-和close-的区别"><span>24. flush()和close()的区别？</span></a></h1><ul><li>flush():将流中的缓冲区缓冲的数据刷新到目的地中，刷新后，流还可以继续使用。</li><li>close():关闭资源，但在关闭前会将缓冲区中的数据先刷新到目的地，否则丢失数据，然后在关闭流。流不可以使用。如果写入数据多，一定要一边写一边刷新，<br> 最后一次可以不刷新，由close完成刷新并关闭</li></ul><h1 id="_25-文件复制" tabindex="-1"><a class="header-anchor" href="#_25-文件复制"><span>25. 文件复制</span></a></h1><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>采用高效的流，一个多个字节的方式赋值
BufferedInputStream in = new BufferedInputStream(new FileInputStream(src));
BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
byte[] buffer = new byte[1024];
int len = -1;
while ( (len = in.read(buffer)) != -1) {
	out.write(buffer, 0, len);
}
in.close();
out.close();
采用高效的流，一次一个字节的方式复制
BufferedInputStream in = new BufferedInputStream(new FileInputStream(src));
BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
int ch = -1;
while ((ch=in.read()) != -1) {
	out.write(ch);	
}		
in.close();
out.close();
采用高效的流文件复制
BufferedReader in = new BufferedReader(new FileReader(&quot;file.txt&quot;));
BufferedWriter out = new BufferedWriter(new FileWriter(&quot;copyFile.txt&quot;));
String line = null;
while ( (line = in.readLine()) != null ) {
	out.write(line);
	out.newLine();
}
out.close();
in.close();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52),n=[l];function u(o,s){return i(),a("div",null,n)}const p=e(r,[["render",u],["__file","io.html.vue"]]),f=JSON.parse('{"path":"/backend/java/io.html","title":"io","lang":"zh-CN","frontmatter":{"title":"io","date":"2023-01-01T00:00:00.000Z","tags":"io","categories":"后端","description":"io 1. IO概述 2. IO的继承体系 3. java.io.File：Java中把文件或者目录（文件夹）都封装成File对象 4. java.io.OutputStream: 抽象类，表示输出字节流的所有类的超类 5. java.io.FlieOutputStream 6. java.io.ObjectOutputStream操作对象的流 7. ...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/backend/java/io.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"io"}],["meta",{"property":"og:description","content":"io 1. IO概述 2. IO的继承体系 3. java.io.File：Java中把文件或者目录（文件夹）都封装成File对象 4. java.io.OutputStream: 抽象类，表示输出字节流的所有类的超类 5. java.io.FlieOutputStream 6. java.io.ObjectOutputStream操作对象的流 7. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://290ff162.telegraph-image-eg9.pages.dev/file/3e02a33c786b280333be7.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-07T01:56:33.000Z"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-07T01:56:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"io\\",\\"image\\":[\\"https://290ff162.telegraph-image-eg9.pages.dev/file/3e02a33c786b280333be7.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-07T01:56:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[],"git":{"createdTime":1733536593000,"updatedTime":1733536593000,"contributors":[{"name":"HeChuangJun","email":"1105128664@qq.com","commits":1}]},"readingTime":{"minutes":9.18,"words":2755},"filePathRelative":"backend/java/io.md","localizedDate":"2023年1月1日","excerpt":"<p>io</p>\\n<!--more-->\\n<!-- TOC -->\\n<ul>\\n<li><a href=\\"#1-io%E6%A6%82%E8%BF%B0\\">1. IO概述</a></li>\\n<li><a href=\\"#2-io%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB\\">2. IO的继承体系</a></li>\\n<li><a href=\\"#3-javaiofilejava%E4%B8%AD%E6%8A%8A%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%BD%E5%B0%81%E8%A3%85%E6%88%90file%E5%AF%B9%E8%B1%A1\\">3. java.io.File：Java中把文件或者目录（文件夹）都封装成File对象</a></li>\\n<li><a href=\\"#4-javaiooutputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E8%A1%A8%E7%A4%BA%E8%BE%93%E5%87%BA%E5%AD%97%E8%8A%82%E6%B5%81%E7%9A%84%E6%89%80%E6%9C%89%E7%B1%BB%E7%9A%84%E8%B6%85%E7%B1%BB\\">4. java.io.OutputStream: 抽象类，表示输出字节流的所有类的超类</a></li>\\n<li><a href=\\"#5-javaioflieoutputstream\\">5. java.io.FlieOutputStream</a></li>\\n<li><a href=\\"#6-javaioobjectoutputstream%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%81\\">6. java.io.ObjectOutputStream操作对象的流</a></li>\\n<li><a href=\\"#7-javaiofilteroutputstream\\">7. java.io.FilterOutputStream</a></li>\\n<li><a href=\\"#8-javaioprintstream\\">8. java.io.PrintStream</a></li>\\n<li><a href=\\"#9-javaiobufferedoutputstream\\">9. java.io.BufferedOutputStream</a></li>\\n<li><a href=\\"#10-javaioinputstream\\">10. java.io.InputStream</a></li>\\n<li><a href=\\"#11-javaiofileinputstream\\">11. java.io.FileInputStream</a></li>\\n<li><a href=\\"#12-javaioobjectinputstream-%E5%AF%B9%E8%B1%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E4%BB%8E%E6%B5%81%E4%B8%AD%E8%AF%BB%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%93%8D%E4%BD%9C%E6%B5%81\\">12. java.io.ObjectInputStream 对象反序列化流，从流中读取对象的操作流</a></li>\\n<li><a href=\\"#13-javaiofilterinputstream\\">13. java.io.FilterInputStream</a></li>\\n<li><a href=\\"#14-javaiobufferedinputstream\\">14. java.io.BufferedInputStream</a></li>\\n<li><a href=\\"#15-javaiowriter-%E5%86%99%E5%85%A5%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB\\">15. java.io.Writer 写入字符流的抽象类</a></li>\\n<li><a href=\\"#16-javaiobufferedwriter-%E5%AD%97%E7%AC%A6%E7%BC%93%E5%86%B2%E8%BE%93%E5%87%BA%E6%B5%81%E6%8F%90%E9%AB%98%E4%BA%86io%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6\\">16. java.io.BufferedWriter 字符缓冲输出流，提高了IO读写速度</a></li>\\n<li><a href=\\"#17-javaioprintwriter\\">17. java.io.PrintWriter</a></li>\\n<li><a href=\\"#18-javaiooutputstreamwriter\\">18. java.io.OutputStreamWriter</a></li>\\n<li><a href=\\"#19-javaiofilewriter\\">19. java.io.FileWriter</a></li>\\n<li><a href=\\"#20-javaioreader-%E8%AF%BB%E5%8F%96%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E6%8A%BD%E8%B1%A1%E8%B6%85%E7%B1%BB\\">20. java.io.Reader 读取字符流的抽象超类</a></li>\\n<li><a href=\\"#21-javaiobufferedreader-%E5%AD%97%E7%AC%A6%E7%BC%93%E5%86%B2%E8%BE%93%E5%85%A5%E6%B5%81%E6%8F%90%E9%AB%98%E4%BA%86io%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6\\">21. java.io.BufferedReader 字符缓冲输入流，提高了IO读写速度</a></li>\\n<li><a href=\\"#22-javaioinputstreamreader-%E5%AD%97%E8%8A%82%E6%B5%81%E9%80%9A%E5%90%91%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E6%A1%A5%E6%A2%81%E5%AE%83%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%A1%A8%E8%AF%BB%E5%8F%96%E5%AD%97%E8%8A%82%E5%B9%B6%E5%B0%86%E5%85%B6%E8%A7%A3%E7%A0%81%E4%B8%BA%E5%AD%97%E7%AC%A6\\">22. java.io.InputStreamReader 字节流通向字符流的桥梁：它使用指定的字符编码表读取字节并将其解码为字符</a></li>\\n<li><a href=\\"#23-javaiofilereader\\">23. java.io.FileReader</a></li>\\n<li><a href=\\"#24-flush%E5%92%8Cclose%E7%9A%84%E5%8C%BA%E5%88%AB\\">24. flush()和close()的区别？</a></li>\\n<li><a href=\\"#25-%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6\\">25. 文件复制</a></li>\\n</ul>","autoDesc":true}');export{p as comp,f as data};
