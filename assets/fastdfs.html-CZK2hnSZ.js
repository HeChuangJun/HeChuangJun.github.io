import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as n,c as s,a as e,b as t,d as l,e as c}from"./app-7KT7HDzT.js";const o={},d=c(`<p>FastDFS</p><h1 id="_1-什么是fastdfs" tabindex="-1"><a class="header-anchor" href="#_1-什么是fastdfs"><span>1. 什么是FastDFS？</span></a></h1><ul><li>FastDFS是用c语言编写的一款国产开源的分布式文件系统。考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</li></ul><h1 id="_2-fastdfs架构" tabindex="-1"><a class="header-anchor" href="#_2-fastdfs架构"><span>2. FastDFS架构</span></a></h1><ul><li>FastDFS架构包括Tracker server和Storage server</li><li>客户端请求Tracker server来调度Storage server完成文件上传和下载。</li><li>Tracker：管理集群，tracker也可以实现集群。每个tracker节点地位平等。收集Storage集群的状态。</li><li>Tracker server作用是负载均衡和调度，通过Tracker server在文件上传时可以根据一些策略找到可以将tracker称为追踪服务器或调度服务器。</li><li>Storage：实际保存文件,分为多个组，每个组之间保存的文件是不同的。每个组内部可以有多个成员，组成员内部保存的内容是一样的，组成员的地位是一致的，没有主从的概念。</li><li>Storage server作用是文件存储，客户端上传的文件最终存储在Storage服务器上，提供文件上传服务。</li><li>Storage server没有实现自己的文件系统而是利用操作系统 的文件系统来管理文件。可以将storage称为存储服务器。</li></ul><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/ce01ce788e74df3757f7f.png" alt="FastDFS架构.png" tabindex="0"><figcaption>FastDFS架构.png</figcaption></figure><h1 id="_3-文件上传的流程" tabindex="-1"><a class="header-anchor" href="#_3-文件上传的流程"><span>3. 文件上传的流程</span></a></h1><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/84401f0fda44b9e561f09.png" alt="文件上传流程.png" tabindex="0"><figcaption>文件上传流程.png</figcaption></figure><ul><li>客户端上传文件后存储服务器将文件ID返回给客户端，此文件ID用于以后访问该文件的索引信息。</li><li>文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。</li><li>组名：文件上传后所在的storage组名称，在文件上传成功后有storage服务器返回，需要客户端自行保存。</li><li>虚拟磁盘路径：storage配置的虚拟路径，与磁盘选项store_path*对应。如果配置了store_path0则是M00，如果配置了store_path1则是M01，以此类推。</li><li>数据两级目录：storage服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。</li><li>文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器IP地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。/group1/M00/02/44/wKgDrE34E8wAAAAAAAGkEIYJK42378.sh</li></ul><h1 id="_4-文件下载流程" tabindex="-1"><a class="header-anchor" href="#_4-文件下载流程"><span>4. 文件下载流程</span></a></h1><figure><img src="https://290ff162.telegraph-image-eg9.pages.dev/file/ee213691c6dcea40845d2.png" alt="文件下载流程.png" tabindex="0"><figcaption>文件下载流程.png</figcaption></figure><h1 id="_5-后端fastdfs使用" tabindex="-1"><a class="header-anchor" href="#_5-后端fastdfs使用"><span>5. 后端FastDFS使用</span></a></h1><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class FastDFSTest {
	@Test
	public void testFileUpload() throws Exception {
		// 1、加载配置文件，配置文件中的内容就是tracker服务的地址。tracker_server=192.168.25.133:22122
		ClientGlobal.init(&quot;D:/workspaces-itcast/e3-manager-web/src/main/resources/resource/client.conf&quot;);
		// 2、创建一个TrackerClient对象。直接new一个。
		TrackerClient trackerClient = new TrackerClient();
		// 3、使用TrackerClient对象创建连接，获得一个TrackerServer对象。
		TrackerServer trackerServer = trackerClient.getConnection();
		// 4、创建一个StorageServer的引用，值为null
		StorageServer storageServer = null;
		// 5、创建一个StorageClient对象，需要两个参数TrackerServer对象、StorageServer的引用
		StorageClient storageClient = new StorageClient(trackerServer, storageServer);
		// 6、使用StorageClient对象上传图片。最后一个参数是元数据，就是图片的详细信息
		//扩展名不带“.”
		String[] strings = storageClient.upload_file(&quot;D:/Documents/Pictures/images/200811281555127886.jpg&quot;, &quot;jpg&quot;, null);
		// 7、返回数组。包含组名和图片的路径。
		for (String string : strings) {
			System.out.println(string);
		}
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_6-前端图片上传功能" tabindex="-1"><a class="header-anchor" href="#_6-前端图片上传功能"><span>6. 前端图片上传功能</span></a></h1>`,14),g=e("li",null,"使用的是KindEditor的多图片上传插件。",-1),p={href:"http://kindeditor.net/doc.php",target:"_blank",rel:"noopener noreferrer"},v=e("li",null,"KindEditor的多图片上传插件最后响应的content-type是text/plan格式的json字符串。兼容性是最好的",-1);function f(u,h){const a=i("ExternalLinkIcon");return n(),s("div",null,[d,e("ul",null,[g,e("li",null,[t("KindEditor 4.x 文档"),e("a",p,[t("http://kindeditor.net/doc.php"),l(a)])]),v])])}const F=r(o,[["render",f],["__file","fastdfs.html.vue"]]),b=JSON.parse('{"path":"/backend/server/fastdfs.html","title":"FastDFS","lang":"zh-CN","frontmatter":{"title":"FastDFS","date":"2023-01-01T00:00:00.000Z","tags":"FastDFS","categories":"后端","description":"FastDFS 1. 什么是FastDFS？ FastDFS是用c语言编写的一款国产开源的分布式文件系统。考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。 2. FastDFS架构 FastDFS架构包括Tracker server和Storage s...","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/backend/server/fastdfs.html"}],["meta",{"property":"og:site_name","content":"JavaGuide"}],["meta",{"property":"og:title","content":"FastDFS"}],["meta",{"property":"og:description","content":"FastDFS 1. 什么是FastDFS？ FastDFS是用c语言编写的一款国产开源的分布式文件系统。考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。 2. FastDFS架构 FastDFS架构包括Tracker server和Storage s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://290ff162.telegraph-image-eg9.pages.dev/file/ce01ce788e74df3757f7f.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-07T01:56:33.000Z"}],["meta",{"property":"article:author","content":"HeChuangJun"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-07T01:56:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"FastDFS\\",\\"image\\":[\\"https://290ff162.telegraph-image-eg9.pages.dev/file/ce01ce788e74df3757f7f.png\\",\\"https://290ff162.telegraph-image-eg9.pages.dev/file/84401f0fda44b9e561f09.png\\",\\"https://290ff162.telegraph-image-eg9.pages.dev/file/ee213691c6dcea40845d2.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-07T01:56:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeChuangJun\\",\\"url\\":\\"https://javaguide.cn/article/\\"}]}"]]},"headers":[],"git":{"createdTime":1733536593000,"updatedTime":1733536593000,"contributors":[{"name":"HeChuangJun","email":"1105128664@qq.com","commits":1}]},"readingTime":{"minutes":3.05,"words":915},"filePathRelative":"backend/server/fastdfs.md","localizedDate":"2023年1月1日","excerpt":"<p>FastDFS</p>\\n<!--more-->\\n<h1>1. 什么是FastDFS？</h1>\\n<ul>\\n<li>FastDFS是用c语言编写的一款国产开源的分布式文件系统。考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</li>\\n</ul>\\n<h1>2. FastDFS架构</h1>\\n<ul>\\n<li>FastDFS架构包括Tracker server和Storage server</li>\\n<li>客户端请求Tracker server来调度Storage server完成文件上传和下载。</li>\\n<li>Tracker：管理集群，tracker也可以实现集群。每个tracker节点地位平等。收集Storage集群的状态。</li>\\n<li>Tracker server作用是负载均衡和调度，通过Tracker server在文件上传时可以根据一些策略找到可以将tracker称为追踪服务器或调度服务器。</li>\\n<li>Storage：实际保存文件,分为多个组，每个组之间保存的文件是不同的。每个组内部可以有多个成员，组成员内部保存的内容是一样的，组成员的地位是一致的，没有主从的概念。</li>\\n<li>Storage server作用是文件存储，客户端上传的文件最终存储在Storage服务器上，提供文件上传服务。</li>\\n<li>Storage server没有实现自己的文件系统而是利用操作系统 的文件系统来管理文件。可以将storage称为存储服务器。</li>\\n</ul>","autoDesc":true}');export{F as comp,b as data};
